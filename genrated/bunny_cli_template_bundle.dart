// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final bunnyCliTemplateBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "{{project_name}}/readme",
      "data":
          "IyB7e3Byb2plY3RfbmFtZX19CgpBIG5ldyBGbHV0dGVyIHByb2plY3QgY3JlYXRlZCB3aXRoIEJ1bm55IENMSS4KCiMjIFByb2plY3QgQ29uZmlndXJhdGlvbgoKIyMjIEJhc2ljIEluZm8KLSBQcm9qZWN0IE5hbWU6IHt7cHJvamVjdF9uYW1lfX0KLSBPcmdhbml6YXRpb246IHt7b3JnX25hbWV9fQoKIyMjIEFyY2hpdGVjdHVyZQpTZWxlY3RlZCBBcmNoaXRlY3R1cmU6IHt7YXJjaGl0ZWN0dXJlfX0KCkFyY2hpdGVjdHVyZSBEZXRhaWxzOgp7e2FyY2hpdGVjdHVyZURldGFpbHN9fQoKIyMjIFN0YXRlIE1hbmFnZW1lbnQKU2VsZWN0ZWQgU3RhdGUgTWFuYWdlbWVudDoge3tzdGF0ZV9tYW5hZ2VtZW50fX0KClN0YXRlIE1hbmFnZW1lbnQgRGV0YWlsczoKe3tzdGF0ZU1hbmFnZW1lbnREZXRhaWxzfX0KCiMjIyBTZWxlY3RlZCBGZWF0dXJlcwpGZWF0dXJlcyBpbmNsdWRlZCBpbiB0aGlzIHByb2plY3Q6Cnt7I2ZlYXR1cmVzfX0KLSB7ey59fQp7ey9mZWF0dXJlc319CgojIyMgU2VsZWN0ZWQgTW9kdWxlcwpNb2R1bGVzIGluY2x1ZGVkIGluIHRoaXMgcHJvamVjdDoKe3sjbW9kdWxlc319Ci0ge3sufX0Ke3svbW9kdWxlc319CgojIyBQcm9qZWN0IFN0cnVjdHVyZQpgYGAKbGliLwrilJzilIDilIAgY29yZS8K4pSCICAg4pSc4pSA4pSAIGNvbmZpZy8K4pSCICAg4pSc4pSA4pSAIHRoZW1lLwrilIIgICDilJTilIDilIAgdXRpbHMvCuKUnOKUgOKUgCBmZWF0dXJlcy8Ke3sjZmVhdHVyZXN9fQrilIIgICDilJzilIDilIAge3sufX0vCnt7L2ZlYXR1cmVzfX0K4pSU4pSA4pSAIG1vZHVsZXMvCnt7I21vZHVsZXN9fQogICAg4pSc4pSA4pSAIHt7Ln19Lwp7ey9tb2R1bGVzfX0KYGBgCgojIyBHZXR0aW5nIFN0YXJ0ZWQKCjEuIENsb25lIHRoZSByZXBvc2l0b3J5CjIuIEluc3RhbGwgZGVwZW5kZW5jaWVzOgogICBgYGBiYXNoCiAgIGZsdXR0ZXIgcHViIGdldAogICBgYGAKMy4gUnVuIHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXI6CiAgIGBgYGJhc2gKICAgZmx1dHRlciBydW4KICAgYGBgCgojIyBEZXZlbG9wbWVudCBHdWlkZWxpbmVzCgojIyMgQ29kZSBTdHlsZQotIEZvbGxvdyBGbHV0dGVyJ3Mgb2ZmaWNpYWwgc3R5bGUgZ3VpZGUKLSBVc2UgbWVhbmluZ2Z1bCB2YXJpYWJsZSBhbmQgZnVuY3Rpb24gbmFtZXMKLSBXcml0ZSBjb21tZW50cyBmb3IgY29tcGxleCBsb2dpYwotIEtlZXAgZmlsZXMgYW5kIGNsYXNzZXMgZm9jdXNlZCBhbmQgc21hbGwKCiMjIyBBcmNoaXRlY3R1cmUgR3VpZGVsaW5lcwotIEZvbGxvdyB0aGUge3thcmNoaXRlY3R1cmV9fSBwYXR0ZXJuCi0gTWFpbnRhaW4gc2VwYXJhdGlvbiBvZiBjb25jZXJucwotIFdyaXRlIHVuaXQgdGVzdHMgZm9yIGJ1c2luZXNzIGxvZ2ljCi0gRG9jdW1lbnQgY29tcGxleCBpbXBsZW1lbnRhdGlvbnMKCiMjIyBTdGF0ZSBNYW5hZ2VtZW50Ci0gVXNlIHt7c3RhdGVfbWFuYWdlbWVudH19IGZvciBzdGF0ZSBtYW5hZ2VtZW50Ci0gRm9sbG93IGJlc3QgcHJhY3RpY2VzIGZvciBjaG9zZW4gc29sdXRpb24KLSBNYWludGFpbiBjbGVhciBzdGF0ZSB1cGRhdGUgcGF0dGVybnMKLSBEb2N1bWVudCBzdGF0ZSBmbG93IGZvciBjb21wbGV4IGZlYXR1cmVzCgojIyBUZXN0aW5nCgpgYGBiYXNoCiMgUnVuIGFsbCB0ZXN0cwpmbHV0dGVyIHRlc3QKCiMgUnVuIHRlc3RzIHdpdGggY292ZXJhZ2UKZmx1dHRlciB0ZXN0IC0tY292ZXJhZ2UKYGBgCgojIyBCdWlsZGluZyBmb3IgUHJvZHVjdGlvbgoKYGBgYmFzaAojIEJ1aWxkIEFQSwpmbHV0dGVyIGJ1aWxkIGFwawoKIyBCdWlsZCBpT1MKZmx1dHRlciBidWlsZCBpb3MKYGBgCgojIyBMaWNlbnNlCgpUaGlzIHByb2plY3QgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIC0gc2VlIHRoZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMu",
      "type": "text"
    }
  ],
  "hooks": [
    {
      "path": "lib/architecture_handler.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwppbXBvcnQgJ3V0aWxzLmRhcnQnOwoKdm9pZCBjcmVhdGVBcmNoaXRlY3R1cmVTdHJ1Y3R1cmUoCiAgSG9va0NvbnRleHQgY29udGV4dCwgCiAgU3RyaW5nIHByb2plY3ROYW1lLCAKICBTdHJpbmcgYXJjaGl0ZWN0dXJlCikgewogIExpc3Q8U3RyaW5nPiBkaXJlY3RvcmllcyA9IFtdOwoKICBzd2l0Y2ggKGFyY2hpdGVjdHVyZSkgewogICAgY2FzZSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvZXJyb3InLAogICAgICAgICdsaWIvY29yZS9uZXR3b3JrJywKICAgICAgICAnbGliL2NvcmUvdXRpbHMnLAogICAgICAgICdsaWIvY29yZS90aGVtZScsCiAgICAgICAgJ2xpYi9pbmZyYXN0cnVjdHVyZS9pbmplY3RvcicsCiAgICAgICAgJ2xpYi9pbmZyYXN0cnVjdHVyZS9uYXZpZ2F0aW9uJywKICAgICAgXTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVlZNJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvc2VydmljZXMnLAogICAgICAgICdsaWIvY29yZS91dGlscycsCiAgICAgICAgJ2xpYi9zaGFyZWQnLAogICAgICAgICdsaWIvc2hhcmVkL3dpZGdldHMnLAogICAgICAgICdsaWIvc2hhcmVkL3V0aWxzJywKICAgICAgXTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVkMnOgogICAgICBkaXJlY3RvcmllcyA9IFsKICAgICAgICAnbGliL2NvcmUnLAogICAgICAgICdsaWIvY29yZS9zZXJ2aWNlcycsCiAgICAgICAgJ2xpYi9jb3JlL3V0aWxzJywKICAgICAgICAnbGliL3NoYXJlZCcsCiAgICAgICAgJ2xpYi9zaGFyZWQvd2lkZ2V0cycsCiAgICAgICAgJ2xpYi9zaGFyZWQvdXRpbHMnLAogICAgICBdOwogICAgICBicmVhazsKICAgIGNhc2UgJ0ZlYXR1cmUtRHJpdmVuJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvdXRpbHMnLAogICAgICAgICdsaWIvY29yZS9zZXJ2aWNlcycsCiAgICAgICAgJ2xpYi9zaGFyZWQvd2lkZ2V0cycsCiAgICAgICAgJ2xpYi9zaGFyZWQvc2VydmljZXMnLAogICAgICBdOwogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgIGNvbnRleHQubG9nZ2VyLndhcm4oJ1Vua25vd24gYXJjaGl0ZWN0dXJlOiAkYXJjaGl0ZWN0dXJlJyk7CiAgICAgIHJldHVybjsKICB9CgogIGZvciAoZmluYWwgZGlyIGluIGRpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBhcmNoaXRlY3R1cmUgZGlyZWN0b3J5OiAkZGlyJyk7CiAgICB9CiAgfQogIAogIC8vIENyZWF0ZSBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgZmlsZXMKICBjcmVhdGVBcmNoaXRlY3R1cmVGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgYXJjaGl0ZWN0dXJlKTsKfQoKdm9pZCBjcmVhdGVBcmNoaXRlY3R1cmVGaWxlcygKICBIb29rQ29udGV4dCBjb250ZXh0LAogIFN0cmluZyBwcm9qZWN0TmFtZSwKICBTdHJpbmcgYXJjaGl0ZWN0dXJlCikgewogIHN3aXRjaCAoYXJjaGl0ZWN0dXJlKSB7CiAgICBjYXNlICdDbGVhbiBBcmNoaXRlY3R1cmUnOgogICAgICBjcmVhdGVDbGVhbkFyY2hpdGVjdHVyZUZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVlZNJzoKICAgICAgY3JlYXRlTVZWTUFyY2hpdGVjdHVyZUZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVkMnOgogICAgICBjcmVhdGVNVkNBcmNoaXRlY3R1cmVGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnRmVhdHVyZS1Ecml2ZW4nOgogICAgICBjcmVhdGVGZWF0dXJlRHJpdmVuQXJjaGl0ZWN0dXJlRmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUpOwogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgIC8vIE5vIHNwZWNpZmljIGZpbGVzIHRvIGNyZWF0ZQogIH0KfQoKdm9pZCBjcmVhdGVDbGVhbkFyY2hpdGVjdHVyZUZpbGVzKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIC8vIENvcmUgZXJyb3IgaGFuZGxpbmcKICBjcmVhdGVGaWxlKAogICAgJyRwcm9qZWN0TmFtZS9saWIvY29yZS9lcnJvci9mYWlsdXJlcy5kYXJ0JywKICAgICcnJwovLyBGYWlsdXJlIGJhc2UgY2xhc3MgYW5kIGltcGxlbWVudGF0aW9ucwovLyBHZW5lcmF0ZWQgYnkgTWFzb24KCmFic3RyYWN0IGNsYXNzIEZhaWx1cmUgewogIGZpbmFsIFN0cmluZyBtZXNzYWdlOwogIAogIGNvbnN0IEZhaWx1cmUoe3JlcXVpcmVkIHRoaXMubWVzc2FnZX0pOwp9CgpjbGFzcyBTZXJ2ZXJGYWlsdXJlIGV4dGVuZHMgRmFpbHVyZSB7CiAgY29uc3QgU2VydmVyRmFpbHVyZSh7cmVxdWlyZWQgU3RyaW5nIG1lc3NhZ2V9KSA6IHN1cGVyKG1lc3NhZ2U6IG1lc3NhZ2UpOwp9CgpjbGFzcyBDYWNoZUZhaWx1cmUgZXh0ZW5kcyBGYWlsdXJlIHsKICBjb25zdCBDYWNoZUZhaWx1cmUoe3JlcXVpcmVkIFN0cmluZyBtZXNzYWdlfSkgOiBzdXBlcihtZXNzYWdlOiBtZXNzYWdlKTsKfQoKY2xhc3MgTmV0d29ya0ZhaWx1cmUgZXh0ZW5kcyBGYWlsdXJlIHsKICBjb25zdCBOZXR3b3JrRmFpbHVyZSh7cmVxdWlyZWQgU3RyaW5nIG1lc3NhZ2V9KSA6IHN1cGVyKG1lc3NhZ2U6IG1lc3NhZ2UpOwp9CicnJywKICAgIGNvbnRleHQKICApOwogIAogIC8vIERJIHNldHVwIGZpbGUKICBjcmVhdGVGaWxlKAogICAgJyRwcm9qZWN0TmFtZS9saWIvaW5mcmFzdHJ1Y3R1cmUvaW5qZWN0b3IvaW5qZWN0b3IuZGFydCcsCiAgICAnJycKLy8gRGVwZW5kZW5jeSBpbmplY3Rpb24gc2V0dXAKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgovLyBUaGlzIGZpbGUgd2lsbCBiZSB1c2VkIHRvIHNldHVwIGRlcGVuZGVuY3kgaW5qZWN0aW9uCi8vIHdpdGggYSBwYWNrYWdlIGxpa2UgZ2V0X2l0LCBpbmplY3RhYmxlLCBldGMuCgp2b2lkIHNldHVwSW5qZWN0b3IoKSB7CiAgLy8gVE9ETzogUmVnaXN0ZXIgZGVwZW5kZW5jaWVzCn0KJycnLAogICAgY29udGV4dAogICk7Cn0KCnZvaWQgY3JlYXRlTVZWTUFyY2hpdGVjdHVyZUZpbGVzKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIC8vIEJhc2UgdmlldyBtb2RlbAogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL2Jhc2Vfdmlld19tb2RlbC5kYXJ0JywKICAgICcnJwovLyBCYXNlIHZpZXcgbW9kZWwKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgphYnN0cmFjdCBjbGFzcyBCYXNlVmlld01vZGVsIHsKICAvLyBCYXNlIHZpZXcgbW9kZWwgZnVuY3Rpb25hbGl0eQogIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGluY2x1ZGUgY29tbW9uIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMKICAvLyBmb3IgYWxsIHZpZXcgbW9kZWxzIGluIHRoZSBhcHBsaWNhdGlvbgogIAogIGJvb2wgaXNMb2FkaW5nID0gZmFsc2U7CiAgU3RyaW5nPyBlcnJvck1lc3NhZ2U7CiAgCiAgdm9pZCBzZXRMb2FkaW5nKGJvb2wgbG9hZGluZykgewogICAgaXNMb2FkaW5nID0gbG9hZGluZzsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9CiAgCiAgdm9pZCBzZXRFcnJvcihTdHJpbmc/IGVycm9yKSB7CiAgICBlcnJvck1lc3NhZ2UgPSBlcnJvcjsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9Cn0KJycnLAogICAgY29udGV4dAogICk7Cn0KCnZvaWQgY3JlYXRlTVZDQXJjaGl0ZWN0dXJlRmlsZXMoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgLy8gQmFzZSBjb250cm9sbGVyCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2NvcmUvYmFzZV9jb250cm9sbGVyLmRhcnQnLAogICAgJycnCi8vIEJhc2UgY29udHJvbGxlcgovLyBHZW5lcmF0ZWQgYnkgTWFzb24KCmFic3RyYWN0IGNsYXNzIEJhc2VDb250cm9sbGVyIHsKICAvLyBCYXNlIGNvbnRyb2xsZXIgZnVuY3Rpb25hbGl0eQogIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGluY2x1ZGUgY29tbW9uIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMKICAvLyBmb3IgYWxsIGNvbnRyb2xsZXJzIGluIHRoZSBhcHBsaWNhdGlvbgogIAogIGJvb2wgaXNMb2FkaW5nID0gZmFsc2U7CiAgU3RyaW5nPyBlcnJvck1lc3NhZ2U7CiAgCiAgdm9pZCBzZXRMb2FkaW5nKGJvb2wgbG9hZGluZykgewogICAgaXNMb2FkaW5nID0gbG9hZGluZzsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9CiAgCiAgdm9pZCBzZXRFcnJvcihTdHJpbmc/IGVycm9yKSB7CiAgICBlcnJvck1lc3NhZ2UgPSBlcnJvcjsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9Cn0KJycnLAogICAgY29udGV4dAogICk7Cn0KCnZvaWQgY3JlYXRlRmVhdHVyZURyaXZlbkFyY2hpdGVjdHVyZUZpbGVzKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIC8vIEFwcCBuYXZpZ2F0aW9uCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2NvcmUvbmF2aWdhdGlvbi9hcHBfcm91dGVyLmRhcnQnLAogICAgJycnCi8vIEFwcCByb3V0ZXIKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKCmNsYXNzIEFwcFJvdXRlciB7CiAgc3RhdGljIFJvdXRlPGR5bmFtaWM+IGdlbmVyYXRlUm91dGUoUm91dGVTZXR0aW5ncyBzZXR0aW5ncykgewogICAgLy8gVE9ETzogSW1wbGVtZW50IHJvdXRlIGdlbmVyYXRpb24gYmFzZWQgb24geW91ciBmZWF0dXJlcwogICAgc3dpdGNoIChzZXR0aW5ncy5uYW1lKSB7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIE1hdGVyaWFsUGFnZVJvdXRlKAogICAgICAgICAgYnVpbGRlcjogKF8pID0+IFNjYWZmb2xkKAogICAgICAgICAgICBib2R5OiBDZW50ZXIoCiAgICAgICAgICAgICAgY2hpbGQ6IFRleHQoJ05vIHJvdXRlIGRlZmluZWQgZm9yIFwke3NldHRpbmdzLm5hbWV9JyksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICk7CiAgICB9CiAgfQp9CicnJywKICAgIGNvbnRleHQKICApOwp9",
      "type": "text"
    },
    {
      "path": "lib/feature_generator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwppbXBvcnQgJ3V0aWxzLmRhcnQnOwppbXBvcnQgJ3N0YXRlX21hbmFnZW1lbnRfaGFuZGxlci5kYXJ0JzsKCnZvaWQgY3JlYXRlRmVhdHVyZVN0cnVjdHVyZXMoCiAgSG9va0NvbnRleHQgY29udGV4dCwgCiAgU3RyaW5nIHByb2plY3ROYW1lLCAKICBMaXN0PGR5bmFtaWM+IGZlYXR1cmVzLAogIFN0cmluZyBhcmNoaXRlY3R1cmUsCiAgU3RyaW5nIHN0YXRlTWFuYWdlbWVudAopIHsKICBmb3IgKGZpbmFsIGZlYXR1cmUgaW4gZmVhdHVyZXMpIHsKICAgIGZpbmFsIGZlYXR1cmVOYW1lID0gZmVhdHVyZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkucmVwbGFjZUFsbCgnICcsICdfJyk7CiAgICAKICAgIHN3aXRjaCAoYXJjaGl0ZWN0dXJlKSB7CiAgICAgIGNhc2UgJ0NsZWFuIEFyY2hpdGVjdHVyZSc6CiAgICAgICAgY3JlYXRlQ2xlYW5BcmNoaXRlY3R1cmVGZWF0dXJlKGNvbnRleHQsIHByb2plY3ROYW1lLCBmZWF0dXJlTmFtZSwgc3RhdGVNYW5hZ2VtZW50KTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnTVZWTSc6CiAgICAgICAgY3JlYXRlTVZWTUZlYXR1cmUoY29udGV4dCwgcHJvamVjdE5hbWUsIGZlYXR1cmVOYW1lLCBzdGF0ZU1hbmFnZW1lbnQpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdNVkMnOgogICAgICAgIGNyZWF0ZU1WQ0ZlYXR1cmUoY29udGV4dCwgcHJvamVjdE5hbWUsIGZlYXR1cmVOYW1lLCBzdGF0ZU1hbmFnZW1lbnQpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdGZWF0dXJlLURyaXZlbic6CiAgICAgICAgY3JlYXRlRmVhdHVyZURyaXZlbkZlYXR1cmUoY29udGV4dCwgcHJvamVjdE5hbWUsIGZlYXR1cmVOYW1lLCBzdGF0ZU1hbmFnZW1lbnQpOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIGNvbnRleHQubG9nZ2VyLndhcm4oJ1Vua25vd24gYXJjaGl0ZWN0dXJlOiAkYXJjaGl0ZWN0dXJlJyk7CiAgICAgICAgY29udGludWU7CiAgICB9CiAgfQp9Cgp2b2lkIGNyZWF0ZUNsZWFuQXJjaGl0ZWN0dXJlRmVhdHVyZSgKICBIb29rQ29udGV4dCBjb250ZXh0LAogIFN0cmluZyBwcm9qZWN0TmFtZSwKICBTdHJpbmcgZmVhdHVyZU5hbWUsCiAgU3RyaW5nIHN0YXRlTWFuYWdlbWVudAopIHsKICAvLyBDcmVhdGUgQ2xlYW4gQXJjaGl0ZWN0dXJlIHN0cnVjdHVyZSBmb3IgdGhlIGZlYXR1cmUKICBmaW5hbCBiYXNlRGlyZWN0b3JpZXMgPSBbCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vZW50aXRpZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL3JlcG9zaXRvcmllcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vdXNlY2FzZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9tb2RlbHMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9yZXBvc2l0b3JpZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9kYXRhc291cmNlcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vcGFnZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvcHJlc2VudGF0aW9uL3dpZGdldHMnLAogIF07CgogIC8vIENyZWF0ZSBhbGwgYmFzZSBkaXJlY3RvcmllcwogIGZvciAoZmluYWwgZGlyIGluIGJhc2VEaXJlY3RvcmllcykgewogICAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KCckcHJvamVjdE5hbWUvJGRpcicpOwogICAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgZmVhdHVyZSBkaXJlY3Rvcnk6ICRkaXInKTsKICAgIH0KICB9CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSBlbnRpdHkKICBjcmVhdGVGaWxlKAogICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi9lbnRpdGllcy8ke2ZlYXR1cmVOYW1lfV9lbnRpdHkuZGFydCcsCiAgICBnZW5lcmF0ZUVudGl0eVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzYW1wbGUgcmVwb3NpdG9yeSBpbnRlcmZhY2UKICBjcmVhdGVGaWxlKAogICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi9yZXBvc2l0b3JpZXMvJHtmZWF0dXJlTmFtZX1fcmVwb3NpdG9yeS5kYXJ0JywKICAgIGdlbmVyYXRlUmVwb3NpdG9yeVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzYW1wbGUgdXNlIGNhc2UKICBjcmVhdGVGaWxlKAogICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi91c2VjYXNlcy8ke2ZlYXR1cmVOYW1lfV91c2VjYXNlLmRhcnQnLAogICAgZ2VuZXJhdGVVc2VDYXNlVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSBtb2RlbAogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9tb2RlbHMvJHtmZWF0dXJlTmFtZX1fbW9kZWwuZGFydCcsCiAgICBnZW5lcmF0ZU1vZGVsVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSByZXBvc2l0b3J5IGltcGxlbWVudGF0aW9uCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL3JlcG9zaXRvcmllcy8ke2ZlYXR1cmVOYW1lfV9yZXBvc2l0b3J5X2ltcGwuZGFydCcsCiAgICBnZW5lcmF0ZVJlcG9zaXRvcnlJbXBsVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSBkYXRhIHNvdXJjZQogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9kYXRhc291cmNlcy8ke2ZlYXR1cmVOYW1lfV9kYXRhX3NvdXJjZS5kYXJ0JywKICAgIGdlbmVyYXRlRGF0YVNvdXJjZVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzYW1wbGUgcGFnZQogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvcHJlc2VudGF0aW9uL3BhZ2VzLyR7ZmVhdHVyZU5hbWV9X3BhZ2UuZGFydCcsCiAgICBnZW5lcmF0ZVBhZ2VUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICBjb250ZXh0CiAgKTsKICAKICAvLyBDcmVhdGUgc2FtcGxlIHdpZGdldAogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvcHJlc2VudGF0aW9uL3dpZGdldHMvJHtmZWF0dXJlTmFtZX1fd2lkZ2V0LmRhcnQnLAogICAgZ2VuZXJhdGVXaWRnZXRUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICBjb250ZXh0CiAgKTsKICAKICAvLyBDcmVhdGUgc3RhdGUgbWFuYWdlbWVudCBmaWxlcwogIGNyZWF0ZVN0YXRlTWFuYWdlbWVudEZpbGVzKAogICAgY29udGV4dCwgCiAgICBwcm9qZWN0TmFtZSwgCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24nLAogICAgZmVhdHVyZU5hbWUsCiAgICBzdGF0ZU1hbmFnZW1lbnQKICApOwp9Cgp2b2lkIGNyZWF0ZU1WVk1GZWF0dXJlKAogIEhvb2tDb250ZXh0IGNvbnRleHQsCiAgU3RyaW5nIHByb2plY3ROYW1lLAogIFN0cmluZyBmZWF0dXJlTmFtZSwKICBTdHJpbmcgc3RhdGVNYW5hZ2VtZW50CikgewogIC8vIENyZWF0ZSBNVlZNIHN0cnVjdHVyZSBmb3IgdGhlIGZlYXR1cmUKICBmaW5hbCBiYXNlRGlyZWN0b3JpZXMgPSBbCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9tb2RlbHMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld3MnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9zZXJ2aWNlcycsCiAgXTsKCiAgLy8gQ3JlYXRlIGFsbCBiYXNlIGRpcmVjdG9yaWVzCiAgZm9yIChmaW5hbCBkaXIgaW4gYmFzZURpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmZWF0dXJlIGRpcmVjdG9yeTogJGRpcicpOwogICAgfQogIH0KICAKICAvLyBDcmVhdGUgc2FtcGxlIG1vZGVsCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9tb2RlbHMvJHtmZWF0dXJlTmFtZX1fbW9kZWwuZGFydCcsCiAgICAnJycKLy8gJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgpjbGFzcyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCB7CiAgZmluYWwgU3RyaW5nIGlkOwogIGZpbmFsIFN0cmluZyBuYW1lOwogIC8vIEFkZCBtb3JlIGZpZWxkcyBhcyBuZWVkZWQKICAKICAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCh7CiAgICByZXF1aXJlZCB0aGlzLmlkLAogICAgcmVxdWlyZWQgdGhpcy5uYW1lLAogIH0pOwogIAogIGZhY3RvcnkgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwuZnJvbUpzb24oTWFwPFN0cmluZywgZHluYW1pYz4ganNvbikgewogICAgcmV0dXJuICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfU1vZGVsKAogICAgICBpZDoganNvblsnaWQnXSwKICAgICAgbmFtZToganNvblsnbmFtZSddLAogICAgKTsKICB9CiAgCiAgTWFwPFN0cmluZywgZHluYW1pYz4gdG9Kc29uKCkgewogICAgcmV0dXJuIHsKICAgICAgJ2lkJzogaWQsCiAgICAgICduYW1lJzogbmFtZSwKICAgIH07CiAgfQp9CicnJywKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzYW1wbGUgdmlldwogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld3MvJHtmZWF0dXJlTmFtZX1fdmlldy5kYXJ0JywKICAgICcnJwovLyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1WaWV3Ci8vIEdlbmVyYXRlZCBieSBNYXNvbgppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICcuLi92aWV3bW9kZWxzLyR7ZmVhdHVyZU5hbWV9X3ZpZXdtb2RlbC5kYXJ0JzsKCmNsYXNzICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVZpZXcgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0ICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVZpZXcoe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgLy8gVXNlIHN0YXRlIG1hbmFnZW1lbnQgaGVyZSB0byBjb25uZWN0IHdpdGggdmlld21vZGVsCiAgICByZXR1cm4gU2NhZmZvbGQoCiAgICAgIGFwcEJhcjogQXBwQmFyKAogICAgICAgIHRpdGxlOiBUZXh0KCcke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX0nKSwKICAgICAgKSwKICAgICAgYm9keTogQ2VudGVyKAogICAgICAgIGNoaWxkOiBUZXh0KCcke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX0gVmlldycpLAogICAgICApLAogICAgKTsKICB9Cn0KJycnLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSBzZXJ2aWNlCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9zZXJ2aWNlcy8ke2ZlYXR1cmVOYW1lfV9zZXJ2aWNlLmRhcnQnLAogICAgJycnCi8vICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVNlcnZpY2UKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgpjbGFzcyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1TZXJ2aWNlIHsKICAvLyBUT0RPOiBJbXBsZW1lbnQgQVBJIGNhbGxzLCBkYXRhYmFzZSBvcGVyYXRpb25zLCBldGMuCiAgCiAgRnV0dXJlPHZvaWQ+IGZldGNoRGF0YSgpIGFzeW5jIHsKICAgIC8vIFNhbXBsZSBpbXBsZW1lbnRhdGlvbgogIH0KICAKICBGdXR1cmU8dm9pZD4gc2F2ZURhdGEoKSBhc3luYyB7CiAgICAvLyBTYW1wbGUgaW1wbGVtZW50YXRpb24KICB9Cn0KJycnLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHN0YXRlIG1hbmFnZW1lbnQtc3BlY2lmaWMgdmlld21vZGVsCiAgc3dpdGNoIChzdGF0ZU1hbmFnZW1lbnQpIHsKICAgIGNhc2UgJ1Byb3ZpZGVyJzoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscy8ke2ZlYXR1cmVOYW1lfV92aWV3bW9kZWwuZGFydCcsCiAgICAgICAgZ2VuZXJhdGVQcm92aWRlclZpZXdNb2RlbChmZWF0dXJlTmFtZSksCiAgICAgICAgY29udGV4dAogICAgICApOwogICAgICBicmVhazsKICAgIGNhc2UgJ1JpdmVycG9kJzoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscy8ke2ZlYXR1cmVOYW1lfV92aWV3bW9kZWwuZGFydCcsCiAgICAgICAgZ2VuZXJhdGVSaXZlcnBvZFZpZXdNb2RlbChmZWF0dXJlTmFtZSksCiAgICAgICAgY29udGV4dAogICAgICApOwogICAgICBicmVhazsKICAgIGNhc2UgJ0JMb0MnOgogICAgICBjcmVhdGVCbG9jRmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUsICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ZpZXdtb2RlbHMnLCBmZWF0dXJlTmFtZSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnR2V0WCc6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ZpZXdtb2RlbHMvJHtmZWF0dXJlTmFtZX1fdmlld21vZGVsLmRhcnQnLAogICAgICAgIGdlbmVyYXRlR2V0WFZpZXdNb2RlbChmZWF0dXJlTmFtZSksCiAgICAgICAgY29udGV4dAogICAgICApOwogICAgICBicmVhazsKICAgIGNhc2UgJ01vYlgnOgogICAgICBjcmVhdGVGaWxlKAogICAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS92aWV3bW9kZWxzLyR7ZmVhdHVyZU5hbWV9X3ZpZXdtb2RlbC5kYXJ0JywKICAgICAgICBnZW5lcmF0ZU1vYlhWaWV3TW9kZWwoZmVhdHVyZU5hbWUpLAogICAgICAgIGNvbnRleHQKICAgICAgKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdSZWR1eCc6CiAgICAgIGNyZWF0ZVJlZHV4RmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUsICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ZpZXdtb2RlbHMnLCBmZWF0dXJlTmFtZSk7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscy8ke2ZlYXR1cmVOYW1lfV92aWV3bW9kZWwuZGFydCcsCiAgICAgICAgZ2VuZXJhdGVCYXNpY1ZpZXdNb2RlbChmZWF0dXJlTmFtZSksCiAgICAgICAgY29udGV4dAogICAgICApOwogIH0KfQoKdm9pZCBjcmVhdGVNVkNGZWF0dXJlKAogIEhvb2tDb250ZXh0IGNvbnRleHQsCiAgU3RyaW5nIHByb2plY3ROYW1lLAogIFN0cmluZyBmZWF0dXJlTmFtZSwKICBTdHJpbmcgc3RhdGVNYW5hZ2VtZW50CikgewogIC8vIENyZWF0ZSBNVkMgc3RydWN0dXJlIGZvciB0aGUgZmVhdHVyZQogIGZpbmFsIGJhc2VEaXJlY3RvcmllcyA9IFsKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL21vZGVscycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS92aWV3cycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9jb250cm9sbGVycycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9zZXJ2aWNlcycsCiAgXTsKCiAgLy8gQ3JlYXRlIGFsbCBiYXNlIGRpcmVjdG9yaWVzCiAgZm9yIChmaW5hbCBkaXIgaW4gYmFzZURpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmZWF0dXJlIGRpcmVjdG9yeTogJGRpcicpOwogICAgfQogIH0KICAKICAvLyBDcmVhdGUgc2FtcGxlIG1vZGVsCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9tb2RlbHMvJHtmZWF0dXJlTmFtZX1fbW9kZWwuZGFydCcsCiAgICAnJycKLy8gJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgpjbGFzcyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCB7CiAgZmluYWwgU3RyaW5nIGlkOwogIGZpbmFsIFN0cmluZyBuYW1lOwogIC8vIEFkZCBtb3JlIGZpZWxkcyBhcyBuZWVkZWQKICAKICAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCh7CiAgICByZXF1aXJlZCB0aGlzLmlkLAogICAgcmVxdWlyZWQgdGhpcy5uYW1lLAogIH0pOwogIAogIGZhY3RvcnkgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwuZnJvbUpzb24oTWFwPFN0cmluZywgZHluYW1pYz4ganNvbikgewogICAgcmV0dXJuICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfU1vZGVsKAogICAgICBpZDoganNvblsnaWQnXSwKICAgICAgbmFtZToganNvblsnbmFtZSddLAogICAgKTsKICB9CiAgCiAgTWFwPFN0cmluZywgZHluYW1pYz4gdG9Kc29uKCkgewogICAgcmV0dXJuIHsKICAgICAgJ2lkJzogaWQsCiAgICAgICduYW1lJzogbmFtZSwKICAgIH07CiAgfQp9CicnJywKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzYW1wbGUgdmlldwogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld3MvJHtmZWF0dXJlTmFtZX1fdmlldy5kYXJ0JywKICAgICcnJwovLyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1WaWV3Ci8vIEdlbmVyYXRlZCBieSBNYXNvbgppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICcuLi9jb250cm9sbGVycy8ke2ZlYXR1cmVOYW1lfV9jb250cm9sbGVyLmRhcnQnOwoKY2xhc3MgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9VmlldyBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3QgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9Vmlldyh7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICAvLyBVc2Ugc3RhdGUgbWFuYWdlbWVudCBoZXJlIHRvIGNvbm5lY3Qgd2l0aCBjb250cm9sbGVyCiAgICByZXR1cm4gU2NhZmZvbGQoCiAgICAgIGFwcEJhcjogQXBwQmFyKAogICAgICAgIHRpdGxlOiBUZXh0KCcke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX0nKSwKICAgICAgKSwKICAgICAgYm9keTogQ2VudGVyKAogICAgICAgIGNoaWxkOiBUZXh0KCcke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX0gVmlldycpLAogICAgICApLAogICAgKTsKICB9Cn0KJycnLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSBzZXJ2aWNlCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9zZXJ2aWNlcy8ke2ZlYXR1cmVOYW1lfV9zZXJ2aWNlLmRhcnQnLAogICAgJycnCi8vICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVNlcnZpY2UKLy8gR2VuZXJhdGVkIGJ5IE1hc29uCgpjbGFzcyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1TZXJ2aWNlIHsKICAvLyBUT0RPOiBJbXBsZW1lbnQgQVBJIGNhbGxzLCBkYXRhYmFzZSBvcGVyYXRpb25zLCBldGMuCiAgCiAgRnV0dXJlPHZvaWQ+IGZldGNoRGF0YSgpIGFzeW5jIHsKICAgIC8vIFNhbXBsZSBpbXBsZW1lbnRhdGlvbgogIH0KICAKICBGdXR1cmU8dm9pZD4gc2F2ZURhdGEoKSBhc3luYyB7CiAgICAvLyBTYW1wbGUgaW1wbGVtZW50YXRpb24KICB9Cn0KJycnLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHN0YXRlIG1hbmFnZW1lbnQtc3BlY2lmaWMgY29udHJvbGxlcgogIHN3aXRjaCAoc3RhdGVNYW5hZ2VtZW50KSB7CiAgICBjYXNlICdQcm92aWRlcic6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2NvbnRyb2xsZXJzLyR7ZmVhdHVyZU5hbWV9X2NvbnRyb2xsZXIuZGFydCcsCiAgICAgICAgZ2VuZXJhdGVQcm92aWRlckNvbnRyb2xsZXIoZmVhdHVyZU5hbWUpLAogICAgICAgIGNvbnRleHQKICAgICAgKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdSaXZlcnBvZCc6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2NvbnRyb2xsZXJzLyR7ZmVhdHVyZU5hbWV9X2NvbnRyb2xsZXIuZGFydCcsCiAgICAgICAgZ2VuZXJhdGVSaXZlcnBvZENvbnRyb2xsZXIoZmVhdHVyZU5hbWUpLAogICAgICAgIGNvbnRleHQKICAgICAgKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdCTG9DJzoKICAgICAgY3JlYXRlQmxvY0ZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lLCAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9jb250cm9sbGVycycsIGZlYXR1cmVOYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdHZXRYJzoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvY29udHJvbGxlcnMvJHtmZWF0dXJlTmFtZX1fY29udHJvbGxlci5kYXJ0JywKICAgICAgICBnZW5lcmF0ZUdldFhDb250cm9sbGVyKGZlYXR1cmVOYW1lKSwKICAgICAgICBjb250ZXh0CiAgICAgICk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnTW9iWCc6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2NvbnRyb2xsZXJzLyR7ZmVhdHVyZU5hbWV9X2NvbnRyb2xsZXIuZGFydCcsCiAgICAgICAgZ2VuZXJhdGVNb2JYQ29udHJvbGxlcihmZWF0dXJlTmFtZSksCiAgICAgICAgY29udGV4dAogICAgICApOwogICAgICBicmVhazsKICAgIGNhc2UgJ1JlZHV4JzoKICAgICAgY3JlYXRlUmVkdXhGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvY29udHJvbGxlcnMnLCBmZWF0dXJlTmFtZSk7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvY29udHJvbGxlcnMvJHtmZWF0dXJlTmFtZX1fY29udHJvbGxlci5kYXJ0JywKICAgICAgICBnZW5lcmF0ZUJhc2ljQ29udHJvbGxlcihmZWF0dXJlTmFtZSksCiAgICAgICAgY29udGV4dAogICAgICApOwogIH0KfQoKdm9pZCBjcmVhdGVGZWF0dXJlRHJpdmVuRmVhdHVyZSgKICBIb29rQ29udGV4dCBjb250ZXh0LAogIFN0cmluZyBwcm9qZWN0TmFtZSwKICBTdHJpbmcgZmVhdHVyZU5hbWUsCiAgU3RyaW5nIHN0YXRlTWFuYWdlbWVudAopIHsKICAvLyBDcmVhdGUgRmVhdHVyZS1Ecml2ZW4gc3RydWN0dXJlIGZvciB0aGUgZmVhdHVyZQogIGZpbmFsIGJhc2VEaXJlY3RvcmllcyA9IFsKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi9lbnRpdGllcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vcmVwb3NpdG9yaWVzJywKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi91c2VjYXNlcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL21vZGVscycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL3JlcG9zaXRvcmllcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL2RhdGFzb3VyY2VzJywKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ByZXNlbnRhdGlvbi9wYWdlcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vd2lkZ2V0cycsCiAgXTsKCiAgLy8gQ3JlYXRlIGFsbCBiYXNlIGRpcmVjdG9yaWVzCiAgZm9yIChmaW5hbCBkaXIgaW4gYmFzZURpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmZWF0dXJlIGRpcmVjdG9yeTogJGRpcicpOwogICAgfQogIH0KICAKICAvLyBDcmVhdGUgc2FtcGxlIGVudGl0eQogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL2VudGl0aWVzLyR7ZmVhdHVyZU5hbWV9X2VudGl0eS5kYXJ0JywKICAgIGdlbmVyYXRlRW50aXR5VGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSByZXBvc2l0b3J5IGludGVyZmFjZQogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL3JlcG9zaXRvcmllcy8ke2ZlYXR1cmVOYW1lfV9yZXBvc2l0b3J5LmRhcnQnLAogICAgZ2VuZXJhdGVSZXBvc2l0b3J5VGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSB1c2UgY2FzZQogIGNyZWF0ZUZpbGUoCiAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL3VzZWNhc2VzLyR7ZmVhdHVyZU5hbWV9X3VzZWNhc2UuZGFydCcsCiAgICBnZW5lcmF0ZVVzZUNhc2VUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICBjb250ZXh0CiAgKTsKICAKICAvLyBDcmVhdGUgc2FtcGxlIG1vZGVsCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL21vZGVscy8ke2ZlYXR1cmVOYW1lfV9tb2RlbC5kYXJ0JywKICAgIGdlbmVyYXRlTW9kZWxUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICBjb250ZXh0CiAgKTsKICAKICAvLyBDcmVhdGUgc2FtcGxlIHJlcG9zaXRvcnkgaW1wbGVtZW50YXRpb24KICBjcmVhdGVGaWxlKAogICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RhdGEvcmVwb3NpdG9yaWVzLyR7ZmVhdHVyZU5hbWV9X3JlcG9zaXRvcnlfaW1wbC5kYXJ0JywKICAgIGdlbmVyYXRlUmVwb3NpdG9yeUltcGxUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICBjb250ZXh0CiAgKTsKICAKICAvLyBDcmVhdGUgc2FtcGxlIGRhdGEgc291cmNlCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL2RhdGFzb3VyY2VzLyR7ZmVhdHVyZU5hbWV9X2RhdGFfc291cmNlLmRhcnQnLAogICAgZ2VuZXJhdGVEYXRhU291cmNlVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgY29udGV4dAogICk7CiAgCiAgLy8gQ3JlYXRlIHNhbXBsZSBwYWdlCiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vcGFnZXMvJHtmZWF0dXJlTmFtZX1fcGFnZS5kYXJ0JywKICAgIGdlbmVyYXRlUGFnZVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzYW1wbGUgd2lkZ2V0CiAgY3JlYXRlRmlsZSgKICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vd2lkZ2V0cy8ke2ZlYXR1cmVOYW1lfV93aWRnZXQuZGFydCcsCiAgICBnZW5lcmF0ZVdpZGdldFRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgIGNvbnRleHQKICApOwogIAogIC8vIENyZWF0ZSBzdGF0ZSBtYW5hZ2VtZW50IGZpbGVzCiAgY3JlYXRlU3RhdGVNYW5hZ2VtZW50RmlsZXMoCiAgICBjb250ZXh0LCAKICAgIHByb2plY3ROYW1lLCAKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ByZXNlbnRhdGlvbicsCiAgICBmZWF0dXJlTmFtZSwKICAgIHN0YXRlTWFuYWdlbWVudAogICk7Cn0=",
      "type": "text"
    },
    {
      "path": "lib/state_management_handler.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/utils.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "pre_gen.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCi8vIEltcG9ydCBoZWxwZXIgZmlsZXMKaW1wb3J0ICdsaWIvYXJjaGl0ZWN0dXJlX2hhbmRsZXIuZGFydCc7CmltcG9ydCAnbGliL2ZlYXR1cmVfZ2VuZXJhdG9yLmRhcnQnOwppbXBvcnQgJ2xpYi91dGlscy5kYXJ0JzsKCnZvaWQgcnVuKEhvb2tDb250ZXh0IGNvbnRleHQpIHsKICAvLyBWYWxpZGF0ZSBwcm9qZWN0IG5hbWUKICBmaW5hbCBwcm9qZWN0TmFtZSA9IGNvbnRleHQudmFyc1sncHJvamVjdF9uYW1lJ10gYXMgU3RyaW5nOwogIGZpbmFsIGFyY2hpdGVjdHVyZSA9IGNvbnRleHQudmFyc1snYXJjaGl0ZWN0dXJlJ10gYXMgU3RyaW5nOwogIGZpbmFsIHN0YXRlTWFuYWdlbWVudCA9IGNvbnRleHQudmFyc1snc3RhdGVfbWFuYWdlbWVudCddIGFzIFN0cmluZzsKICB2YXIgZmVhdHVyZXMgPSBjb250ZXh0LnZhcnNbJ2ZlYXR1cmVzJ10gYXMgTGlzdDxkeW5hbWljPjsKICBmaW5hbCBtb2R1bGVzID0gY29udGV4dC52YXJzWydtb2R1bGVzJ10gYXMgTGlzdDxkeW5hbWljPjsKCiAgLy8gVmFsaWRhdGUgcHJvamVjdCBuYW1lCiAgaWYgKCFpc1ZhbGlkUHJvamVjdE5hbWUocHJvamVjdE5hbWUpKSB7CiAgICB0aHJvdyBBcmd1bWVudEVycm9yKAogICAgICAgICdJbnZhbGlkIHByb2plY3QgbmFtZS4gTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIG9yIHVuZGVyc2NvcmUsICcKICAgICAgICAnY29udGFpbiBvbmx5IGxvd2VyY2FzZSBsZXR0ZXJzLCBudW1iZXJzLCBhbmQgdW5kZXJzY29yZXMuJyk7CiAgfQoKICAvLyBNYWtlIEF1dGhlbnRpY2F0aW9uIHRoZSBkZWZhdWx0IGZlYXR1cmUgaWYgbm9uZSBhcmUgc2VsZWN0ZWQKICBpZiAoZmVhdHVyZXMuaXNFbXB0eSkgewogICAgZmVhdHVyZXMgPSBbJ0F1dGhlbnRpY2F0aW9uJ107CiAgICBjb250ZXh0LmxvZ2dlcgogICAgICAgIC5pbmZvKCdObyBmZWF0dXJlcyBzZWxlY3RlZCwgYWRkaW5nIGRlZmF1bHQgZmVhdHVyZTogQXV0aGVudGljYXRpb24nKTsKICB9IGVsc2UgaWYgKCFmZWF0dXJlcy5jb250YWlucygnQXV0aGVudGljYXRpb24nKSkgewogICAgLy8gQWRkIEF1dGhlbnRpY2F0aW9uIGlmIG5vdCBhbHJlYWR5IGluY2x1ZGVkCiAgICBmZWF0dXJlcyA9IFsuLi5mZWF0dXJlc107CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdBZGRpbmcgZGVmYXVsdCBmZWF0dXJlOiBBdXRoZW50aWNhdGlvbicpOwogIH0KCiAgLy8gTG9nIHByb2plY3QgZGV0YWlscwogIGNvbnRleHQubG9nZ2VyLmluZm8oJ0dlbmVyYXRpbmcgcHJvamVjdDogJHByb2plY3ROYW1lJyk7CiAgY29udGV4dC5sb2dnZXIuaW5mbygnQXJjaGl0ZWN0dXJlOiAkYXJjaGl0ZWN0dXJlJyk7CiAgY29udGV4dC5sb2dnZXIuaW5mbygnU3RhdGUgTWFuYWdlbWVudDogJHN0YXRlTWFuYWdlbWVudCcpOwogIGNvbnRleHQubG9nZ2VyLmluZm8oJ0ZlYXR1cmVzOiAkZmVhdHVyZXMnKTsKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdNb2R1bGVzOiAkbW9kdWxlcycpOwoKICAvLyBDcmVhdGUgcHJvamVjdCBzdHJ1Y3R1cmUKICBjcmVhdGVQcm9qZWN0U3RydWN0dXJlKGNvbnRleHQsIHByb2plY3ROYW1lKTsKCiAgLy8gQ3JlYXRlIGFyY2hpdGVjdHVyZS1zcGVjaWZpYyBzdHJ1Y3R1cmUKICBjcmVhdGVBcmNoaXRlY3R1cmVTdHJ1Y3R1cmUoY29udGV4dCwgcHJvamVjdE5hbWUsIGFyY2hpdGVjdHVyZSk7CgogIC8vIENyZWF0ZSBmZWF0dXJlIHN0cnVjdHVyZXMgYmFzZWQgb24gYXJjaGl0ZWN0dXJlIGFuZCBzdGF0ZSBtYW5hZ2VtZW50CiAgY3JlYXRlRmVhdHVyZVN0cnVjdHVyZXMoCiAgICAgIGNvbnRleHQsIHByb2plY3ROYW1lLCBmZWF0dXJlcywgYXJjaGl0ZWN0dXJlLCBzdGF0ZU1hbmFnZW1lbnQpOwoKICAvLyBDcmVhdGUgbW9kdWxlIHN0cnVjdHVyZXMKICBjcmVhdGVNb2R1bGVTdHJ1Y3R1cmVzKGNvbnRleHQsIHByb2plY3ROYW1lLCBtb2R1bGVzLCBhcmNoaXRlY3R1cmUpOwoKICBjb250ZXh0LmxvZ2dlci5zdWNjZXNzKCdQcm9qZWN0IHN0cnVjdHVyZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseSEnKTsKfQoKLy8gTWFpbiBtZXRob2QgcmVxdWlyZWQgZm9yIGtlcm5lbCBjb21waWxhdGlvbgp2b2lkIG1haW4oTGlzdDxTdHJpbmc+IGFyZ3MpIHsKICAvLyBUaGlzIGlzIGEgcGxhY2Vob2xkZXIgbWFpbiBtZXRob2QKICBwcmludCgnTWFzb24gcHJlLWdlbmVyYXRpb24gaG9vaycpOwp9Cgp2b2lkIGNyZWF0ZVByb2plY3RTdHJ1Y3R1cmUoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgZmluYWwgZGlyZWN0b3JpZXMgPSBbCiAgICAnbGliJywKICAgICd0ZXN0JywKICAgICdhc3NldHMnLAogICAgJ2Fzc2V0cy9pbWFnZXMnLAogICAgJ2Fzc2V0cy9mb250cycsCiAgICAnYXNzZXRzL3RyYW5zbGF0aW9ucycsCiAgXTsKCiAgZm9yIChmaW5hbCBkaXIgaW4gZGlyZWN0b3JpZXMpIHsKICAgIGZpbmFsIGRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lLyRkaXInKTsKICAgIGlmICghZGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgICBkaXJlY3RvcnkuY3JlYXRlU3luYyhyZWN1cnNpdmU6IHRydWUpOwogICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIGRpcmVjdG9yeTogJGRpcicpOwogICAgfQogIH0KfQoKdm9pZCBjcmVhdGVNb2R1bGVTdHJ1Y3R1cmVzKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwKICAgIExpc3Q8ZHluYW1pYz4gbW9kdWxlcywgU3RyaW5nIGFyY2hpdGVjdHVyZSkgewogIGZvciAoZmluYWwgbW9kdWxlIGluIG1vZHVsZXMpIHsKICAgIGZpbmFsIG1vZHVsZU5hbWUgPSBtb2R1bGUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2VBbGwoJyAnLCAnXycpOwogICAgU3RyaW5nIGJhc2VEaXI7CgogICAgc3dpdGNoIChhcmNoaXRlY3R1cmUpIHsKICAgICAgY2FzZSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJzoKICAgICAgICBiYXNlRGlyID0gJ2NvcmUnOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdNVlZNJzoKICAgICAgY2FzZSAnTVZDJzoKICAgICAgICBiYXNlRGlyID0gJ3NoYXJlZC9zZXJ2aWNlcyc7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ0ZlYXR1cmUtRHJpdmVuJzoKICAgICAgICBiYXNlRGlyID0gJ3NoYXJlZC9zZXJ2aWNlcyc7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgYmFzZURpciA9ICdzaGFyZWQvc2VydmljZXMnOwogICAgfQoKICAgIGZpbmFsIGRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lL2xpYi8kYmFzZURpci8kbW9kdWxlTmFtZScpOwogICAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgbW9kdWxlIGRpcmVjdG9yeTogbGliLyRiYXNlRGlyLyRtb2R1bGVOYW1lJyk7CgogICAgICAvLyBDcmVhdGUgYSBiYXNlIGZpbGUgZm9yIHRoZSBtb2R1bGUKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAgICckcHJvamVjdE5hbWUvbGliLyRiYXNlRGlyLyRtb2R1bGVOYW1lLyR7bW9kdWxlTmFtZX1fc2VydmljZS5kYXJ0JywKICAgICAgICAgIGdlbmVyYXRlU2VydmljZVRlbXBsYXRlKG1vZHVsZU5hbWUpLAogICAgICAgICAgY29udGV4dCk7CiAgICB9CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZTogZmx1dHRlcl9idW5ueV9jbGkKCmVudmlyb25tZW50OgogIHNkazogIl4zLjYuMCIKCmRlcGVuZGVuY2llczoKICBtYXNvbjogXjAuMS4wCg==",
      "type": "text"
    }
  ],
  "name": "bunny_cli_template",
  "description": "A generator for flutter bunny cli.",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0"},
  "readme": {
    "path": "README.md",
    "data":
        "IyBidW5ueV90ZW1wbGF0ZQoKWyFbUG93ZXJlZCBieSBNYXNvbl0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9lbmRwb2ludD91cmw9aHR0cHMlM0ElMkYlMkZ0aW55dXJsLmNvbSUyRm1hc29uLWJhZGdlKV0oaHR0cHM6Ly9naXRodWIuY29tL2ZlbGFuZ2VsL21hc29uKQoKQSBuZXcgYnJpY2sgY3JlYXRlZCB3aXRoIHRoZSBNYXNvbiBDTEkuCgpfR2VuZXJhdGVkIGJ5IFttYXNvbl1bMV0g8J+nsV8KCiMjIEdldHRpbmcgU3RhcnRlZCDwn5qACgpUaGlzIGlzIGEgc3RhcnRpbmcgcG9pbnQgZm9yIGEgbmV3IGJyaWNrLgpBIGZldyByZXNvdXJjZXMgdG8gZ2V0IHlvdSBzdGFydGVkIGlmIHRoaXMgaXMgeW91ciBmaXJzdCBicmljayB0ZW1wbGF0ZToKCi0gW09mZmljaWFsIE1hc29uIERvY3VtZW50YXRpb25dWzJdCi0gW0NvZGUgZ2VuZXJhdGlvbiB3aXRoIE1hc29uIEJsb2ddWzNdCi0gW1ZlcnkgR29vZCBMaXZlc3RyZWFtOiBGZWxpeCBBbmdlbG92IERlbW9zIE1hc29uXVs0XQotIFtGbHV0dGVyIFBhY2thZ2Ugb2YgdGhlIFdlZWs6IE1hc29uXVs1XQotIFtPYnNlcnZhYmxlIEZsdXR0ZXI6IEJ1aWxkaW5nIGEgTWFzb24gYnJpY2tdWzZdCi0gW01lZXQgTWFzb246IEZsdXR0ZXIgVmlraW5ncyAyMDIyXVs3XQoKWzFdOiBodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24KWzJdOiBodHRwczovL2RvY3MuYnJpY2todWIuZGV2ClszXTogaHR0cHM6Ly92ZXJ5Z29vZC52ZW50dXJlcy9ibG9nL2NvZGUtZ2VuZXJhdGlvbi13aXRoLW1hc29uCls0XTogaHR0cHM6Ly95b3V0dS5iZS9HNFBUakE2dHBUVQpbNV06IGh0dHBzOi8veW91dHUuYmUvcWpBMEpGaVBNblEKWzZdOiBodHRwczovL3lvdXR1LmJlL284QjFFZmNVaXN3Cls3XTogaHR0cHM6Ly95b3V0dS5iZS9MWGhnaUY1SGlRZwo=",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMCsxCgotIFRPRE86IERlc2NyaWJlIGluaXRpYWwgcmVsZWFzZS4K",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
    "type": "text"
  },
  "vars": {
    "project_name": {
      "type": "string",
      "description": "The project or app name",
      "default": "flutter_bunny",
      "prompt": "What is the project name?"
    },
    "bundle_identifier": {
      "type": "string",
      "description": "The organization name",
      "default": "com.example",
      "prompt": "What is the organization name?"
    },
    "architecture": {
      "type": "enum",
      "description": "The architecture pattern to use",
      "default": "Clean Architecture",
      "values": ["Clean Architecture", "MVVM", "MVC", "Feature-Driven"]
    },
    "state_management": {
      "type": "enum",
      "description": "The state management solution to use",
      "default": "Provider",
      "values": ["Provider", "Riverpod", "Bloc", "GetX", "MobX", "Redux"]
    },
    "features": {
      "type": "list",
      "description": "Features to include in the application",
      "defaults": ["Authentication"],
      "values": [
        "Authentication",
        "User Profile",
        "Settings",
        "Dashboard",
        "Products",
        "Shopping Cart"
      ]
    },
    "modules": {
      "type": "list",
      "description": "Additional modules to include",
      "defaults": ["Network Layer"],
      "values": [
        "Network Layer",
        "Local Storage",
        "Analytics",
        "Push Notifications",
        "Theme Manager"
      ]
    }
  }
});
