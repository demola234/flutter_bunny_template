// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final bunnyCliTemplateBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "{{project_name.snakeCase()}}/.env",
      "data": "QVBQX05BTUUgPSB7e3Byb2plY3RfbmFtZS50b1NlbnRlbmNlQ2FzZSgpfX0=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/.github/dependabot.yaml",
      "data":
          "dmVyc2lvbjogMgp1cGRhdGVzOgogIC0gcGFja2FnZS1lY29zeXN0ZW06ICJnaXRodWItYWN0aW9ucyIKICAgIGRpcmVjdG9yeTogIi8iCiAgICBzY2hlZHVsZToKICAgICAgaW50ZXJ2YWw6ICJkYWlseSIKICAtIHBhY2thZ2UtZWNvc3lzdGVtOiAicHViIgogICAgZGlyZWN0b3J5OiAiLyIKICAgIHNjaGVkdWxlOgogICAgICBpbnRlcnZhbDogImRhaWx5Ig==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/.github/workflows/ci.yml",
      "data":
          "bmFtZTogUGlwZUxpbmUKCm9uOgogIHB1c2g6CiAgICBicmFuY2hlczogW21haW5dCiAgcHVsbF9yZXF1ZXN0OgogICAgYnJhbmNoZXM6IFttYWluXQoKam9iczoKICB0ZXN0OgogICAgbmFtZTogdW5pdC10ZXN0CiAgICBydW5zLW9uOiB1YnVudHUtbGF0ZXN0CiAgICBwZXJtaXNzaW9uczoKICAgICAgY29udGVudHM6IHdyaXRlCiAgICBzdGVwczoKICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYyCiAgICAgIC0gdXNlczogYWN0aW9ucy9zZXR1cC1qYXZhQHYxCiAgICAgICAgd2l0aDoKICAgICAgICAgIGphdmEtdmVyc2lvbjogIjEyLngiCiAgICAgIC0gdXNlczogc3Vib3NpdG8vZmx1dHRlci1hY3Rpb25AdjEuNS4zCiAgICAgICAgd2l0aDoKICAgICAgICAgIGZsdXR0ZXJfY2hhbm5lbDogc3RhYmxlCiAgICAgICAgICBmbHV0dGVyX3ZlcnNpb246IDMuNC4wCiAgICAgIC0gbmFtZTogSW5zdGFsbCBkZXBlbmRlbmNpZXMKICAgICAgICBydW46IGZsdXR0ZXIgcHViIGdldAogICAgICAtIG5hbWU6IEJ1aWxkIEFQSwogICAgICAgIHJ1bjogZmx1dHRlciBidWlsZCBhcGsgLS1yZWxlYXNlIC0tc3BsaXQtZGVidWctaW5mbz1kZWJ1Zy1pbmZvCg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/.gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGQvCi5idWlsZGxvZy8KLmhpc3RvcnkKLnN2bi8KLnN3aWZ0cG0vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCioqL2RvYy9hcGkvCioqL2lvcy9GbHV0dGVyLy5sYXN0X2J1aWxkX2lkCi5kYXJ0X3Rvb2wvCi5mbHV0dGVyLXBsdWdpbnMKLmZsdXR0ZXItcGx1Z2lucy1kZXBlbmRlbmNpZXMKLnB1Yi1jYWNoZS8KLnB1Yi8KL2J1aWxkLwoKIyBTeW1ib2xpY2F0aW9uIHJlbGF0ZWQKYXBwLiouc3ltYm9scwoKIyBPYmZ1c2NhdGlvbiByZWxhdGVkCmFwcC4qLm1hcC5qc29uCgojIEFuZHJvaWQgU3R1ZGlvIHdpbGwgcGxhY2UgYnVpbGQgYXJ0aWZhY3RzIGhlcmUKL2FuZHJvaWQvYXBwL2RlYnVnCi9hbmRyb2lkL2FwcC9wcm9maWxlCi9hbmRyb2lkL2FwcC9yZWxlYXNlCg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/.metadata",
      "data":
          "IyBUaGlzIGZpbGUgdHJhY2tzIHByb3BlcnRpZXMgb2YgdGhpcyBGbHV0dGVyIHByb2plY3QuCiMgVXNlZCBieSBGbHV0dGVyIHRvb2wgdG8gYXNzZXNzIGNhcGFiaWxpdGllcyBhbmQgcGVyZm9ybSB1cGdyYWRlcyBldGMuCiMKIyBUaGlzIGZpbGUgc2hvdWxkIGJlIHZlcnNpb24gY29udHJvbGxlZCBhbmQgc2hvdWxkIG5vdCBiZSBtYW51YWxseSBlZGl0ZWQuCgp2ZXJzaW9uOgogIHJldmlzaW9uOiAiMzVjMzg4YWZiNTdlZjA2MWQwNmEzOWI1MzczMzZjODdlMGUzZDFiMSIKICBjaGFubmVsOiAic3RhYmxlIgoKcHJvamVjdF90eXBlOiBhcHAKCiMgVHJhY2tzIG1ldGFkYXRhIGZvciB0aGUgZmx1dHRlciBtaWdyYXRlIGNvbW1hbmQKbWlncmF0aW9uOgogIHBsYXRmb3JtczoKICAgIC0gcGxhdGZvcm06IHJvb3QKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IGFuZHJvaWQKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IGlvcwogICAgICBjcmVhdGVfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgICAgYmFzZV9yZXZpc2lvbjogMzVjMzg4YWZiNTdlZjA2MWQwNmEzOWI1MzczMzZjODdlMGUzZDFiMQogICAgLSBwbGF0Zm9ybTogbGludXgKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IG1hY29zCiAgICAgIGNyZWF0ZV9yZXZpc2lvbjogMzVjMzg4YWZiNTdlZjA2MWQwNmEzOWI1MzczMzZjODdlMGUzZDFiMQogICAgICBiYXNlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAtIHBsYXRmb3JtOiB3ZWIKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IHdpbmRvd3MKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKCiAgIyBVc2VyIHByb3ZpZGVkIHNlY3Rpb24KCiAgIyBMaXN0IG9mIExvY2FsIHBhdGhzIChyZWxhdGl2ZSB0byB0aGlzIGZpbGUpIHRoYXQgc2hvdWxkIGJlCiAgIyBpZ25vcmVkIGJ5IHRoZSBtaWdyYXRlIHRvb2wuCiAgIwogICMgRmlsZXMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHRlbXBsYXRlcyB3aWxsIGJlIGlnbm9yZWQgYnkgZGVmYXVsdC4KICB1bm1hbmFnZWRfZmlsZXM6CiAgICAtICdsaWIvbWFpbi5kYXJ0JwogICAgLSAnaW9zL1J1bm5lci54Y29kZXByb2ovcHJvamVjdC5wYnhwcm9qJwo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/analysis_options.yaml",
      "data": "",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/.gitignore",
      "data":
          "Z3JhZGxlLXdyYXBwZXIuamFyCi8uZ3JhZGxlCi9jYXB0dXJlcy8KL2dyYWRsZXcKL2dyYWRsZXcuYmF0Ci9sb2NhbC5wcm9wZXJ0aWVzCkdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQuamF2YQoKIyBSZW1lbWJlciB0byBuZXZlciBwdWJsaWNseSBzaGFyZSB5b3VyIGtleXN0b3JlLgojIFNlZSBodHRwczovL2ZsdXR0ZXIuZGV2L3RvL3JlZmVyZW5jZS1rZXlzdG9yZQprZXkucHJvcGVydGllcwoqKi8qLmtleXN0b3JlCioqLyouamtzCg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/app/build.gradle",
      "data":
          "cGx1Z2lucyB7CiAgICBpZCAiY29tLmFuZHJvaWQuYXBwbGljYXRpb24iCiAgICBpZCAia290bGluLWFuZHJvaWQiCiAgICAvLyBUaGUgRmx1dHRlciBHcmFkbGUgUGx1Z2luIG11c3QgYmUgYXBwbGllZCBhZnRlciB0aGUgQW5kcm9pZCBhbmQgS290bGluIEdyYWRsZSBwbHVnaW5zLgogICAgaWQgImRldi5mbHV0dGVyLmZsdXR0ZXItZ3JhZGxlLXBsdWdpbiIKfQoKYW5kcm9pZCB7CiAgICBuYW1lc3BhY2UgPSAie3thcHBsaWNhdGlvbl9pZF9hbmRyb2lkfX0iCiAgICBjb21waWxlU2RrID0gZmx1dHRlci5jb21waWxlU2RrVmVyc2lvbgogICAgbmRrVmVyc2lvbiA9IGZsdXR0ZXIubmRrVmVyc2lvbgoKICAgIGNvbXBpbGVPcHRpb25zIHsKICAgICAgICBzb3VyY2VDb21wYXRpYmlsaXR5ID0gSmF2YVZlcnNpb24uVkVSU0lPTl8xXzgKICAgICAgICB0YXJnZXRDb21wYXRpYmlsaXR5ID0gSmF2YVZlcnNpb24uVkVSU0lPTl8xXzgKICAgIH0KCiAgICBrb3RsaW5PcHRpb25zIHsKICAgICAgICBqdm1UYXJnZXQgPSBKYXZhVmVyc2lvbi5WRVJTSU9OXzFfOAogICAgfQoKICAgIGRlZmF1bHRDb25maWcgewogICAgICAgIC8vIFRPRE86IFNwZWNpZnkgeW91ciBvd24gdW5pcXVlIEFwcGxpY2F0aW9uIElEIChodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9zdHVkaW8vYnVpbGQvYXBwbGljYXRpb24taWQuaHRtbCkuCiAgICAgICAgIGFwcGxpY2F0aW9uSWQgInt7YXBwbGljYXRpb25faWRfYW5kcm9pZH19IgogICAgICAgIC8vIFlvdSBjYW4gdXBkYXRlIHRoZSBmb2xsb3dpbmcgdmFsdWVzIHRvIG1hdGNoIHlvdXIgYXBwbGljYXRpb24gbmVlZHMuCiAgICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9mbHV0dGVyLmRldi90by9yZXZpZXctZ3JhZGxlLWNvbmZpZy4KICAgICAgICBtaW5TZGsgPSBmbHV0dGVyLm1pblNka1ZlcnNpb24KICAgICAgICB0YXJnZXRTZGsgPSBmbHV0dGVyLnRhcmdldFNka1ZlcnNpb24KICAgICAgICB2ZXJzaW9uQ29kZSA9IGZsdXR0ZXIudmVyc2lvbkNvZGUKICAgICAgICB2ZXJzaW9uTmFtZSA9IGZsdXR0ZXIudmVyc2lvbk5hbWUKICAgIH0KCiAgICBidWlsZFR5cGVzIHsKICAgICAgICByZWxlYXNlIHsKICAgICAgICAgICAgLy8gVE9ETzogQWRkIHlvdXIgb3duIHNpZ25pbmcgY29uZmlnIGZvciB0aGUgcmVsZWFzZSBidWlsZC4KICAgICAgICAgICAgLy8gU2lnbmluZyB3aXRoIHRoZSBkZWJ1ZyBrZXlzIGZvciBub3csIHNvIGBmbHV0dGVyIHJ1biAtLXJlbGVhc2VgIHdvcmtzLgogICAgICAgICAgICBzaWduaW5nQ29uZmlnID0gc2lnbmluZ0NvbmZpZ3MuZGVidWcKICAgICAgICB9CiAgICB9Cn0KCmZsdXR0ZXIgewogICAgc291cmNlID0gIi4uLy4uIgp9Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/debug/AndroidManifest.xml",
      "data":
          "PG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8IS0tIFRoZSBJTlRFUk5FVCBwZXJtaXNzaW9uIGlzIHJlcXVpcmVkIGZvciBkZXZlbG9wbWVudC4gU3BlY2lmaWNhbGx5LAogICAgICAgICB0aGUgRmx1dHRlciB0b29sIG5lZWRzIGl0IHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHJ1bm5pbmcgYXBwbGljYXRpb24KICAgICAgICAgdG8gYWxsb3cgc2V0dGluZyBicmVha3BvaW50cywgdG8gcHJvdmlkZSBob3QgcmVsb2FkLCBldGMuCiAgICAtLT4KICAgIDx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPSJhbmRyb2lkLnBlcm1pc3Npb24uSU5URVJORVQiLz4KPC9tYW5pZmVzdD4K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/AndroidManifest.xml",
      "data":
          "PG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8YXBwbGljYXRpb24KICAgICAgICBhbmRyb2lkOmxhYmVsPXt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19CiAgICAgICAgYW5kcm9pZDpuYW1lPSIke3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19CiAgICAgICAgYW5kcm9pZDppY29uPSJAbWlwbWFwL2ljX2xhdW5jaGVyIj4KICAgICAgICA8YWN0aXZpdHkKICAgICAgICAgICAgYW5kcm9pZDpuYW1lPSIuTWFpbkFjdGl2aXR5IgogICAgICAgICAgICBhbmRyb2lkOmV4cG9ydGVkPSJ0cnVlIgogICAgICAgICAgICBhbmRyb2lkOmxhdW5jaE1vZGU9InNpbmdsZVRvcCIKICAgICAgICAgICAgYW5kcm9pZDp0YXNrQWZmaW5pdHk9IiIKICAgICAgICAgICAgYW5kcm9pZDp0aGVtZT0iQHN0eWxlL0xhdW5jaFRoZW1lIgogICAgICAgICAgICBhbmRyb2lkOmNvbmZpZ0NoYW5nZXM9Im9yaWVudGF0aW9ufGtleWJvYXJkSGlkZGVufGtleWJvYXJkfHNjcmVlblNpemV8c21hbGxlc3RTY3JlZW5TaXplfGxvY2FsZXxsYXlvdXREaXJlY3Rpb258Zm9udFNjYWxlfHNjcmVlbkxheW91dHxkZW5zaXR5fHVpTW9kZSIKICAgICAgICAgICAgYW5kcm9pZDpoYXJkd2FyZUFjY2VsZXJhdGVkPSJ0cnVlIgogICAgICAgICAgICBhbmRyb2lkOndpbmRvd1NvZnRJbnB1dE1vZGU9ImFkanVzdFJlc2l6ZSI+CiAgICAgICAgICAgIDwhLS0gU3BlY2lmaWVzIGFuIEFuZHJvaWQgdGhlbWUgdG8gYXBwbHkgdG8gdGhpcyBBY3Rpdml0eSBhcyBzb29uIGFzCiAgICAgICAgICAgICAgICAgdGhlIEFuZHJvaWQgcHJvY2VzcyBoYXMgc3RhcnRlZC4gVGhpcyB0aGVtZSBpcyB2aXNpYmxlIHRvIHRoZSB1c2VyCiAgICAgICAgICAgICAgICAgd2hpbGUgdGhlIEZsdXR0ZXIgVUkgaW5pdGlhbGl6ZXMuIEFmdGVyIHRoYXQsIHRoaXMgdGhlbWUgY29udGludWVzCiAgICAgICAgICAgICAgICAgdG8gZGV0ZXJtaW5lIHRoZSBXaW5kb3cgYmFja2dyb3VuZCBiZWhpbmQgdGhlIEZsdXR0ZXIgVUkuIC0tPgogICAgICAgICAgICA8bWV0YS1kYXRhCiAgICAgICAgICAgICAgYW5kcm9pZDpuYW1lPSJpby5mbHV0dGVyLmVtYmVkZGluZy5hbmRyb2lkLk5vcm1hbFRoZW1lIgogICAgICAgICAgICAgIGFuZHJvaWQ6cmVzb3VyY2U9IkBzdHlsZS9Ob3JtYWxUaGVtZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8aW50ZW50LWZpbHRlcj4KICAgICAgICAgICAgICAgIDxhY3Rpb24gYW5kcm9pZDpuYW1lPSJhbmRyb2lkLmludGVudC5hY3Rpb24uTUFJTiIvPgogICAgICAgICAgICAgICAgPGNhdGVnb3J5IGFuZHJvaWQ6bmFtZT0iYW5kcm9pZC5pbnRlbnQuY2F0ZWdvcnkuTEFVTkNIRVIiLz4KICAgICAgICAgICAgPC9pbnRlbnQtZmlsdGVyPgogICAgICAgIDwvYWN0aXZpdHk+CiAgICAgICAgPCEtLSBEb24ndCBkZWxldGUgdGhlIG1ldGEtZGF0YSBiZWxvdy4KICAgICAgICAgICAgIFRoaXMgaXMgdXNlZCBieSB0aGUgRmx1dHRlciB0b29sIHRvIGdlbmVyYXRlIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQuamF2YSAtLT4KICAgICAgICA8bWV0YS1kYXRhCiAgICAgICAgICAgIGFuZHJvaWQ6bmFtZT0iZmx1dHRlckVtYmVkZGluZyIKICAgICAgICAgICAgYW5kcm9pZDp2YWx1ZT0iMiIgLz4KICAgIDwvYXBwbGljYXRpb24+CiAgICA8IS0tIFJlcXVpcmVkIHRvIHF1ZXJ5IGFjdGl2aXRpZXMgdGhhdCBjYW4gcHJvY2VzcyB0ZXh0LCBzZWU6CiAgICAgICAgIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3RyYWluaW5nL3BhY2thZ2UtdmlzaWJpbGl0eSBhbmQKICAgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQjQUNUSU9OX1BST0NFU1NfVEVYVC4KCiAgICAgICAgIEluIHBhcnRpY3VsYXIsIHRoaXMgaXMgdXNlZCBieSB0aGUgRmx1dHRlciBlbmdpbmUgaW4gaW8uZmx1dHRlci5wbHVnaW4udGV4dC5Qcm9jZXNzVGV4dFBsdWdpbi4gLS0+CiAgICA8cXVlcmllcz4KICAgICAgICA8aW50ZW50PgogICAgICAgICAgICA8YWN0aW9uIGFuZHJvaWQ6bmFtZT0iYW5kcm9pZC5pbnRlbnQuYWN0aW9uLlBST0NFU1NfVEVYVCIvPgogICAgICAgICAgICA8ZGF0YSBhbmRyb2lkOm1pbWVUeXBlPSJ0ZXh0L3BsYWluIi8+CiAgICAgICAgPC9pbnRlbnQ+CiAgICA8L3F1ZXJpZXM+CjwvbWFuaWZlc3Q+Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java",
      "data":
          "cGFja2FnZSBpby5mbHV0dGVyLnBsdWdpbnM7CgppbXBvcnQgYW5kcm9pZHguYW5ub3RhdGlvbi5LZWVwOwppbXBvcnQgYW5kcm9pZHguYW5ub3RhdGlvbi5Ob25OdWxsOwppbXBvcnQgaW8uZmx1dHRlci5Mb2c7CgppbXBvcnQgaW8uZmx1dHRlci5lbWJlZGRpbmcuZW5naW5lLkZsdXR0ZXJFbmdpbmU7CgovKioKICogR2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0LgogKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBGbHV0dGVyIHRvb2wgYmFzZWQgb24gdGhlCiAqIHBsdWdpbnMgdGhhdCBzdXBwb3J0IHRoZSBBbmRyb2lkIHBsYXRmb3JtLgogKi8KQEtlZXAKcHVibGljIGZpbmFsIGNsYXNzIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQgewogIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBUQUcgPSAiR2VuZXJhdGVkUGx1Z2luUmVnaXN0cmFudCI7CiAgcHVibGljIHN0YXRpYyB2b2lkIHJlZ2lzdGVyV2l0aChATm9uTnVsbCBGbHV0dGVyRW5naW5lIGZsdXR0ZXJFbmdpbmUpIHsKICAgIHRyeSB7CiAgICAgIGZsdXR0ZXJFbmdpbmUuZ2V0UGx1Z2lucygpLmFkZChuZXcgZGV2LmZsdXR0ZXJjb21tdW5pdHkucGx1cy5jb25uZWN0aXZpdHkuQ29ubmVjdGl2aXR5UGx1Z2luKCkpOwogICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKICAgICAgTG9nLmUoVEFHLCAiRXJyb3IgcmVnaXN0ZXJpbmcgcGx1Z2luIGNvbm5lY3Rpdml0eV9wbHVzLCBkZXYuZmx1dHRlcmNvbW11bml0eS5wbHVzLmNvbm5lY3Rpdml0eS5Db25uZWN0aXZpdHlQbHVnaW4iLCBlKTsKICAgIH0KICAgIHRyeSB7CiAgICAgIGZsdXR0ZXJFbmdpbmUuZ2V0UGx1Z2lucygpLmFkZChuZXcgaW8uZmx1dHRlci5wbHVnaW5zLmZsdXR0ZXJfcGx1Z2luX2FuZHJvaWRfbGlmZWN5Y2xlLkZsdXR0ZXJBbmRyb2lkTGlmZWN5Y2xlUGx1Z2luKCkpOwogICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKICAgICAgTG9nLmUoVEFHLCAiRXJyb3IgcmVnaXN0ZXJpbmcgcGx1Z2luIGZsdXR0ZXJfcGx1Z2luX2FuZHJvaWRfbGlmZWN5Y2xlLCBpby5mbHV0dGVyLnBsdWdpbnMuZmx1dHRlcl9wbHVnaW5fYW5kcm9pZF9saWZlY3ljbGUuRmx1dHRlckFuZHJvaWRMaWZlY3ljbGVQbHVnaW4iLCBlKTsKICAgIH0KICAgIHRyeSB7CiAgICAgIGZsdXR0ZXJFbmdpbmUuZ2V0UGx1Z2lucygpLmFkZChuZXcgY29tLml0X25vbWFkcy5mbHV0dGVyc2VjdXJlc3RvcmFnZS5GbHV0dGVyU2VjdXJlU3RvcmFnZVBsdWdpbigpKTsKICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CiAgICAgIExvZy5lKFRBRywgIkVycm9yIHJlZ2lzdGVyaW5nIHBsdWdpbiBmbHV0dGVyX3NlY3VyZV9zdG9yYWdlLCBjb20uaXRfbm9tYWRzLmZsdXR0ZXJzZWN1cmVzdG9yYWdlLkZsdXR0ZXJTZWN1cmVTdG9yYWdlUGx1Z2luIiwgZSk7CiAgICB9CiAgICB0cnkgewogICAgICBmbHV0dGVyRW5naW5lLmdldFBsdWdpbnMoKS5hZGQobmV3IHZuLmh1bmdoZC5mbHV0dGVyLnBsdWdpbnMuaW1hZ2Vjcm9wcGVyLkltYWdlQ3JvcHBlclBsdWdpbigpKTsKICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CiAgICAgIExvZy5lKFRBRywgIkVycm9yIHJlZ2lzdGVyaW5nIHBsdWdpbiBpbWFnZV9jcm9wcGVyLCB2bi5odW5naGQuZmx1dHRlci5wbHVnaW5zLmltYWdlY3JvcHBlci5JbWFnZUNyb3BwZXJQbHVnaW4iLCBlKTsKICAgIH0KICAgIHRyeSB7CiAgICAgIGZsdXR0ZXJFbmdpbmUuZ2V0UGx1Z2lucygpLmFkZChuZXcgaW8uZmx1dHRlci5wbHVnaW5zLmltYWdlcGlja2VyLkltYWdlUGlja2VyUGx1Z2luKCkpOwogICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKICAgICAgTG9nLmUoVEFHLCAiRXJyb3IgcmVnaXN0ZXJpbmcgcGx1Z2luIGltYWdlX3BpY2tlcl9hbmRyb2lkLCBpby5mbHV0dGVyLnBsdWdpbnMuaW1hZ2VwaWNrZXIuSW1hZ2VQaWNrZXJQbHVnaW4iLCBlKTsKICAgIH0KICAgIHRyeSB7CiAgICAgIGZsdXR0ZXJFbmdpbmUuZ2V0UGx1Z2lucygpLmFkZChuZXcgaW8uZmx1dHRlci5wbHVnaW5zLnBhdGhwcm92aWRlci5QYXRoUHJvdmlkZXJQbHVnaW4oKSk7CiAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgewogICAgICBMb2cuZShUQUcsICJFcnJvciByZWdpc3RlcmluZyBwbHVnaW4gcGF0aF9wcm92aWRlcl9hbmRyb2lkLCBpby5mbHV0dGVyLnBsdWdpbnMucGF0aHByb3ZpZGVyLlBhdGhQcm92aWRlclBsdWdpbiIsIGUpOwogICAgfQogICAgdHJ5IHsKICAgICAgZmx1dHRlckVuZ2luZS5nZXRQbHVnaW5zKCkuYWRkKG5ldyBpby5mbHV0dGVyLnBsdWdpbnMuc2hhcmVkcHJlZmVyZW5jZXMuU2hhcmVkUHJlZmVyZW5jZXNQbHVnaW4oKSk7CiAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgewogICAgICBMb2cuZShUQUcsICJFcnJvciByZWdpc3RlcmluZyBwbHVnaW4gc2hhcmVkX3ByZWZlcmVuY2VzX2FuZHJvaWQsIGlvLmZsdXR0ZXIucGx1Z2lucy5zaGFyZWRwcmVmZXJlbmNlcy5TaGFyZWRQcmVmZXJlbmNlc1BsdWdpbiIsIGUpOwogICAgfQogICAgdHJ5IHsKICAgICAgZmx1dHRlckVuZ2luZS5nZXRQbHVnaW5zKCkuYWRkKG5ldyBjb20udGVrYXJ0aWsuc3FmbGl0ZS5TcWZsaXRlUGx1Z2luKCkpOwogICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKICAgICAgTG9nLmUoVEFHLCAiRXJyb3IgcmVnaXN0ZXJpbmcgcGx1Z2luIHNxZmxpdGVfYW5kcm9pZCwgY29tLnRla2FydGlrLnNxZmxpdGUuU3FmbGl0ZVBsdWdpbiIsIGUpOwogICAgfQogICAgdHJ5IHsKICAgICAgZmx1dHRlckVuZ2luZS5nZXRQbHVnaW5zKCkuYWRkKG5ldyBpby5mbHV0dGVyLnBsdWdpbnMudXJsbGF1bmNoZXIuVXJsTGF1bmNoZXJQbHVnaW4oKSk7CiAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgewogICAgICBMb2cuZShUQUcsICJFcnJvciByZWdpc3RlcmluZyBwbHVnaW4gdXJsX2xhdW5jaGVyX2FuZHJvaWQsIGlvLmZsdXR0ZXIucGx1Z2lucy51cmxsYXVuY2hlci5VcmxMYXVuY2hlclBsdWdpbiIsIGUpOwogICAgfQogIH0KfQo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/kotlin/com/example/{{application_id_android}}/MainActivity.kt",
      "data":
          "cGFja2FnZSB7e2FwcGxpY2F0aW9uX2lkX2FuZHJvaWR9fQoKaW1wb3J0IGlvLmZsdXR0ZXIuZW1iZWRkaW5nLmFuZHJvaWQuRmx1dHRlckFjdGl2aXR5CgpjbGFzcyBNYWluQWN0aXZpdHk6IEZsdXR0ZXJBY3Rpdml0eSgpCg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/drawable-v21/launch_background.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBNb2RpZnkgdGhpcyBmaWxlIHRvIGN1c3RvbWl6ZSB5b3VyIGxhdW5jaCBzcGxhc2ggc2NyZWVuIC0tPgo8bGF5ZXItbGlzdCB4bWxuczphbmRyb2lkPSJodHRwOi8vc2NoZW1hcy5hbmRyb2lkLmNvbS9hcGsvcmVzL2FuZHJvaWQiPgogICAgPGl0ZW0gYW5kcm9pZDpkcmF3YWJsZT0iP2FuZHJvaWQ6Y29sb3JCYWNrZ3JvdW5kIiAvPgoKICAgIDwhLS0gWW91IGNhbiBpbnNlcnQgeW91ciBvd24gaW1hZ2UgYXNzZXRzIGhlcmUgLS0+CiAgICA8IS0tIDxpdGVtPgogICAgICAgIDxiaXRtYXAKICAgICAgICAgICAgYW5kcm9pZDpncmF2aXR5PSJjZW50ZXIiCiAgICAgICAgICAgIGFuZHJvaWQ6c3JjPSJAbWlwbWFwL2xhdW5jaF9pbWFnZSIgLz4KICAgIDwvaXRlbT4gLS0+CjwvbGF5ZXItbGlzdD4K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/drawable/launch_background.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBNb2RpZnkgdGhpcyBmaWxlIHRvIGN1c3RvbWl6ZSB5b3VyIGxhdW5jaCBzcGxhc2ggc2NyZWVuIC0tPgo8bGF5ZXItbGlzdCB4bWxuczphbmRyb2lkPSJodHRwOi8vc2NoZW1hcy5hbmRyb2lkLmNvbS9hcGsvcmVzL2FuZHJvaWQiPgogICAgPGl0ZW0gYW5kcm9pZDpkcmF3YWJsZT0iQGFuZHJvaWQ6Y29sb3Ivd2hpdGUiIC8+CgogICAgPCEtLSBZb3UgY2FuIGluc2VydCB5b3VyIG93biBpbWFnZSBhc3NldHMgaGVyZSAtLT4KICAgIDwhLS0gPGl0ZW0+CiAgICAgICAgPGJpdG1hcAogICAgICAgICAgICBhbmRyb2lkOmdyYXZpdHk9ImNlbnRlciIKICAgICAgICAgICAgYW5kcm9pZDpzcmM9IkBtaXBtYXAvbGF1bmNoX2ltYWdlIiAvPgogICAgPC9pdGVtPiAtLT4KPC9sYXllci1saXN0Pgo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-hdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAMAAABiM0N1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAK5QTFRFAAAAAU6KAVebKbb2VMX4Kbb2VMX4AVaaAVebKbb2RsD3VMX4VMX4AVaZAVebGHalKbb2VMX4Pa7jADJZADhkAStLATBTAT5uAT5vAUd/AUmCAUyHAU6KAU6LAU6MAVGRAVKSAVKTAVOUAVWXAVWYAVaYAVaaAVeaAVebAjtnAkBwAkN2AkmAA02GA0+KA1CLFmiQF2+ZGXimGn6wG4O2G4a6HIe8Kbb2RL/3VMX47aEaPQAAABN0Uk5TABAQEBBQUGBgYGBggM/Pz8/P3xkQ5PoAAADpSURBVFjD7czXDoJAEEBRVOy9YO+KjB0r+v8/ZoQIC0sizq4PxrmvNzmKQklMrd758uSQQw455JBDDjnvnFSBL4Vw8iGzqn7TCYUwTpiEc3gJ6wQlvOOXXCf3ucNKrpO1bp87nsQ4FidFcF6SzwlKkRxHCjh+KaLzlDiHlSI7TJ7jSaLOSxJ3HEmG85QwTtLiqyEcJVHhnOs+rciQLjsdMhKk83ZmgATptBnrCxCXjuvB1IYEpcOyM5zMbEhIMpvtTn+sAwhKplZv9aYGgKBkao3uHNhwUnk1gmAoKVYEkCPFSyT9qvSvPQCNJCMEO265wAAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-mdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAMAAABg3Am1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAIpQTFRFAAAAAVebVMX4Kbb2VMX4AVebKbb2VMX4VMX4Kbb2VMX4VMX4VMX4AVebB1ePVMX4AVebBENyKbb2UcT4VMX4ADxrAUJ1AU2KAU6LAVSVAVSWAVWXAVaZAVaaAVeaAVebAy1LAzFRBUJuBU2ABlOJHom6H43AIZXLIprSIpzVKbb2Mbn2UcT4VMX4UU+PBQAAABV0Uk5TABAQICAwMDCPn5+vv8/Pz+/v7+/vb7KPEwAAAKVJREFUSMft1MkSgjAQRdGIA86igoKirSIOiP//ew6J3WwMnYULU3nL1LnVuwhh9/zwTpt4zjvv/G99d0gbePW+X3kJfd0Bjq8WPE8F138K6Xu3stbLQvmiwOK7fxXosdB5IVrkVaH3csq/CyP/LOYM35xRcB03GJ92B4vLMR2ZFOcs2YJBcTrEqw3wi3y/WK4B2EW+i+IUgF9ME8CxinYAVhR/sgfbkVbaxFzJpwAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-xhdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAPZQTFRFAAAAVMX4Kbb2AUiAAVebKbb2VMX4VMX4AVebVMX4DVmPVMX4VMX4Kbb2R8H3VMX4VMX4AVOUAVebFmyWKbb2VMX4AC1PAC5SAC9UADBUAD5uASlGASpKATZeATdiAThkATtpAT9wAUByAUF0AUV7AUZ9AUd+AUd/AUh/AUmDAUqEAUyHAUyIAU2IAU2JAU6KAU+OAVCPAVKRAVKTAVOTAVOUAVSVAVWXAVaYAVaZAVaaAVeaAVebAjNYAjplAj9uAkN2Akd7A0l+A0qBA0uCFmiPF2uUGHKeGXinGn2uGoGzG4O2G4W4G4a6HYrAKbb2RL/3VMX4cbCtoAAAABZ0Uk5TABAgMDAwMFBgYHBwgJ+fn8/v7+/v77sEZREAAAFPSURBVGje7dnXTsNAEIXhQCih92p6bwFMYoLjpWMSauD9XwbLRJbX3olkawYJOOd69X+a6y0UsN+6vplPcgPoo48++uijjz766KOPPvroo//f+kPD5Po5+mP0u/Guv9vvBLD0OwhMfVJg6xMCY98osPYNAnM/JWj9UYZ+QtD6I60Phr4mJPotSsjUjwmpPiFk7EeCoW8UMvfbgrFvEHL0Q4Hop4Rc/UAg+wkhZ1+f3tcEkX5MEOpHgli/LQj2Q0G0Hwgs/e5pEngfZPmK6KWEtwenJCm83lc8JSi83J25npITnm/tWj0ApISnmxPnIgRkhOb1ge18XyAiNK62ygHg1pWM8Hi5vntkVyOAW/CXVjZ3Dk8rNU8pCcG35lY3tstVV8XGKPjW7MLa/rlKjE3wrfnFY2UYkzC1vOcp83iE4gTV5xJ6JhUECBB+TMDY9gVhhwZ2u52HDgAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAVNQTFRFAAAAKbb2VMX4VMX4VMX4Kbb2AVKTAVebCUhwKbb2VMX4GXCiKbb2Orz3VMX4AChHACtNACxPAC5SAC9TAC9UADBWADNcADtoAD9vATFXATVfATZgATdiATpnATtpATxrATxsAT1sAT1tAT5uAT9xAUFzAUF0AUJ1AUN4AUR6AUV7AUZ8AUZ9AUZ+AUd+AUiAAUiBAUmBAUmCAUmDAUmEAUqDAUqEAUyHAUyIAU2IAU2JAU6LAU6MAU+MAU+NAVCOAVGPAVGQAVGRAVGSAVKRAVKSAVKTAVOTAVOUAVSVAVSWAVWXAVWYAVaYAVaZAVaaAVeaAVebBzZTCDtaCUFjCUZrCkpyCk54C1F9C1SBC1aEC1eHC1mJC1qKC1qMDFuMJKDZJKHZJaLcJaTeJaXgJqfhJqjjJqnkJqnlJqrmJqvmJqvnJ6vnJ6voKbb2Obz3VMX4m8WQNQAAAA90Uk5TABAQQGCAn5+fn5+/z8/PrpHT6gAAAi9JREFUeNrt0GdTU1EUheEoCghWFEVCs1AMGpQSQoSERMDATTuxgD3YaBL4/59IMZKEc+/dM1z2Pg7r/b5mnlk+H0IG1nFIrQMeeOCBBx544IEHHnjggQceeOCBBx544IEHHnjggQceeOCBBx544IEHHnj+M8/FFnI8nuvk+SV44Dl7Dx3E5CGL2DxEEaOHJGL1EETMHlcRu8dFJOBxFIl4HERCHluRmMdGpPNcuMbi0Yq0nqvFAxaPRmTjKRJFp/WcENl6aKLTe5pEDh6KyAtPg8jR4y7yxlMncvG4ibzy/BO5epxF3nn+iggeJ5GXnoqI5LEXeespiYgeO5HXHm1aj14k6dGJZD0nRdKeZpG8p1FkgqdeZIbnWGSKpyYyx1MVmeQpi1g8vstET3G/08fTFZrnz7dQq0miva/Ty+k2c0R7X6ZfpXPKGNHu58lEKqeUKaKdT88XrWzOGNH2x2B0NVMFmSDa+hB4uWJlstkKSF70e2MsHE9a6RpIWvRrfTgUXaoHyYp+vn8UnIstN4AkRT/e9Y/NRGJLybV05hgkJ/r+1v94PBSJJqogcdHmm/sDo09nItH461Wr/iEhUSF/s3dodHxqdqEESmVVQwKiQv7Gnb4HI4HJ2fnEWhNHQlTy3OruGxwOTMVSShezqOzp6vY/fBFXdrGKKp7bPWHlFKOo7Lk3YSmX2ESF/N0nSUWIS9T+bCWjlEmiVqKHT9SmIIIIIoggggii8yRC56kjnvQNYJm/1ucAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAMAAABlApw1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAdpQTFRFAAAAVMX4VMX4AUN3AVGRAVaaAVebKbb2VMX4FmOXVMX4VMX4Kbb2AUuGAUuHAVWXAVebFmyWKbb2LLf2VMX4AClIACxOACxPAC1QAC5RAC5SAC9TAC9UADBWADFWADFXADNaADVeADZgADdgADtpADxsASZCASZDASpJATFXATRbATRcATRdATVfATZgAThjAThkATlmATpnATpoATtpATxqAT1sAT1tAT5tAT5uAT5vAT9vAT9wAUByAUFzAUF0AUJ1AUJ2AUR5AUR6AUV6AUV7AUZ8AUd+AUd/AUiAAUiBAUmCAUmDAUqDAUqEAUqFAUuEAUuFAUuGAUuHAUyHAUyIAUyJAU2IAU2JAU2KAU6KAU6LAU6MAU+MAU+NAVCOAVCPAVCQAVGPAVGQAVGRAVKRAVKSAVOSAVOTAVOUAVOVAVSUAVSVAVSWAVWWAVWXAVWYAVWZAVaYAVaZAVaaAVeaAVebAi5PAjFWAjRbAjdgAjpkAjxoAj5rAkBuAkFxAkJzAkN1AkR2AkV4AkZ5AkZ6Akd6FmiPFmmQF22WF3CbGHOfGXajGXmnGXuqGn2tGn+wGoCyG4K0G4O2G4S3G4W4G4W5G4a6HIa7H4vAKbb2LLf2TML4VMX4KQGaCAAAABV0Uk5TABAgMDAwMDAwQEDP3+/v7+/v7+/v7Yl3rQAAAz5JREFUeNrt1AdTE1EUhmFEQKygYi9YsTewYcOAEBBRg6KIkASBmKhhkazXLnbsvUb8r2bNMASy2b33zmzmnJnv+wF7nnd2dgsKMAzL60or/uqtohR++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++Gn7C2dprpCGX/uhs6fBDz/88HPxa9+i4te9Rsevd4+SX+ciLb/6TWp+1av0/Gp3KfpVLtP0y9+m6pe9Ttcvd5+yX0ZA2+9uoO53U9D3Ozuc/DMWjpHwOxU4+hck/4yR8OcucPEntQo88OcqcPXrFHjity+Q8KsXeOS3K5DyqxZ45s8ukPSrFXjon1og7Vcp8NQ/uUDBL1/gsT+zQMkvW+C5f6JA0S9XkAf/eIGyX6YgL/50gYbfvSBPfqtAy+9WkDd/qkDP71yQR7/THP1OBTz8uQu4+HMV8PHbF3Dy2xXw8mcXcPNPLeDnn1zA0Z9ZwNM/UcDVP17A158u4Oy3Coj4C+Yk9fZ7Jg2/7hv49XJuEeeCny/a+8qK+RZY/kGzvIRrwY/n7b3xhBBcC74/O5vy3xJcC749bQvFb5pWAMuCr09ag9eHzHQAw4Ivj1u6o0YiFcCz4POIv6s/PjwRwKzg06OmjiuxwcwAVgUfH9YHgpGYYWQGMCr48MDX2hWOxuLGsDn+FXMqeH//qP9cT+/VrAAmBe/uHWw4dSHYF8kOYFHw9u5eX/OZzmA4ErthTPqKeRS8ubPrSENLoLMnPGAXQL7g9e3t++oaTwY6u8MDUbsA4gWvNm/ZXetrbDl9sTvUH72W/o8KwaZgdNOSbdWHrICOy6E+6z9qiuzRLRitWrRyR83h4yea285bAUZC2I5qQcq/ePXOmtq6Bn8qIDIkco5mgeVfVrmu+sCxen9X1BROo1jw37+8cu2e/c2hhHAbvYK0f8WqDW1DQmbUCtL+9U0RITtaBZZ/jU9eT61gtGrpxkumUBydgvlbG/sNZT+hgunztPyECorKtPyECorLBfOCEhSgAAUoQAEKUIACFKAABShAAZkCDKO1f/OiyBBYvwCtAAAAAElFTkSuQmCC",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/values-night/styles.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHJlc291cmNlcz4KICAgIDwhLS0gVGhlbWUgYXBwbGllZCB0byB0aGUgQW5kcm9pZCBXaW5kb3cgd2hpbGUgdGhlIHByb2Nlc3MgaXMgc3RhcnRpbmcgd2hlbiB0aGUgT1MncyBEYXJrIE1vZGUgc2V0dGluZyBpcyBvbiAtLT4KICAgIDxzdHlsZSBuYW1lPSJMYXVuY2hUaGVtZSIgcGFyZW50PSJAYW5kcm9pZDpzdHlsZS9UaGVtZS5CbGFjay5Ob1RpdGxlQmFyIj4KICAgICAgICA8IS0tIFNob3cgYSBzcGxhc2ggc2NyZWVuIG9uIHRoZSBhY3Rpdml0eS4gQXV0b21hdGljYWxseSByZW1vdmVkIHdoZW4KICAgICAgICAgICAgIHRoZSBGbHV0dGVyIGVuZ2luZSBkcmF3cyBpdHMgZmlyc3QgZnJhbWUgLS0+CiAgICAgICAgPGl0ZW0gbmFtZT0iYW5kcm9pZDp3aW5kb3dCYWNrZ3JvdW5kIj5AZHJhd2FibGUvbGF1bmNoX2JhY2tncm91bmQ8L2l0ZW0+CiAgICA8L3N0eWxlPgogICAgPCEtLSBUaGVtZSBhcHBsaWVkIHRvIHRoZSBBbmRyb2lkIFdpbmRvdyBhcyBzb29uIGFzIHRoZSBwcm9jZXNzIGhhcyBzdGFydGVkLgogICAgICAgICBUaGlzIHRoZW1lIGRldGVybWluZXMgdGhlIGNvbG9yIG9mIHRoZSBBbmRyb2lkIFdpbmRvdyB3aGlsZSB5b3VyCiAgICAgICAgIEZsdXR0ZXIgVUkgaW5pdGlhbGl6ZXMsIGFzIHdlbGwgYXMgYmVoaW5kIHlvdXIgRmx1dHRlciBVSSB3aGlsZSBpdHMKICAgICAgICAgcnVubmluZy4KCiAgICAgICAgIFRoaXMgVGhlbWUgaXMgb25seSB1c2VkIHN0YXJ0aW5nIHdpdGggVjIgb2YgRmx1dHRlcidzIEFuZHJvaWQgZW1iZWRkaW5nLiAtLT4KICAgIDxzdHlsZSBuYW1lPSJOb3JtYWxUaGVtZSIgcGFyZW50PSJAYW5kcm9pZDpzdHlsZS9UaGVtZS5CbGFjay5Ob1RpdGxlQmFyIj4KICAgICAgICA8aXRlbSBuYW1lPSJhbmRyb2lkOndpbmRvd0JhY2tncm91bmQiPj9hbmRyb2lkOmNvbG9yQmFja2dyb3VuZDwvaXRlbT4KICAgIDwvc3R5bGU+CjwvcmVzb3VyY2VzPgo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/values/styles.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHJlc291cmNlcz4KICAgIDwhLS0gVGhlbWUgYXBwbGllZCB0byB0aGUgQW5kcm9pZCBXaW5kb3cgd2hpbGUgdGhlIHByb2Nlc3MgaXMgc3RhcnRpbmcgd2hlbiB0aGUgT1MncyBEYXJrIE1vZGUgc2V0dGluZyBpcyBvZmYgLS0+CiAgICA8c3R5bGUgbmFtZT0iTGF1bmNoVGhlbWUiIHBhcmVudD0iQGFuZHJvaWQ6c3R5bGUvVGhlbWUuTGlnaHQuTm9UaXRsZUJhciI+CiAgICAgICAgPCEtLSBTaG93IGEgc3BsYXNoIHNjcmVlbiBvbiB0aGUgYWN0aXZpdHkuIEF1dG9tYXRpY2FsbHkgcmVtb3ZlZCB3aGVuCiAgICAgICAgICAgICB0aGUgRmx1dHRlciBlbmdpbmUgZHJhd3MgaXRzIGZpcnN0IGZyYW1lIC0tPgogICAgICAgIDxpdGVtIG5hbWU9ImFuZHJvaWQ6d2luZG93QmFja2dyb3VuZCI+QGRyYXdhYmxlL2xhdW5jaF9iYWNrZ3JvdW5kPC9pdGVtPgogICAgPC9zdHlsZT4KICAgIDwhLS0gVGhlbWUgYXBwbGllZCB0byB0aGUgQW5kcm9pZCBXaW5kb3cgYXMgc29vbiBhcyB0aGUgcHJvY2VzcyBoYXMgc3RhcnRlZC4KICAgICAgICAgVGhpcyB0aGVtZSBkZXRlcm1pbmVzIHRoZSBjb2xvciBvZiB0aGUgQW5kcm9pZCBXaW5kb3cgd2hpbGUgeW91cgogICAgICAgICBGbHV0dGVyIFVJIGluaXRpYWxpemVzLCBhcyB3ZWxsIGFzIGJlaGluZCB5b3VyIEZsdXR0ZXIgVUkgd2hpbGUgaXRzCiAgICAgICAgIHJ1bm5pbmcuCgogICAgICAgICBUaGlzIFRoZW1lIGlzIG9ubHkgdXNlZCBzdGFydGluZyB3aXRoIFYyIG9mIEZsdXR0ZXIncyBBbmRyb2lkIGVtYmVkZGluZy4gLS0+CiAgICA8c3R5bGUgbmFtZT0iTm9ybWFsVGhlbWUiIHBhcmVudD0iQGFuZHJvaWQ6c3R5bGUvVGhlbWUuTGlnaHQuTm9UaXRsZUJhciI+CiAgICAgICAgPGl0ZW0gbmFtZT0iYW5kcm9pZDp3aW5kb3dCYWNrZ3JvdW5kIj4/YW5kcm9pZDpjb2xvckJhY2tncm91bmQ8L2l0ZW0+CiAgICA8L3N0eWxlPgo8L3Jlc291cmNlcz4K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/profile/AndroidManifest.xml",
      "data":
          "PG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8IS0tIFRoZSBJTlRFUk5FVCBwZXJtaXNzaW9uIGlzIHJlcXVpcmVkIGZvciBkZXZlbG9wbWVudC4gU3BlY2lmaWNhbGx5LAogICAgICAgICB0aGUgRmx1dHRlciB0b29sIG5lZWRzIGl0IHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHJ1bm5pbmcgYXBwbGljYXRpb24KICAgICAgICAgdG8gYWxsb3cgc2V0dGluZyBicmVha3BvaW50cywgdG8gcHJvdmlkZSBob3QgcmVsb2FkLCBldGMuCiAgICAtLT4KICAgIDx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPSJhbmRyb2lkLnBlcm1pc3Npb24uSU5URVJORVQiLz4KPC9tYW5pZmVzdD4K",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/build.gradle",
      "data":
          "YWxscHJvamVjdHMgewogICAgcmVwb3NpdG9yaWVzIHsKICAgICAgICBnb29nbGUoKQogICAgICAgIG1hdmVuQ2VudHJhbCgpCiAgICB9Cn0KCnJvb3RQcm9qZWN0LmJ1aWxkRGlyID0gIi4uL2J1aWxkIgpzdWJwcm9qZWN0cyB7CiAgICBwcm9qZWN0LmJ1aWxkRGlyID0gIiR7cm9vdFByb2plY3QuYnVpbGREaXJ9LyR7cHJvamVjdC5uYW1lfSIKfQpzdWJwcm9qZWN0cyB7CiAgICBwcm9qZWN0LmV2YWx1YXRpb25EZXBlbmRzT24oIjphcHAiKQp9Cgp0YXNrcy5yZWdpc3RlcigiY2xlYW4iLCBEZWxldGUpIHsKICAgIGRlbGV0ZSByb290UHJvamVjdC5idWlsZERpcgp9Cg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/gradle.properties",
      "data":
          "b3JnLmdyYWRsZS5qdm1hcmdzPS1YbXg0RyAtWFg6TWF4TWV0YXNwYWNlU2l6ZT0yRyAtWFg6K0hlYXBEdW1wT25PdXRPZk1lbW9yeUVycm9yCmFuZHJvaWQudXNlQW5kcm9pZFg9dHJ1ZQphbmRyb2lkLmVuYWJsZUpldGlmaWVyPXRydWUK",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/gradle/wrapper/gradle-wrapper.jar",
      "data":
          "",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/gradle/wrapper/gradle-wrapper.properties",
      "data":
          "ZGlzdHJpYnV0aW9uQmFzZT1HUkFETEVfVVNFUl9IT01FCmRpc3RyaWJ1dGlvblBhdGg9d3JhcHBlci9kaXN0cwp6aXBTdG9yZUJhc2U9R1JBRExFX1VTRVJfSE9NRQp6aXBTdG9yZVBhdGg9d3JhcHBlci9kaXN0cwpkaXN0cmlidXRpb25Vcmw9aHR0cHNcOi8vc2VydmljZXMuZ3JhZGxlLm9yZy9kaXN0cmlidXRpb25zL2dyYWRsZS04LjMtYWxsLnppcAo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/gradlew",
      "data":
          "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjCiMjICBHcmFkbGUgc3RhcnQgdXAgc2NyaXB0IGZvciBVTipYCiMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyBBZGQgZGVmYXVsdCBKVk0gb3B0aW9ucyBoZXJlLiBZb3UgY2FuIGFsc28gdXNlIEpBVkFfT1BUUyBhbmQgR1JBRExFX09QVFMgdG8gcGFzcyBKVk0gb3B0aW9ucyB0byB0aGlzIHNjcmlwdC4KREVGQVVMVF9KVk1fT1BUUz0iIgoKQVBQX05BTUU9IkdyYWRsZSIKQVBQX0JBU0VfTkFNRT1gYmFzZW5hbWUgIiQwImAKCiMgVXNlIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSwgb3Igc2V0IE1BWF9GRCAhPSAtMSB0byB1c2UgdGhhdCB2YWx1ZS4KTUFYX0ZEPSJtYXhpbXVtIgoKd2FybiAoICkgewogICAgZWNobyAiJCoiCn0KCmRpZSAoICkgewogICAgZWNobwogICAgZWNobyAiJCoiCiAgICBlY2hvCiAgICBleGl0IDEKfQoKIyBPUyBzcGVjaWZpYyBzdXBwb3J0IChtdXN0IGJlICd0cnVlJyBvciAnZmFsc2UnKS4KY3lnd2luPWZhbHNlCm1zeXM9ZmFsc2UKZGFyd2luPWZhbHNlCmNhc2UgImB1bmFtZWAiIGluCiAgQ1lHV0lOKiApCiAgICBjeWd3aW49dHJ1ZQogICAgOzsKICBEYXJ3aW4qICkKICAgIGRhcndpbj10cnVlCiAgICA7OwogIE1JTkdXKiApCiAgICBtc3lzPXRydWUKICAgIDs7CmVzYWMKCiMgQXR0ZW1wdCB0byBzZXQgQVBQX0hPTUUKIyBSZXNvbHZlIGxpbmtzOiAkMCBtYXkgYmUgYSBsaW5rClBSRz0iJDAiCiMgTmVlZCB0aGlzIGZvciByZWxhdGl2ZSBzeW1saW5rcy4Kd2hpbGUgWyAtaCAiJFBSRyIgXSA7IGRvCiAgICBscz1gbHMgLWxkICIkUFJHImAKICAgIGxpbms9YGV4cHIgIiRscyIgOiAnLiotPiBcKC4qXCkkJ2AKICAgIGlmIGV4cHIgIiRsaW5rIiA6ICcvLionID4gL2Rldi9udWxsOyB0aGVuCiAgICAgICAgUFJHPSIkbGluayIKICAgIGVsc2UKICAgICAgICBQUkc9YGRpcm5hbWUgIiRQUkciYCIvJGxpbmsiCiAgICBmaQpkb25lClNBVkVEPSJgcHdkYCIKY2QgImBkaXJuYW1lIFwiJFBSR1wiYC8iID4vZGV2L251bGwKQVBQX0hPTUU9ImBwd2QgLVBgIgpjZCAiJFNBVkVEIiA+L2Rldi9udWxsCgpDTEFTU1BBVEg9JEFQUF9IT01FL2dyYWRsZS93cmFwcGVyL2dyYWRsZS13cmFwcGVyLmphcgoKIyBEZXRlcm1pbmUgdGhlIEphdmEgY29tbWFuZCB0byB1c2UgdG8gc3RhcnQgdGhlIEpWTS4KaWYgWyAtbiAiJEpBVkFfSE9NRSIgXSA7IHRoZW4KICAgIGlmIFsgLXggIiRKQVZBX0hPTUUvanJlL3NoL2phdmEiIF0gOyB0aGVuCiAgICAgICAgIyBJQk0ncyBKREsgb24gQUlYIHVzZXMgc3RyYW5nZSBsb2NhdGlvbnMgZm9yIHRoZSBleGVjdXRhYmxlcwogICAgICAgIEpBVkFDTUQ9IiRKQVZBX0hPTUUvanJlL3NoL2phdmEiCiAgICBlbHNlCiAgICAgICAgSkFWQUNNRD0iJEpBVkFfSE9NRS9iaW4vamF2YSIKICAgIGZpCiAgICBpZiBbICEgLXggIiRKQVZBQ01EIiBdIDsgdGhlbgogICAgICAgIGRpZSAiRVJST1I6IEpBVkFfSE9NRSBpcyBzZXQgdG8gYW4gaW52YWxpZCBkaXJlY3Rvcnk6ICRKQVZBX0hPTUUKClBsZWFzZSBzZXQgdGhlIEpBVkFfSE9NRSB2YXJpYWJsZSBpbiB5b3VyIGVudmlyb25tZW50IHRvIG1hdGNoIHRoZQpsb2NhdGlvbiBvZiB5b3VyIEphdmEgaW5zdGFsbGF0aW9uLiIKICAgIGZpCmVsc2UKICAgIEpBVkFDTUQ9ImphdmEiCiAgICB3aGljaCBqYXZhID4vZGV2L251bGwgMj4mMSB8fCBkaWUgIkVSUk9SOiBKQVZBX0hPTUUgaXMgbm90IHNldCBhbmQgbm8gJ2phdmEnIGNvbW1hbmQgY291bGQgYmUgZm91bmQgaW4geW91ciBQQVRILgoKUGxlYXNlIHNldCB0aGUgSkFWQV9IT01FIHZhcmlhYmxlIGluIHlvdXIgZW52aXJvbm1lbnQgdG8gbWF0Y2ggdGhlCmxvY2F0aW9uIG9mIHlvdXIgSmF2YSBpbnN0YWxsYXRpb24uIgpmaQoKIyBJbmNyZWFzZSB0aGUgbWF4aW11bSBmaWxlIGRlc2NyaXB0b3JzIGlmIHdlIGNhbi4KaWYgWyAiJGN5Z3dpbiIgPSAiZmFsc2UiIC1hICIkZGFyd2luIiA9ICJmYWxzZSIgXSA7IHRoZW4KICAgIE1BWF9GRF9MSU1JVD1gdWxpbWl0IC1IIC1uYAogICAgaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgogICAgICAgIGlmIFsgIiRNQVhfRkQiID0gIm1heGltdW0iIC1vICIkTUFYX0ZEIiA9ICJtYXgiIF0gOyB0aGVuCiAgICAgICAgICAgIE1BWF9GRD0iJE1BWF9GRF9MSU1JVCIKICAgICAgICBmaQogICAgICAgIHVsaW1pdCAtbiAkTUFYX0ZECiAgICAgICAgaWYgWyAkPyAtbmUgMCBdIDsgdGhlbgogICAgICAgICAgICB3YXJuICJDb3VsZCBub3Qgc2V0IG1heGltdW0gZmlsZSBkZXNjcmlwdG9yIGxpbWl0OiAkTUFYX0ZEIgogICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgd2FybiAiQ291bGQgbm90IHF1ZXJ5IG1heGltdW0gZmlsZSBkZXNjcmlwdG9yIGxpbWl0OiAkTUFYX0ZEX0xJTUlUIgogICAgZmkKZmkKCiMgRm9yIERhcndpbiwgYWRkIG9wdGlvbnMgdG8gc3BlY2lmeSBob3cgdGhlIGFwcGxpY2F0aW9uIGFwcGVhcnMgaW4gdGhlIGRvY2sKaWYgJGRhcndpbjsgdGhlbgogICAgR1JBRExFX09QVFM9IiRHUkFETEVfT1BUUyBcIi1YZG9jazpuYW1lPSRBUFBfTkFNRVwiIFwiLVhkb2NrOmljb249JEFQUF9IT01FL21lZGlhL2dyYWRsZS5pY25zXCIiCmZpCgojIEZvciBDeWd3aW4sIHN3aXRjaCBwYXRocyB0byBXaW5kb3dzIGZvcm1hdCBiZWZvcmUgcnVubmluZyBqYXZhCmlmICRjeWd3aW4gOyB0aGVuCiAgICBBUFBfSE9NRT1gY3lncGF0aCAtLXBhdGggLS1taXhlZCAiJEFQUF9IT01FImAKICAgIENMQVNTUEFUSD1gY3lncGF0aCAtLXBhdGggLS1taXhlZCAiJENMQVNTUEFUSCJgCiAgICBKQVZBQ01EPWBjeWdwYXRoIC0tdW5peCAiJEpBVkFDTUQiYAoKICAgICMgV2UgYnVpbGQgdGhlIHBhdHRlcm4gZm9yIGFyZ3VtZW50cyB0byBiZSBjb252ZXJ0ZWQgdmlhIGN5Z3BhdGgKICAgIFJPT1RESVJTUkFXPWBmaW5kIC1MIC8gLW1heGRlcHRoIDEgLW1pbmRlcHRoIDEgLXR5cGUgZCAyPi9kZXYvbnVsbGAKICAgIFNFUD0iIgogICAgZm9yIGRpciBpbiAkUk9PVERJUlNSQVcgOyBkbwogICAgICAgIFJPT1RESVJTPSIkUk9PVERJUlMkU0VQJGRpciIKICAgICAgICBTRVA9InwiCiAgICBkb25lCiAgICBPVVJDWUdQQVRURVJOPSIoXigkUk9PVERJUlMpKSIKICAgICMgQWRkIGEgdXNlci1kZWZpbmVkIHBhdHRlcm4gdG8gdGhlIGN5Z3BhdGggYXJndW1lbnRzCiAgICBpZiBbICIkR1JBRExFX0NZR1BBVFRFUk4iICE9ICIiIF0gOyB0aGVuCiAgICAgICAgT1VSQ1lHUEFUVEVSTj0iJE9VUkNZR1BBVFRFUk58KCRHUkFETEVfQ1lHUEFUVEVSTikiCiAgICBmaQogICAgIyBOb3cgY29udmVydCB0aGUgYXJndW1lbnRzIC0ga2x1ZGdlIHRvIGxpbWl0IG91cnNlbHZlcyB0byAvYmluL3NoCiAgICBpPTAKICAgIGZvciBhcmcgaW4gIiRAIiA7IGRvCiAgICAgICAgQ0hFQ0s9YGVjaG8gIiRhcmcifGVncmVwIC1jICIkT1VSQ1lHUEFUVEVSTiIgLWAKICAgICAgICBDSEVDSzI9YGVjaG8gIiRhcmcifGVncmVwIC1jICJeLSJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIERldGVybWluZSBpZiBhbiBvcHRpb24KCiAgICAgICAgaWYgWyAkQ0hFQ0sgLW5lIDAgXSAmJiBbICRDSEVDSzIgLWVxIDAgXSA7IHRoZW4gICAgICAgICAgICAgICAgICAgICMjIyBBZGRlZCBhIGNvbmRpdGlvbgogICAgICAgICAgICBldmFsIGBlY2hvIGFyZ3MkaWA9YGN5Z3BhdGggLS1wYXRoIC0taWdub3JlIC0tbWl4ZWQgIiRhcmciYAogICAgICAgIGVsc2UKICAgICAgICAgICAgZXZhbCBgZWNobyBhcmdzJGlgPSJcIiRhcmdcIiIKICAgICAgICBmaQogICAgICAgIGk9JCgoaSsxKSkKICAgIGRvbmUKICAgIGNhc2UgJGkgaW4KICAgICAgICAoMCkgc2V0IC0tIDs7CiAgICAgICAgKDEpIHNldCAtLSAiJGFyZ3MwIiA7OwogICAgICAgICgyKSBzZXQgLS0gIiRhcmdzMCIgIiRhcmdzMSIgOzsKICAgICAgICAoMykgc2V0IC0tICIkYXJnczAiICIkYXJnczEiICIkYXJnczIiIDs7CiAgICAgICAgKDQpIHNldCAtLSAiJGFyZ3MwIiAiJGFyZ3MxIiAiJGFyZ3MyIiAiJGFyZ3MzIiA7OwogICAgICAgICg1KSBzZXQgLS0gIiRhcmdzMCIgIiRhcmdzMSIgIiRhcmdzMiIgIiRhcmdzMyIgIiRhcmdzNCIgOzsKICAgICAgICAoNikgc2V0IC0tICIkYXJnczAiICIkYXJnczEiICIkYXJnczIiICIkYXJnczMiICIkYXJnczQiICIkYXJnczUiIDs7CiAgICAgICAgKDcpIHNldCAtLSAiJGFyZ3MwIiAiJGFyZ3MxIiAiJGFyZ3MyIiAiJGFyZ3MzIiAiJGFyZ3M0IiAiJGFyZ3M1IiAiJGFyZ3M2IiA7OwogICAgICAgICg4KSBzZXQgLS0gIiRhcmdzMCIgIiRhcmdzMSIgIiRhcmdzMiIgIiRhcmdzMyIgIiRhcmdzNCIgIiRhcmdzNSIgIiRhcmdzNiIgIiRhcmdzNyIgOzsKICAgICAgICAoOSkgc2V0IC0tICIkYXJnczAiICIkYXJnczEiICIkYXJnczIiICIkYXJnczMiICIkYXJnczQiICIkYXJnczUiICIkYXJnczYiICIkYXJnczciICIkYXJnczgiIDs7CiAgICBlc2FjCmZpCgojIFNwbGl0IHVwIHRoZSBKVk1fT1BUUyBBbmQgR1JBRExFX09QVFMgdmFsdWVzIGludG8gYW4gYXJyYXksIGZvbGxvd2luZyB0aGUgc2hlbGwgcXVvdGluZyBhbmQgc3Vic3RpdHV0aW9uIHJ1bGVzCmZ1bmN0aW9uIHNwbGl0SnZtT3B0cygpIHsKICAgIEpWTV9PUFRTPSgiJEAiKQp9CmV2YWwgc3BsaXRKdm1PcHRzICRERUZBVUxUX0pWTV9PUFRTICRKQVZBX09QVFMgJEdSQURMRV9PUFRTCkpWTV9PUFRTWyR7I0pWTV9PUFRTWypdfV09Ii1Eb3JnLmdyYWRsZS5hcHBuYW1lPSRBUFBfQkFTRV9OQU1FIgoKZXhlYyAiJEpBVkFDTUQiICIke0pWTV9PUFRTW0BdfSIgLWNsYXNzcGF0aCAiJENMQVNTUEFUSCIgb3JnLmdyYWRsZS53cmFwcGVyLkdyYWRsZVdyYXBwZXJNYWluICIkQCIK",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/gradlew.bat",
      "data":
          "QGlmICIlREVCVUclIiA9PSAiIiBAZWNobyBvZmYNCkByZW0gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCkByZW0NCkByZW0gIEdyYWRsZSBzdGFydHVwIHNjcmlwdCBmb3IgV2luZG93cw0KQHJlbQ0KQHJlbSAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQpAcmVtIFNldCBsb2NhbCBzY29wZSBmb3IgdGhlIHZhcmlhYmxlcyB3aXRoIHdpbmRvd3MgTlQgc2hlbGwNCmlmICIlT1MlIj09IldpbmRvd3NfTlQiIHNldGxvY2FsDQoNCkByZW0gQWRkIGRlZmF1bHQgSlZNIG9wdGlvbnMgaGVyZS4gWW91IGNhbiBhbHNvIHVzZSBKQVZBX09QVFMgYW5kIEdSQURMRV9PUFRTIHRvIHBhc3MgSlZNIG9wdGlvbnMgdG8gdGhpcyBzY3JpcHQuDQpzZXQgREVGQVVMVF9KVk1fT1BUUz0NCg0Kc2V0IERJUk5BTUU9JX5kcDANCmlmICIlRElSTkFNRSUiID09ICIiIHNldCBESVJOQU1FPS4NCnNldCBBUFBfQkFTRV9OQU1FPSV+bjANCnNldCBBUFBfSE9NRT0lRElSTkFNRSUNCg0KQHJlbSBGaW5kIGphdmEuZXhlDQppZiBkZWZpbmVkIEpBVkFfSE9NRSBnb3RvIGZpbmRKYXZhRnJvbUphdmFIb21lDQoNCnNldCBKQVZBX0VYRT1qYXZhLmV4ZQ0KJUpBVkFfRVhFJSAtdmVyc2lvbiA+TlVMIDI+JjENCmlmICIlRVJST1JMRVZFTCUiID09ICIwIiBnb3RvIGluaXQNCg0KZWNoby4NCmVjaG8gRVJST1I6IEpBVkFfSE9NRSBpcyBub3Qgc2V0IGFuZCBubyAnamF2YScgY29tbWFuZCBjb3VsZCBiZSBmb3VuZCBpbiB5b3VyIFBBVEguDQplY2hvLg0KZWNobyBQbGVhc2Ugc2V0IHRoZSBKQVZBX0hPTUUgdmFyaWFibGUgaW4geW91ciBlbnZpcm9ubWVudCB0byBtYXRjaCB0aGUNCmVjaG8gbG9jYXRpb24gb2YgeW91ciBKYXZhIGluc3RhbGxhdGlvbi4NCg0KZ290byBmYWlsDQoNCjpmaW5kSmF2YUZyb21KYXZhSG9tZQ0Kc2V0IEpBVkFfSE9NRT0lSkFWQV9IT01FOiI9JQ0Kc2V0IEpBVkFfRVhFPSVKQVZBX0hPTUUlL2Jpbi9qYXZhLmV4ZQ0KDQppZiBleGlzdCAiJUpBVkFfRVhFJSIgZ290byBpbml0DQoNCmVjaG8uDQplY2hvIEVSUk9SOiBKQVZBX0hPTUUgaXMgc2V0IHRvIGFuIGludmFsaWQgZGlyZWN0b3J5OiAlSkFWQV9IT01FJQ0KZWNoby4NCmVjaG8gUGxlYXNlIHNldCB0aGUgSkFWQV9IT01FIHZhcmlhYmxlIGluIHlvdXIgZW52aXJvbm1lbnQgdG8gbWF0Y2ggdGhlDQplY2hvIGxvY2F0aW9uIG9mIHlvdXIgSmF2YSBpbnN0YWxsYXRpb24uDQoNCmdvdG8gZmFpbA0KDQo6aW5pdA0KQHJlbSBHZXQgY29tbWFuZC1saW5lIGFyZ3VtZW50cywgaGFuZGxpbmcgV2luZG93eiB2YXJpYW50cw0KDQppZiBub3QgIiVPUyUiID09ICJXaW5kb3dzX05UIiBnb3RvIHdpbjl4TUVfYXJncw0KaWYgIiVAZXZhbFsyKzJdIiA9PSAiNCIgZ290byA0TlRfYXJncw0KDQo6d2luOXhNRV9hcmdzDQpAcmVtIFNsdXJwIHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzLg0Kc2V0IENNRF9MSU5FX0FSR1M9DQpzZXQgX1NLSVA9Mg0KDQo6d2luOXhNRV9hcmdzX3NsdXJwDQppZiAieCV+MSIgPT0gIngiIGdvdG8gZXhlY3V0ZQ0KDQpzZXQgQ01EX0xJTkVfQVJHUz0lKg0KZ290byBleGVjdXRlDQoNCjo0TlRfYXJncw0KQHJlbSBHZXQgYXJndW1lbnRzIGZyb20gdGhlIDROVCBTaGVsbCBmcm9tIEpQIFNvZnR3YXJlDQpzZXQgQ01EX0xJTkVfQVJHUz0lJA0KDQo6ZXhlY3V0ZQ0KQHJlbSBTZXR1cCB0aGUgY29tbWFuZCBsaW5lDQoNCnNldCBDTEFTU1BBVEg9JUFQUF9IT01FJVxncmFkbGVcd3JhcHBlclxncmFkbGUtd3JhcHBlci5qYXINCg0KQHJlbSBFeGVjdXRlIEdyYWRsZQ0KIiVKQVZBX0VYRSUiICVERUZBVUxUX0pWTV9PUFRTJSAlSkFWQV9PUFRTJSAlR1JBRExFX09QVFMlICItRG9yZy5ncmFkbGUuYXBwbmFtZT0lQVBQX0JBU0VfTkFNRSUiIC1jbGFzc3BhdGggIiVDTEFTU1BBVEglIiBvcmcuZ3JhZGxlLndyYXBwZXIuR3JhZGxlV3JhcHBlck1haW4gJUNNRF9MSU5FX0FSR1MlDQoNCjplbmQNCkByZW0gRW5kIGxvY2FsIHNjb3BlIGZvciB0aGUgdmFyaWFibGVzIHdpdGggd2luZG93cyBOVCBzaGVsbA0KaWYgIiVFUlJPUkxFVkVMJSI9PSIwIiBnb3RvIG1haW5FbmQNCg0KOmZhaWwNCnJlbSBTZXQgdmFyaWFibGUgR1JBRExFX0VYSVRfQ09OU09MRSBpZiB5b3UgbmVlZCB0aGUgX3NjcmlwdF8gcmV0dXJuIGNvZGUgaW5zdGVhZCBvZg0KcmVtIHRoZSBfY21kLmV4ZSAvY18gcmV0dXJuIGNvZGUhDQppZiAgbm90ICIiID09ICIlR1JBRExFX0VYSVRfQ09OU09MRSUiIGV4aXQgMQ0KZXhpdCAvYiAxDQoNCjptYWluRW5kDQppZiAiJU9TJSI9PSJXaW5kb3dzX05UIiBlbmRsb2NhbA0KDQo6b21lZ2ENCg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/local.properties",
      "data":
          "c2RrLmRpcj0vVXNlcnMvYWRlbW9sYS9MaWJyYXJ5L0FuZHJvaWQvc2RrCmZsdXR0ZXIuc2RrPS9Vc2Vycy9hZGVtb2xhL2RldmVsb3BtZW50L2ZsdXR0ZXI=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/android/settings.gradle",
      "data":
          "cGx1Z2luTWFuYWdlbWVudCB7CiAgICBkZWYgZmx1dHRlclNka1BhdGggPSB7CiAgICAgICAgZGVmIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCiAgICAgICAgZmlsZSgibG9jYWwucHJvcGVydGllcyIpLndpdGhJbnB1dFN0cmVhbSB7IHByb3BlcnRpZXMubG9hZChpdCkgfQogICAgICAgIGRlZiBmbHV0dGVyU2RrUGF0aCA9IHByb3BlcnRpZXMuZ2V0UHJvcGVydHkoImZsdXR0ZXIuc2RrIikKICAgICAgICBhc3NlcnQgZmx1dHRlclNka1BhdGggIT0gbnVsbCwgImZsdXR0ZXIuc2RrIG5vdCBzZXQgaW4gbG9jYWwucHJvcGVydGllcyIKICAgICAgICByZXR1cm4gZmx1dHRlclNka1BhdGgKICAgIH0oKQoKICAgIGluY2x1ZGVCdWlsZCgiJGZsdXR0ZXJTZGtQYXRoL3BhY2thZ2VzL2ZsdXR0ZXJfdG9vbHMvZ3JhZGxlIikKCiAgICByZXBvc2l0b3JpZXMgewogICAgICAgIGdvb2dsZSgpCiAgICAgICAgbWF2ZW5DZW50cmFsKCkKICAgICAgICBncmFkbGVQbHVnaW5Qb3J0YWwoKQogICAgfQp9CgpwbHVnaW5zIHsKICAgIGlkICJkZXYuZmx1dHRlci5mbHV0dGVyLXBsdWdpbi1sb2FkZXIiIHZlcnNpb24gIjEuMC4wIgogICAgaWQgImNvbS5hbmRyb2lkLmFwcGxpY2F0aW9uIiB2ZXJzaW9uICI4LjEuMCIgYXBwbHkgZmFsc2UKICAgIGlkICJvcmcuamV0YnJhaW5zLmtvdGxpbi5hbmRyb2lkIiB2ZXJzaW9uICIxLjguMjIiIGFwcGx5IGZhbHNlCn0KCmluY2x1ZGUgIjphcHAiCg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/{{project_name_snakeCase()}}.iml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPG1vZHVsZSB0eXBlPSJKQVZBX01PRFVMRSIgdmVyc2lvbj0iNCI+CiAgPGNvbXBvbmVudCBuYW1lPSJGYWNldE1hbmFnZXIiPgogICAgPGZhY2V0IHR5cGU9ImFuZHJvaWQiIG5hbWU9IkFuZHJvaWQiPgogICAgICA8Y29uZmlndXJhdGlvbj4KICAgICAgICA8b3B0aW9uIG5hbWU9IkFMTE9XX1VTRVJfQ09ORklHVVJBVElPTiIgdmFsdWU9ImZhbHNlIiAvPgogICAgICAgIDxvcHRpb24gbmFtZT0iR0VOX0ZPTERFUl9SRUxBVElWRV9QQVRIX0FQVCIgdmFsdWU9Ii9nZW4iIC8+CiAgICAgICAgPG9wdGlvbiBuYW1lPSJHRU5fRk9MREVSX1JFTEFUSVZFX1BBVEhfQUlETCIgdmFsdWU9Ii9nZW4iIC8+CiAgICAgICAgPG9wdGlvbiBuYW1lPSJNQU5JRkVTVF9GSUxFX1JFTEFUSVZFX1BBVEgiIHZhbHVlPSIvYXBwL3NyYy9tYWluL0FuZHJvaWRNYW5pZmVzdC54bWwiIC8+CiAgICAgICAgPG9wdGlvbiBuYW1lPSJSRVNfRk9MREVSX1JFTEFUSVZFX1BBVEgiIHZhbHVlPSIvYXBwL3NyYy9tYWluL3JlcyIgLz4KICAgICAgICA8b3B0aW9uIG5hbWU9IkFTU0VUU19GT0xERVJfUkVMQVRJVkVfUEFUSCIgdmFsdWU9Ii9hcHAvc3JjL21haW4vYXNzZXRzIiAvPgogICAgICAgIDxvcHRpb24gbmFtZT0iTElCU19GT0xERVJfUkVMQVRJVkVfUEFUSCIgdmFsdWU9Ii9hcHAvc3JjL21haW4vbGlicyIgLz4KICAgICAgICA8b3B0aW9uIG5hbWU9IlBST0dVQVJEX0xPR1NfRk9MREVSX1JFTEFUSVZFX1BBVEgiIHZhbHVlPSIvYXBwL3NyYy9tYWluL3Byb2d1YXJkX2xvZ3MiIC8+CiAgICAgIDwvY29uZmlndXJhdGlvbj4KICAgIDwvZmFjZXQ+CiAgPC9jb21wb25lbnQ+CiAgPGNvbXBvbmVudCBuYW1lPSJOZXdNb2R1bGVSb290TWFuYWdlciIgaW5oZXJpdC1jb21waWxlci1vdXRwdXQ9InRydWUiPgogICAgPGV4Y2x1ZGUtb3V0cHV0IC8+CiAgICA8Y29udGVudCB1cmw9ImZpbGU6Ly8kTU9EVUxFX0RJUiQiPgogICAgICA8c291cmNlRm9sZGVyIHVybD0iZmlsZTovLyRNT0RVTEVfRElSJC9hcHAvc3JjL21haW4vamF2YSIgaXNUZXN0U291cmNlPSJmYWxzZSIgLz4KICAgICAgPHNvdXJjZUZvbGRlciB1cmw9ImZpbGU6Ly8kTU9EVUxFX0RJUiQvYXBwL3NyYy9tYWluL2tvdGxpbiIgaXNUZXN0U291cmNlPSJmYWxzZSIgLz4KICAgICAgPHNvdXJjZUZvbGRlciB1cmw9ImZpbGU6Ly8kTU9EVUxFX0RJUiQvZ2VuIiBpc1Rlc3RTb3VyY2U9ImZhbHNlIiBnZW5lcmF0ZWQ9InRydWUiIC8+CiAgICA8L2NvbnRlbnQ+CiAgICA8b3JkZXJFbnRyeSB0eXBlPSJqZGsiIGpka05hbWU9IkFuZHJvaWQgQVBJIDI5IFBsYXRmb3JtIiBqZGtUeXBlPSJBbmRyb2lkIFNESyIgLz4KICAgIDxvcmRlckVudHJ5IHR5cGU9InNvdXJjZUZvbGRlciIgZm9yVGVzdHM9ImZhbHNlIiAvPgogICAgPG9yZGVyRW50cnkgdHlwZT0ibGlicmFyeSIgbmFtZT0iRmx1dHRlciBmb3IgQW5kcm9pZCIgbGV2ZWw9InByb2plY3QiIC8+CiAgICA8b3JkZXJFbnRyeSB0eXBlPSJsaWJyYXJ5IiBuYW1lPSJLb3RsaW5KYXZhUnVudGltZSIgbGV2ZWw9InByb2plY3QiIC8+CiAgPC9jb21wb25lbnQ+CjwvbW9kdWxlPgo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/.gitignore",
      "data":
          "KiovZGdwaAoqLm1vZGUxdjMKKi5tb2RlMnYzCioubW92ZWQtYXNpZGUKKi5wYnh1c2VyCioucGVyc3BlY3RpdmV2MwoqKi8qc3luYy8KLnNjb25zaWduLmRibGl0ZQoudGFncyoKKiovLnZhZ3JhbnQvCioqL0Rlcml2ZWREYXRhLwpJY29uPwoqKi9Qb2RzLwoqKi8uc3ltbGlua3MvCnByb2ZpbGUKeGN1c2VyZGF0YQoqKi8uZ2VuZXJhdGVkLwpGbHV0dGVyL0FwcC5mcmFtZXdvcmsKRmx1dHRlci9GbHV0dGVyLmZyYW1ld29yawpGbHV0dGVyL0ZsdXR0ZXIucG9kc3BlYwpGbHV0dGVyL0dlbmVyYXRlZC54Y2NvbmZpZwpGbHV0dGVyL2VwaGVtZXJhbC8KRmx1dHRlci9hcHAuZmx4CkZsdXR0ZXIvYXBwLnppcApGbHV0dGVyL2ZsdXR0ZXJfYXNzZXRzLwpGbHV0dGVyL2ZsdXR0ZXJfZXhwb3J0X2Vudmlyb25tZW50LnNoClNlcnZpY2VEZWZpbml0aW9ucy5qc29uClJ1bm5lci9HZW5lcmF0ZWRQbHVnaW5SZWdpc3RyYW50LioKCiMgRXhjZXB0aW9ucyB0byBhYm92ZSBydWxlcy4KIWRlZmF1bHQubW9kZTF2MwohZGVmYXVsdC5tb2RlMnYzCiFkZWZhdWx0LnBieHVzZXIKIWRlZmF1bHQucGVyc3BlY3RpdmV2Mwo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Flutter/AppFrameworkInfo.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KICA8a2V5PkNGQnVuZGxlRGV2ZWxvcG1lbnRSZWdpb248L2tleT4KICA8c3RyaW5nPmVuPC9zdHJpbmc+CiAgPGtleT5DRkJ1bmRsZUV4ZWN1dGFibGU8L2tleT4KICA8c3RyaW5nPkFwcDwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVJZGVudGlmaWVyPC9rZXk+CiAgPHN0cmluZz5pby5mbHV0dGVyLmZsdXR0ZXIuYXBwPC9zdHJpbmc+CiAgPGtleT5DRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvbjwva2V5PgogIDxzdHJpbmc+Ni4wPC9zdHJpbmc+CiAgPGtleT5DRkJ1bmRsZU5hbWU8L2tleT4KICA8c3RyaW5nPkFwcDwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVQYWNrYWdlVHlwZTwva2V5PgogIDxzdHJpbmc+Rk1XSzwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVTaG9ydFZlcnNpb25TdHJpbmc8L2tleT4KICA8c3RyaW5nPjEuMDwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVTaWduYXR1cmU8L2tleT4KICA8c3RyaW5nPj8/Pz88L3N0cmluZz4KICA8a2V5PkNGQnVuZGxlVmVyc2lvbjwva2V5PgogIDxzdHJpbmc+MS4wPC9zdHJpbmc+CiAgPGtleT5NaW5pbXVtT1NWZXJzaW9uPC9rZXk+CiAgPHN0cmluZz4xMi4wPC9zdHJpbmc+CjwvZGljdD4KPC9wbGlzdD4K",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Flutter/Debug.xcconfig",
      "data":
          "I2luY2x1ZGU/ICJQb2RzL1RhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtUnVubmVyL1BvZHMtUnVubmVyLmRlYnVnLnhjY29uZmlnIgojaW5jbHVkZSAiR2VuZXJhdGVkLnhjY29uZmlnIgo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Flutter/Release.xcconfig",
      "data":
          "I2luY2x1ZGU/ICJQb2RzL1RhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtUnVubmVyL1BvZHMtUnVubmVyLnJlbGVhc2UueGNjb25maWciCiNpbmNsdWRlICJHZW5lcmF0ZWQueGNjb25maWciCg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.pbxproj",
      "data":
          "",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFdvcmtzcGFjZQogICB2ZXJzaW9uID0gIjEuMCI+CiAgIDxGaWxlUmVmCiAgICAgIGxvY2F0aW9uID0gInNlbGY6Ij4KICAgPC9GaWxlUmVmPgo8L1dvcmtzcGFjZT4K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+SURFRGlkQ29tcHV0ZU1hYzMyQml0V2FybmluZzwva2V5PgoJPHRydWUvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+UHJldmlld3NFbmFibGVkPC9rZXk+Cgk8ZmFsc2UvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFNjaGVtZQogICBMYXN0VXBncmFkZVZlcnNpb24gPSAiMTUxMCIKICAgdmVyc2lvbiA9ICIxLjMiPgogICA8QnVpbGRBY3Rpb24KICAgICAgcGFyYWxsZWxpemVCdWlsZGFibGVzID0gIllFUyIKICAgICAgYnVpbGRJbXBsaWNpdERlcGVuZGVuY2llcyA9ICJZRVMiPgogICAgICA8QnVpbGRBY3Rpb25FbnRyaWVzPgogICAgICAgICA8QnVpbGRBY3Rpb25FbnRyeQogICAgICAgICAgICBidWlsZEZvclRlc3RpbmcgPSAiWUVTIgogICAgICAgICAgICBidWlsZEZvclJ1bm5pbmcgPSAiWUVTIgogICAgICAgICAgICBidWlsZEZvclByb2ZpbGluZyA9ICJZRVMiCiAgICAgICAgICAgIGJ1aWxkRm9yQXJjaGl2aW5nID0gIllFUyIKICAgICAgICAgICAgYnVpbGRGb3JBbmFseXppbmcgPSAiWUVTIj4KICAgICAgICAgICAgPEJ1aWxkYWJsZVJlZmVyZW5jZQogICAgICAgICAgICAgICBCdWlsZGFibGVJZGVudGlmaWVyID0gInByaW1hcnkiCiAgICAgICAgICAgICAgIEJsdWVwcmludElkZW50aWZpZXIgPSAiOTdDMTQ2RUQxQ0Y5MDAwRjAwN0MxMTdEIgogICAgICAgICAgICAgICBCdWlsZGFibGVOYW1lID0gIlJ1bm5lci5hcHAiCiAgICAgICAgICAgICAgIEJsdWVwcmludE5hbWUgPSAiUnVubmVyIgogICAgICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgICAgIDwvQnVpbGRBY3Rpb25FbnRyeT4KICAgICAgPC9CdWlsZEFjdGlvbkVudHJpZXM+CiAgIDwvQnVpbGRBY3Rpb24+CiAgIDxUZXN0QWN0aW9uCiAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbiA9ICJEZWJ1ZyIKICAgICAgc2VsZWN0ZWREZWJ1Z2dlcklkZW50aWZpZXIgPSAiWGNvZGUuRGVidWdnZXJGb3VuZGF0aW9uLkRlYnVnZ2VyLkxMREIiCiAgICAgIHNlbGVjdGVkTGF1bmNoZXJJZGVudGlmaWVyID0gIlhjb2RlLkRlYnVnZ2VyRm91bmRhdGlvbi5MYXVuY2hlci5MTERCIgogICAgICBzaG91bGRVc2VMYXVuY2hTY2hlbWVBcmdzRW52ID0gIllFUyI+CiAgICAgIDxNYWNyb0V4cGFuc2lvbj4KICAgICAgICAgPEJ1aWxkYWJsZVJlZmVyZW5jZQogICAgICAgICAgICBCdWlsZGFibGVJZGVudGlmaWVyID0gInByaW1hcnkiCiAgICAgICAgICAgIEJsdWVwcmludElkZW50aWZpZXIgPSAiOTdDMTQ2RUQxQ0Y5MDAwRjAwN0MxMTdEIgogICAgICAgICAgICBCdWlsZGFibGVOYW1lID0gIlJ1bm5lci5hcHAiCiAgICAgICAgICAgIEJsdWVwcmludE5hbWUgPSAiUnVubmVyIgogICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgIDwvTWFjcm9FeHBhbnNpb24+CiAgICAgIDxUZXN0YWJsZXM+CiAgICAgICAgIDxUZXN0YWJsZVJlZmVyZW5jZQogICAgICAgICAgICBza2lwcGVkID0gIk5PIgogICAgICAgICAgICBwYXJhbGxlbGl6YWJsZSA9ICJZRVMiPgogICAgICAgICAgICA8QnVpbGRhYmxlUmVmZXJlbmNlCiAgICAgICAgICAgICAgIEJ1aWxkYWJsZUlkZW50aWZpZXIgPSAicHJpbWFyeSIKICAgICAgICAgICAgICAgQmx1ZXByaW50SWRlbnRpZmllciA9ICIzMzFDODA4MDI5NEE2M0E0MDAyNjNCRTUiCiAgICAgICAgICAgICAgIEJ1aWxkYWJsZU5hbWUgPSAiUnVubmVyVGVzdHMueGN0ZXN0IgogICAgICAgICAgICAgICBCbHVlcHJpbnROYW1lID0gIlJ1bm5lclRlc3RzIgogICAgICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgICAgIDwvVGVzdGFibGVSZWZlcmVuY2U+CiAgICAgIDwvVGVzdGFibGVzPgogICA8L1Rlc3RBY3Rpb24+CiAgIDxMYXVuY2hBY3Rpb24KICAgICAgYnVpbGRDb25maWd1cmF0aW9uID0gIkRlYnVnIgogICAgICBzZWxlY3RlZERlYnVnZ2VySWRlbnRpZmllciA9ICJYY29kZS5EZWJ1Z2dlckZvdW5kYXRpb24uRGVidWdnZXIuTExEQiIKICAgICAgc2VsZWN0ZWRMYXVuY2hlcklkZW50aWZpZXIgPSAiWGNvZGUuRGVidWdnZXJGb3VuZGF0aW9uLkxhdW5jaGVyLkxMREIiCiAgICAgIGxhdW5jaFN0eWxlID0gIjAiCiAgICAgIHVzZUN1c3RvbVdvcmtpbmdEaXJlY3RvcnkgPSAiTk8iCiAgICAgIGlnbm9yZXNQZXJzaXN0ZW50U3RhdGVPbkxhdW5jaCA9ICJOTyIKICAgICAgZGVidWdEb2N1bWVudFZlcnNpb25pbmcgPSAiWUVTIgogICAgICBkZWJ1Z1NlcnZpY2VFeHRlbnNpb24gPSAiaW50ZXJuYWwiCiAgICAgIGFsbG93TG9jYXRpb25TaW11bGF0aW9uID0gIllFUyI+CiAgICAgIDxCdWlsZGFibGVQcm9kdWN0UnVubmFibGUKICAgICAgICAgcnVubmFibGVEZWJ1Z2dpbmdNb2RlID0gIjAiPgogICAgICAgICA8QnVpbGRhYmxlUmVmZXJlbmNlCiAgICAgICAgICAgIEJ1aWxkYWJsZUlkZW50aWZpZXIgPSAicHJpbWFyeSIKICAgICAgICAgICAgQmx1ZXByaW50SWRlbnRpZmllciA9ICI5N0MxNDZFRDFDRjkwMDBGMDA3QzExN0QiCiAgICAgICAgICAgIEJ1aWxkYWJsZU5hbWUgPSAiUnVubmVyLmFwcCIKICAgICAgICAgICAgQmx1ZXByaW50TmFtZSA9ICJSdW5uZXIiCiAgICAgICAgICAgIFJlZmVyZW5jZWRDb250YWluZXIgPSAiY29udGFpbmVyOlJ1bm5lci54Y29kZXByb2oiPgogICAgICAgICA8L0J1aWxkYWJsZVJlZmVyZW5jZT4KICAgICAgPC9CdWlsZGFibGVQcm9kdWN0UnVubmFibGU+CiAgIDwvTGF1bmNoQWN0aW9uPgogICA8UHJvZmlsZUFjdGlvbgogICAgICBidWlsZENvbmZpZ3VyYXRpb24gPSAiUHJvZmlsZSIKICAgICAgc2hvdWxkVXNlTGF1bmNoU2NoZW1lQXJnc0VudiA9ICJZRVMiCiAgICAgIHNhdmVkVG9vbElkZW50aWZpZXIgPSAiIgogICAgICB1c2VDdXN0b21Xb3JraW5nRGlyZWN0b3J5ID0gIk5PIgogICAgICBkZWJ1Z0RvY3VtZW50VmVyc2lvbmluZyA9ICJZRVMiPgogICAgICA8QnVpbGRhYmxlUHJvZHVjdFJ1bm5hYmxlCiAgICAgICAgIHJ1bm5hYmxlRGVidWdnaW5nTW9kZSA9ICIwIj4KICAgICAgICAgPEJ1aWxkYWJsZVJlZmVyZW5jZQogICAgICAgICAgICBCdWlsZGFibGVJZGVudGlmaWVyID0gInByaW1hcnkiCiAgICAgICAgICAgIEJsdWVwcmludElkZW50aWZpZXIgPSAiOTdDMTQ2RUQxQ0Y5MDAwRjAwN0MxMTdEIgogICAgICAgICAgICBCdWlsZGFibGVOYW1lID0gIlJ1bm5lci5hcHAiCiAgICAgICAgICAgIEJsdWVwcmludE5hbWUgPSAiUnVubmVyIgogICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgIDwvQnVpbGRhYmxlUHJvZHVjdFJ1bm5hYmxlPgogICA8L1Byb2ZpbGVBY3Rpb24+CiAgIDxBbmFseXplQWN0aW9uCiAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbiA9ICJEZWJ1ZyI+CiAgIDwvQW5hbHl6ZUFjdGlvbj4KICAgPEFyY2hpdmVBY3Rpb24KICAgICAgYnVpbGRDb25maWd1cmF0aW9uID0gIlJlbGVhc2UiCiAgICAgIHJldmVhbEFyY2hpdmVJbk9yZ2FuaXplciA9ICJZRVMiPgogICA8L0FyY2hpdmVBY3Rpb24+CjwvU2NoZW1lPgo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcworkspace/contents.xcworkspacedata",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFdvcmtzcGFjZQogICB2ZXJzaW9uID0gIjEuMCI+CiAgIDxGaWxlUmVmCiAgICAgIGxvY2F0aW9uID0gImdyb3VwOlJ1bm5lci54Y29kZXByb2oiPgogICA8L0ZpbGVSZWY+CiAgIDxGaWxlUmVmCiAgICAgIGxvY2F0aW9uID0gImdyb3VwOlBvZHMvUG9kcy54Y29kZXByb2oiPgogICA8L0ZpbGVSZWY+CjwvV29ya3NwYWNlPgo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+SURFRGlkQ29tcHV0ZU1hYzMyQml0V2FybmluZzwva2V5PgoJPHRydWUvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+UHJldmlld3NFbmFibGVkPC9rZXk+Cgk8ZmFsc2UvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Runner/AppDelegate.swift",
      "data":
          "aW1wb3J0IEZsdXR0ZXIKaW1wb3J0IFVJS2l0CgpAbWFpbgpAb2JqYyBjbGFzcyBBcHBEZWxlZ2F0ZTogRmx1dHRlckFwcERlbGVnYXRlIHsKICBvdmVycmlkZSBmdW5jIGFwcGxpY2F0aW9uKAogICAgXyBhcHBsaWNhdGlvbjogVUlBcHBsaWNhdGlvbiwKICAgIGRpZEZpbmlzaExhdW5jaGluZ1dpdGhPcHRpb25zIGxhdW5jaE9wdGlvbnM6IFtVSUFwcGxpY2F0aW9uLkxhdW5jaE9wdGlvbnNLZXk6IEFueV0/CiAgKSAtPiBCb29sIHsKICAgIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQucmVnaXN0ZXIod2l0aDogc2VsZikKICAgIHJldHVybiBzdXBlci5hcHBsaWNhdGlvbihhcHBsaWNhdGlvbiwgZGlkRmluaXNoTGF1bmNoaW5nV2l0aE9wdGlvbnM6IGxhdW5jaE9wdGlvbnMpCiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json",
      "data":
          "ewogICJpbWFnZXMiIDogWwogICAgewogICAgICAic2l6ZSIgOiAiMjB4MjAiLAogICAgICAiaWRpb20iIDogImlwaG9uZSIsCiAgICAgICJmaWxlbmFtZSIgOiAiSWNvbi1BcHAtMjB4MjBAMngucG5nIiwKICAgICAgInNjYWxlIiA6ICIyeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICIyMHgyMCIsCiAgICAgICJpZGlvbSIgOiAiaXBob25lIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC0yMHgyMEAzeC5wbmciLAogICAgICAic2NhbGUiIDogIjN4IgogICAgfSwKICAgIHsKICAgICAgInNpemUiIDogIjI5eDI5IiwKICAgICAgImlkaW9tIiA6ICJpcGhvbmUiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTI5eDI5QDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjl4MjkiLAogICAgICAiaWRpb20iIDogImlwaG9uZSIsCiAgICAgICJmaWxlbmFtZSIgOiAiSWNvbi1BcHAtMjl4MjlAMngucG5nIiwKICAgICAgInNjYWxlIiA6ICIyeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICIyOXgyOSIsCiAgICAgICJpZGlvbSIgOiAiaXBob25lIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC0yOXgyOUAzeC5wbmciLAogICAgICAic2NhbGUiIDogIjN4IgogICAgfSwKICAgIHsKICAgICAgInNpemUiIDogIjQweDQwIiwKICAgICAgImlkaW9tIiA6ICJpcGhvbmUiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTQweDQwQDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNDB4NDAiLAogICAgICAiaWRpb20iIDogImlwaG9uZSIsCiAgICAgICJmaWxlbmFtZSIgOiAiSWNvbi1BcHAtNDB4NDBAM3gucG5nIiwKICAgICAgInNjYWxlIiA6ICIzeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICI2MHg2MCIsCiAgICAgICJpZGlvbSIgOiAiaXBob25lIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC02MHg2MEAyeC5wbmciLAogICAgICAic2NhbGUiIDogIjJ4IgogICAgfSwKICAgIHsKICAgICAgInNpemUiIDogIjYweDYwIiwKICAgICAgImlkaW9tIiA6ICJpcGhvbmUiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTYweDYwQDN4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiM3giCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjB4MjAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTIweDIwQDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjB4MjAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTIweDIwQDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjl4MjkiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTI5eDI5QDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjl4MjkiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTI5eDI5QDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNDB4NDAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTQweDQwQDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNDB4NDAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTQweDQwQDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNzZ4NzYiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTc2eDc2QDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNzZ4NzYiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTc2eDc2QDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiODMuNXg4My41IiwKICAgICAgImlkaW9tIiA6ICJpcGFkIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC04My41eDgzLjVAMngucG5nIiwKICAgICAgInNjYWxlIiA6ICIyeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICIxMDI0eDEwMjQiLAogICAgICAiaWRpb20iIDogImlvcy1tYXJrZXRpbmciLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTEwMjR4MTAyNEAxeC5wbmciLAogICAgICAic2NhbGUiIDogIjF4IgogICAgfQogIF0sCiAgImluZm8iIDogewogICAgInZlcnNpb24iIDogMSwKICAgICJhdXRob3IiIDogInhjb2RlIgogIH0KfQo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png",
      "data":
          "",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAbFBMVEX///9Uxfj6/v/3/P8BV5v0+/+O2frZ8v2Y3fuL2PqH1vpWj72T2/sptva/1Obv+v7g9f73+vy+6fyE1frv9fl10PlXx/g8vfcos/Po9/7R7/3G7P3x9vpozPlNwvjA1uZLm8tbmsAQbaUBUpIS2jkXAAAAdklEQVQY052QyQ6DMAwFMTFt05Cw7zv8/z8SXxAOF2COo5GebO8N4msJuPNDAPg77kOOhwF10uNQlwnekZPi7kb8s0SHlLQRDwBlek4z0YzWdewYv610BbZjFFrXc+LIqKhXVJd3LBuiyh2bKMRr20/GGEofsAP1wASFbdBGzgAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAilBMVEX///9UxfgBV5sptvbw+v5uzvnn9/7R7/100Pn3/f9hyvny+//s+f5rzfmwy+B90/re9P7z+//t9PlQxPj8/v9cyPgxufbg6/Mmr+0yd64vda2Q2fqD1fri7PQ1erAkbqgBSIHl9v7M7v3X7/ud3vtDv/dJvPEwtPHa5vDW5O8NbasJXJQLWYkLV4ZWqLjRAAAAx0lEQVQ4y+2QSRKCMBQFMwEJGokICjI4z3r/62mmckElcU3Z6673qz8YPyQx7AJeBDUR8XrTzHqx15tT6zH/nvW4f4/Yu5T81sH/Hc6OYmJg/g7WpBouBmIcfTvYEWrSxJGiO4rGeKXaG25S3TFvF8bbu7K56sjwUpmpcD9IdlCMlVkmwAdrMVam7PCRYc3lAPwIqLzqXq8CZnyS3gOhdR4yIa5eW4RQHzLF+Sm9z2boer5BmpoFzGtvzGBRZzbDRd3McAOj5A2X+gue1atu9QAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAMAAAANIilAAAAAhFBMVEX///9UxfgptvYBV5tXxvhZx/jt+f6k4Pvj9v6U2/vd8/5bk7/q+P7h9f5cyPjl9/7Y8v0JXJ5gyfkvuPYCT4ne9P7T4u4MXp/7/f9Ow/jr8vfc6PEBVJUDPWb0+//R7/3M7v1RxPji7PQlqufo7/Ynr+4mq+hnm8Nck78KV5EGS30BQnYYEX8cAAAA+UlEQVRIx+3T2Q6CMBBA0VoWsVI2QXBBBXf9//+zBkKHmJQMfSBE7iPJSdspJVNT3+w5LMNZbyYzmYblOGtB66Os27KOhvU19sw1LBvojhKc1ZnzCG37vMkI73e8bzBZgOYZ6g0G8FukOIfzO+fAU1oYV1rPJcp4+79KWuc4kI4cOGdezEAZ6YybjfUp3TTUkuuqtFVbRqnUka1EUlf2uKJSRy7BdBK20ZGPtnUFdl2xZ5lpE1SMgp5b0lvHRnhB6qDe+DXeG0a666VvL4H7aGHP+VvgPpoJm8dGVVpi1xarNoXYma8FGkyHUJcaGj/z9WMpu2dk6v/6ABOJELToA9jjAAAAAElFTkSuQmCC",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAMAAABhTZc9AAAAXVBMVEX///9UxfgptvYBV5v7/v9ly/n4/f/a8/6x5fyt4/xcyPggbKel4fud3vtuzvm35/yU2/sBVpnW8f31+ftCv/dBvvc2uveGu9l6p8t5p8ochsIVfbgWdagBVJYBSYGC2+klAAAAeElEQVQoz83O2Q6EMAhAUaZlGB33fff/P9NSExMT6KveJ5ITAvCS4j+Xo4wf7ksiRiEsTsTQZvDmMw/Rz3fD+sLcTyncShlJRC5mxFZCLkLA3hiHGUhRZ1wKQma4GUGudLhUic7rXlmVh826kkbhyXomhceTER7tAGerBEwLLLdsAAAAAElFTkSuQmCC",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAADoAAAA6CAMAAADWZboaAAAAllBMVEX///9UxfgBV5sptvae3vvC6/1ozPkEWZ3J7f215vyv5PyZ3ftJwvjW8f3P7/2V2/sBU5PG7P276Pzi9f7T8P2N2fosuPbN3uy70uTa8/645/yu4/yn4fui4PuI1/pYxvi91OW1zuJ8qMpyosgYeqwBTosAQXTq+P666PzT4u5zw+l1pMkYh8IZhb4YgbgXeKgBRHoAMVcbTd2OAAAA80lEQVRIx+3S5w6CMBSG4XrqQKXiwL1AEfe6/5tThvREIuYAEaO8P0metP0Cy/vLNmWUTpG1Aqr0GVnFskGR7dhylME7x1i2MlhIIZ2ZwUK1dBbSv32hcToLKbH/eJFwoU4RJSgLCfypzl42DcnGPEriJk+3FVhqERBZ3Xtn4Z3EFdF/O1RDt422wTsVzlWCdLbyZavHpZUyso637V0GVmOEhtxPpUrBubR1ilz3uGzHSHWlPMCAZrWHPDah0o917mnVBIAtzc4cadkuBYNsz9eLK6FiEu9s2Q70LHGrBcioW+0BRbRLfO4ggTUTvNdgeb/fDV2QDXLbhsKaAAAAAElFTkSuQmCC",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAFcAAABXCAMAAABGFileAAAAt1BMVEX///9UxfgptvYBV5v7/v/5/f9XxvhVxfh/1Pp80/rw+v70+PscaaUDWZz2/P/z+/+a3fuK1/r9/v+76Pyv5Px50vkBVpqH1vpSxPiU2vsBUI2o4vuE1vpkmcKz5vxNirkBU5Wg3/uO2fo4u/cuuPYXeasBS4UBQHK45/w6vPd6p8t1pMkZh8JflcDy+v43u/dxosdVj7wYgroBVZgAM1r0+//b8/6i4PuKwt8caaYCSH4ANF0BMFMltTBwAAABxElEQVRYw+3Ua1OCQBTGcZRdFzSuBghaqXlLsyy71/f/XIEFGxxqsD022uzzlpk/vxmGo8jJyckhra2BdYlwlZ42aoWxXlNcewyytd6VuHYGtdputIElrm1DrS6udUu0jriWlGg9cS2BWnZgWoRPBrU1D+F3QNHClWmtvdXOoFa3dnIYAwQtzNY0a2/PeIm215RnXJ7xg9Pu6oxnWkLhEA6j+6iDtV3hM06G4BkLq3EfftLa8J02Vaqty747467DQDZ0lYozB6z8jBObQS1RKo/kxFqmHTaglm51cgYMnnFqgyqzt71lmTjLEp2JaLk4f8ZNrX7RyVcbQFtVzM848Ub1+nU+bJu/uhEDxvQv2nixWESbtrpOptVHSTYRC2g5OX2DnjS5mGuFRrRYm+68w7ViM71NkIeRtTyMoSWZlodDRXymA7qXy5aCsGExG/k3GOH7oJBd+8YJuvh20vd9VT3DCJsBz75Emy6OmISf2fF0EvXXvhqHMcXju6SbZLHENEyyb6/T6KOKJqbBRptW8cTmU9TnVUzxSgVDEbfmBi9iit2V8XdilFuhLKB4iSKGYQPnbM6fj4pbUIyPR+AUOTm5f7l3AYooKpScN7UAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAilBMVEX///9UxfgBV5sptvbw+v5uzvnn9/7R7/100Pn3/f9hyvny+//s+f5rzfmwy+B90/re9P7z+//t9PlQxPj8/v9cyPgxufbg6/Mmr+0yd64vda2Q2fqD1fri7PQ1erAkbqgBSIHl9v7M7v3X7/ud3vtDv/dJvPEwtPHa5vDW5O8NbasJXJQLWYkLV4ZWqLjRAAAAx0lEQVQ4y+2QSRKCMBQFMwEJGokICjI4z3r/62mmckElcU3Z6673qz8YPyQx7AJeBDUR8XrTzHqx15tT6zH/nvW4f4/Yu5T81sH/Hc6OYmJg/g7WpBouBmIcfTvYEWrSxJGiO4rGeKXaG25S3TFvF8bbu7K56sjwUpmpcD9IdlCMlVkmwAdrMVam7PCRYc3lAPwIqLzqXq8CZnyS3gOhdR4yIa5eW4RQHzLF+Sm9z2boer5BmpoFzGtvzGBRZzbDRd3McAOj5A2X+gue1atu9QAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAqFBMVEX///9UxfgptvYBV5v9/v9Wxvi66PxYx/h90/r8/v/X8v0aaKWz5fwLXp/2/P/A6vxcyPjU8P3J7f0BV5qjwttGwPcqt/bq+P7F7P110Plyz/mwy+Co4fsgnNcBVZbw+//l9/5hyfguuPYDVZMBT4wDOF+w5PyB1Pp40floy/m81OWYutQIW50DTYWG1vokot8hls4BR34CPWv4/f/S4e2VudUjbqgBQ3fb78qRAAABXUlEQVRYw+2W2VaDMBRFU4iUVIEqg9oJS6FVO1jn//8zo6xlILcuKYeHPmR/wF7nZr+EGQyGU2fgaqzuIN9Nv1fn7IIjvkvicxjC1ZD4BOSj9zLoXrIv4KaH6WF6mB6mh+lxOj1eBzop1MN3exojH+khdrrv/pr9j9P/o0e6Ivua+BgPDvcQxHfrs2Y4h3r4O+Jr/pUL+lAPCndID7dFD1pG9Zgn8dE9aBnVY25ZVtyqh8Kp9HiwJEncqoci+O0xlLrSqHoACLmvbpQ9AFL5fnXjCPGVPRQx7dEc1aO6UfZACDKrztMjh4R8ktR809kmYhiTrLpvMQu9scA2Liv7toswtL0xulH58m+h7UUcMy6z0vfynMuTbWnspMy+kMIfnzR2UGZaFJ+51JXgZfbFVq5TwGXWpU0Bl4k2NR9eRqxtshG9mmwEy4hIE+Jl3u3Oy5xrfLwxDE5gBoOhFV/mACDrcKxbuwAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAA51BMVEX///9UxfgAV5sptvb8/v9Yxvj7/f9Jwff+/v9GwPdVxfj5/f5yz/kAVZmQ2fpMwvcGW531+/5QxPguuPfR4OwASZImtPRSjLr7/P3S8P2V2/piyfj2/P70+v4twf8qtvYcsfVvzvk2uvYBU5UasfU2eq8AS5SU2vp30fnS7/130PliyvgWg70BTIcAPnAYeaoBT40BRn4BMVnv+PwAQXgAHzuM2PoZgLYQc6UBUZAASoMAN2QAKk3U8P3P7v3K7Pyd3/yC1Plmy/hjyvg3u/cdsvUasPTV4+7R4e3F2ehahqwIX6M2bZm1KkIjAAACMklEQVRo3u3Ya1PaUBCA4TWeJCdACgHRWEWkqVpKoQpqvfV+v/z/39M9OJ1tm8VWYM+0zr4f8iEwPLPJTpgJaJqmadpdzM4MJLvx5wVpA5Bl2Xa2jf18wJPVSZVkAfcgfLvlGgy2Bu7wozeV1wQLuPeSJttK0svc5y4ZN6xwhXGtKuyucKmrrrrqqquuujBNXXXVVVddddVV98661szMCro3z20l3ezFZr+/+Vt9PPX8ZQesoFtL6mzNd6fWWjm3F89435Tcv/2ltmBO4792+e8lB2AN3Bqu1uJwMRfnNfOslnkch4u5bt555AjlhVwLMKf8KA593F9e9j0vyT72ipdZN4LOMveK3zB+3rjLu/TcWHxmbt76bvdBRWhekjm3tbqOsoxLV/sX11y7q12SS3u1LLlenhdzssC8JJtarzwvyUKuo7JOaV6SBVySGZdkKRezlnVJpr0SqOSSzP8vLPVmT92y7NklWdidJO/R5eTWK4gsCGWh09xl4fWdJ19EFoueJJWHLdY9am+41RMK5Qhlzk0bHmVyj9PAp0xukaZp4Ekm99nosCgQ9iSTezk8n8I+ZXSfjo+G1xP7lNG9GiF87mCPMronl6Pji8PCsf5k516NR8PCiR7lDztnJ8i6Yb3KeXg2vkgbDbS8yhHk3/a/BrhU/mWz16Z5Pco55Hv7jVRllSkBOfgHZQNSOblI2YL2Rk4vJSTktU9rbB8/T8TgP78oF8xGM7OgaZqmaf9T3wGGRF3tQNvrKAAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAA51BMVEX///9UxfgAV5sptvb8/v9Yxvj7/f9Jwff+/v9GwPdVxfj5/f5yz/kAVZmQ2fpMwvcGW531+/5QxPguuPfR4OwASZImtPRSjLr7/P3S8P2V2/piyfj2/P70+v4twf8qtvYcsfVvzvk2uvYBU5UasfU2eq8AS5SU2vp30fnS7/130PliyvgWg70BTIcAPnAYeaoBT40BRn4BMVnv+PwAQXgAHzuM2PoZgLYQc6UBUZAASoMAN2QAKk3U8P3P7v3K7Pyd3/yC1Plmy/hjyvg3u/cdsvUasPTV4+7R4e3F2ehahqwIX6M2bZm1KkIjAAACMklEQVRo3u3Ya1PaUBCA4TWeJCdACgHRWEWkqVpKoQpqvfV+v/z/39M9OJ1tm8VWYM+0zr4f8iEwPLPJTpgJaJqmadpdzM4MJLvx5wVpA5Bl2Xa2jf18wJPVSZVkAfcgfLvlGgy2Bu7wozeV1wQLuPeSJttK0svc5y4ZN6xwhXGtKuyucKmrrrrqqquuujBNXXXVVVddddVV98661szMCro3z20l3ezFZr+/+Vt9PPX8ZQesoFtL6mzNd6fWWjm3F89435Tcv/2ltmBO4792+e8lB2AN3Bqu1uJwMRfnNfOslnkch4u5bt555AjlhVwLMKf8KA593F9e9j0vyT72ipdZN4LOMveK3zB+3rjLu/TcWHxmbt76bvdBRWhekjm3tbqOsoxLV/sX11y7q12SS3u1LLlenhdzssC8JJtarzwvyUKuo7JOaV6SBVySGZdkKRezlnVJpr0SqOSSzP8vLPVmT92y7NklWdidJO/R5eTWK4gsCGWh09xl4fWdJ19EFoueJJWHLdY9am+41RMK5Qhlzk0bHmVyj9PAp0xukaZp4Ekm99nosCgQ9iSTezk8n8I+ZXSfjo+G1xP7lNG9GiF87mCPMronl6Pji8PCsf5k516NR8PCiR7lDztnJ8i6Yb3KeXg2vkgbDbS8yhHk3/a/BrhU/mWz16Z5Pco55Hv7jVRllSkBOfgHZQNSOblI2YL2Rk4vJSTktU9rbB8/T8TgP78oF8xGM7OgaZqmaf9T3wGGRF3tQNvrKAAAAABJRU5ErkJggg==",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAMAAAAKE/YAAAABDlBMVEX///9UxfgptvYBV5tVxfj9/v/6/f9SxPhYxvj7/v/8/f5FwPf+//+f3voAVppKwvcDWZxMwvdPw/gqtvYATJQXsPb7/P1Hhbaq4vtyz/kAUZdHwPfM7fwAU5kAVZjS8P0HW52A0/kos/IosO8qvP4st/ao4fua3Pr4+/3K7Px/qszV8f2sxt2oxNwBVJUASZKT2vott/YBUI8BTYoCSoMALlPP7vzO7vzO7fyQ2foBUpIAQnsCQXMJQWMANWKqxdwKXJEDSX0AO2wAWqCl4PsAHTrk9v6r4vt10PmO1/ipxdwKV4lqzPk4vPcut/Y+gLMAIkMvv//E6vyU2/p70fnc5vAlquaZutaHr896nr70mOsBAAAFN0lEQVR42u3beXMSMRgG8ITdkN0lXK6igsUTxatqSz3xPlrv+/r+X8Q3ySLqspu0ssMbJs8f7fRg5jfvhORpKMTHx8fHx8fHx8fHx8fHx8cHReqWIXgiYmIbRpCExeTks91jxuzuNl+QmKAIS8jFcNBtm9Ltvv3MBI5Rg/kE7YZchXJK5QcVrj/wLGGjiWV5SDPvRqExESIzI7f5oYgag2nOjNwCMzeScZlvrqmZozInVmuDR8qcEAxhMbltYaYRxWIWaq+zmjMdNAmKgxDM9f2YMTQlbaZdo5kiM18EM7XY65w1C7LqaHPo1Jxnvc6qbyDZN8AcW5oxnSlyf3bN7G4XpWvY61w0u9hFKZ4uKmy7KEfVRevOdlHqWK+Dc9C5/gy9zmavw2V2rte5aPZdtLLku6hzvc7VLrqOvc6b/ytine9FcXVRu3tRirCLutbrTtBD63ov6qIZUa9zzizc7KKJ76Jl8V3UpY6ke92a3uW6eC/qYheVfQOJ2b9GbwiK1+hFbBdGdDB0JGaNYSs1CzJPDN+wSTIeZ49b/b0ofNV8s3fcmL03e/p/TRHci8JXFxptc7qN9kX1UAT3ook00yg0JeLRZcLE8szswK/R6zmHofncP0Qvk3h5ZiHIp4N2UWZnptGSzfIJfb4RhUbywc1cm8kyw0A9oCG3MefXRmQx5264ZDMklmpedhjyYjOlFuaT+bVRvTrXRe3NPOpG2lyB+hmo93MvWreeM5jrFZiBwJSaW3ZRoc1haGlmRKUadchtep29mVdqBoaQe0iewdGaNUSpufleVJvhV23XhiBVRalhfMZep8085Cues06s1Rbm028jG3NoMFek1l00Zz5SG0TceHZrc+VhWs2Le502p2mtEdn0OoO5CvXCs1uba6DmB+2iVanLzCMwp6VqbuiilagpqMMi8w0Ay5SskAq6qFVTNZv1rKvvovadj0YF5neKWzZrXlEXNavbBXvd3Fy4rqvqouazsXnh771OaPMNsObV5l5XfTSXsQVmYJar+arMSpw3671ukZojmLNi5sz6TClQozD/k7EyjwBZoF792lDJdyQwF6vRzXluLlHrXueKOVMjNKdgNqh1r8Nhjo1mrR5wDubVv4svq09f1JliUJ+ptV+QBIeZAOPlkdSIPnPu7KOHpIdjcajlcR2ehmbzvcNXUKnvHKndMJqDYR/UGF58lkm02mAeDjsb/YdY1FA8tNpgbrU6w/4rUCN4I7BSC6UuMW9KdOvURv8qGfdQqUcF5tfTzU0wS3V/wwW1ND+5e1ejA63u9QiGZOo0XWje2pqhtRrVs/E6qHPmxw+2t3+jkamJVo/SnHkyUWipDvCp43/VYJ7u3Hv8J1qr+9hOdFDPzfd3phl6U6O1egOtWpo/PHgyBfT2Fpglea6+QhJU6jSdmZ/vAPreBMxKPFd3EKpHM7NET7aGEopeXRtl5p0nk7tBRznzamxN9cxHtTam28HTDjwBF6sxNdW6/Fvm2/0P00nr6dNAixepcTXVOCEvHz8IQDwEcmGypoqlPY0F+dkPgByUJmuqWNrTmJBL11odA1qf6FhmzciYkUuHzWpU/RrUAmYdlKrRtSdQE6kOHFP3pLrjllrsQ91/hedsTExqlE21XI21qUp1fg/B3vkWqfF3PqVuWaiHmGbdI/JsPAWlulOW4FQL1AyV2ibXrn3HskJUe/rx/qhF3h/9SnBUPlDbj2+M5I11BBxJT8w04u+fZJ+EkD9gWN4MmLESq6DZPXx8fHx8fHx8fHx8fHx8fPL5Bfrqzbn3nimqAAAAAElFTkSuQmCC",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAEwAAABMCAMAAADwSaEZAAAA3lBMVEX///9Uxfj8/v9YxvgptvYBV5v7/f6B1Pn5/f/4+/1Pw/hhyfjo9/1WxvhGwPcGWp1LwvdKwfdFv/fq+P7y+v7V8v5cx/ioxdwAVplrzPkut/YATpVUxPdckr4CWJ0ASJLc8/0XsPUAUZX+/v/R7/05u/Yrv/920PkwuPYhs/YktPUosvLK3OoBUI4CR37u+P0kntcstfMjot4ASZMBO2gBMFP1+/7Y8f0ku/180vlmy/gBTYnj9f3M7fzH6/zh6/LV4+44r+clpODI1N6gv9mZu9ZelL9gkbtOibgAQIwqVJv8AAAB10lEQVRYw+3XaVPiQBCA4WZiZnM4CYnIIpvNuonXHlwi3vft//9DtvHoHIrFDJZTJW/BF6p4qruBD8CsWVrFSvFUwYJK0hqH3spivp2jHjBZa34/cHJF4Z6NmKTlBqJGGd43ULGMvBUqWfWC5WlqhVrcy9L4XoGG93plR01vr/adCDT9Tuh4L/7h9+Ia7vgBvyFWLlWwoFIqeS98sPmFQoeNdzT21r042Huimct11hvAxlvLriOqO6JlrYeRQ9XC/QWy3sB2IsKKlmcIqllfornGjCbqonovtArLB2hZ73+YqDlG6V5yFmbBsoEa7YivcBmLNEFzWbDtek0pC+PZ3ciyo9+rZYuPJ8qzeTlr4++qmNwiLcpbc3OoTb4jbbr9YPEnK9PkLIzRXG2kHjVJC6kUn2RlWi3yyJp4uobIdiRtqSdpQQouWtRg96wHtvRfkuONP+0X69/aeecGgEtrK23Unq3NTjL8Ka9ZpKF10PH9X+paZnUPWi1zChpa/a1uJ5mKNljrjxBDS10b7PZHo27SMrMUtUXc0YxjhNQ1Gy7M2Mcdp6T99xO/ZX4VzYzNOAtvOLwGYAra8Eeu5O6WK2inl98LXZ1IL1p9I60po9mlGMya9RndAwL/PbOqVh2hAAAAAElFTkSuQmCC",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAABCFBMVEX///9UxfgptvYBV5tTxfj6/f9Yxvj8/v/9/v7+//8AVppWxfhLwvfn9v1hyfhJwfee3fr8/f5Fv/f7/P0HW50ASZIEWpzk9v4otfYAS5Sy5fy35vxGwPdXj7z5+/07fLEtt/Zdx/gXsPYltPUBVZd+0/kjtPYotPRPw/dAgLPR7/wrvPwyufYBUpMBUI8uuPYBSYIAQ3rG6/zG6vwzufYRbKIAPnQBNWAQWYEALlIrvP7G6/sBTosAOmrc8/296PxlyvgBTIj3+fv9+Pdil8EQZZcQX4wAHTsAGzZZzv/u+f7I6/yo4fuN2Pp50fno7/WUt9RTjbo4i7oqcao/c58AP4wAVYcAIUP7SkpYAAADfUlEQVR42u2X61IaQRCFe2FhdgRjFlAxEkUxBqMgxETEeNck5n5P3v9NMiNUWtnMEIo402p/Vf6xoPiqz6G3AYZhGIZhGIZhiCIzwxDgAylhKBLcIwAOH1iZf78F7hES7hembOQLuQNwHqaIlFfOQpDNH01CBI6JpPYKzITZ/L1JyIBL0Csk56VyrGQJeul5EfQSVHMk6iW4X9eRYwzOwN5XCPaL6v4SEc3vI9U9EVHt183eE+z1x4vonqDaL6CbI0kvos8hqvuL72i+owfgO5r3F9/RfEfbuUM5UvUiuSeo9ovv6FvxHKK6v/iOvrN3tBiKnztagANENPKdI+DtrJXJ2YPIQ78y8CQb5gIz2SA/D8LdnkCvMB+EZoJwSnlJGAcJI3vFyques7wj95+8pkafVz1r8wrG9wIB8cdKdkSv4Dq90AweJcysXvYcsV/jm0XKjFS/+mSSZvYcc9eQo8Us/Mcc3XhhmoVsSKhfV83G3xMGr7HTpLC/DD2zer2rO+iXYWvYvJ7WqrkgdNOvpJnZa6u8mtpQH++mX8k0jfMqr1ZTtWfKzFGOyZ4ZvcqpVA1n5soLtwbe0QkvNHPQr0TPlv7WL+2lwTQd9GsgzcLRoNcL9EIzRznizDIfDoxeaOYsRzTTf2Yv7Jk7L/wla+pXcmaYowOk1Qtn5swLSe4Jgxnm6BScl8EM94QDzL1P9izwkqMUKscaeiVnFtQrPuYl4DDVm5fR7M2hBy8p4Wh5w+L1uLr69RROwDkCMveWN81eqfXn24sLsADOERAtLVfLZq/2zPRi0YdZfGFm9pqYKGmzIjgno802TV4rE8rM08zQLNmvFSXm10z3LOnVUGL+zQa9Xu43mz0zQj3TXp3jvb5YOk2lZ8rrVad1SSxNo2faq9tutXpi2sx3mtW+1+7Or/3tduv40sQIbA3t9bqjxfYavXkpvKe52fPqdjvbraZWQrxvjd2d8253v9XQLlfUPPdsfee8026mZ9I6RMR3z+TSz46y0lpohHgzK8Lp97kSNl5BpGdFkGvTpataNHpWhEiZpSdMYv7SXLgw62dJqmc9MyVGsGe2mfl7bkoo0k/zxpl53BpEzaSaWazMZiyU5tbAsRmmOWej8ePbJ4jBGWh2cvbloY2ztc8QgXviEV7jlrgYDwE8ISONjOQA6l99gGEYhmEYhmFuG78B9YuimOp6mGQAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAKcAAACnCAMAAABDyLzeAAAA81BMVEX///9UxfgptvYBV5tTxPj9/v/8/f76/f9Yxvj7/v9XxvhOw/dEv/cASpMBVpmK1/pQw/gEWp3Q7vwDWJz+///u+f7F6/xKwfdeyPgYsPVyocfn9v1iyviGrc5GwPcuuPby+v7R7/yJ1vqu4/s/vfcrvv8nsvKa3PoltPUBRn50z/kBVJZOw/iIr88BUpMCTokDNFcBUI8ko94DS4T1+/0BQnYBPm8lp+MCOWRxocYBLU/h9P0AIUD0+/7q+P4asfYlqOYATJW+6Px41fye3fpcyPiZ2PVuzfhOwvjc5vATm9ycvdeKsNCErc9pnMNmmcIAPYujd3zFAAAEUklEQVR42u3ca1MTMRQG4BM22d1ssdp2tV4BC15WkBZrawVF8X7X//9rTLcrh5mUZHE6exImr6Mjw5dnkryHBGaAkJCQkJCQkJCQkJCQkJAqMqmRHKgjoVYEkEZIOHp3w5p3x7TQPIFu2m/9y15rb54v6m/5UZVrO4OE1CkkdFmLcXOy9QGQM3krZcZk6cZVYmYM93kr4yYlZ+m6Ykqgi0jsTOYEs1uTGUPtUDIToIuI501PLcxssZo5NB9k8hrMAd3ZxKan1qYPqM4mMv2oUBhIq2XaK+TLQKJuutSbriclZ3oykBJfBlL3cg0k0qYnNZrOs5JJffXYS5k5GfnZrNF05kDTvbl6+PM13ZeBxC7PQKKtUK2LHPmme3L1uHQDyYGm+7GaXryFajDdqJAvbyHm+g0pvIUgvIXOuXoMvBlI8sJPtvAWcrbpnjD9uXpYmNyPgeTPDemqN98tdn0gcScqdJl/LpTLGhHNvoW43vSaAtFo0/UfVEsQ163ZurMF+aqa3v2ft1ACW+/Tm5bcZZ+PQVJ+cyaB10/W+TVjWnzj49GKmOKCFcLVfLJhfen1795ZDRME3Gd1mNqmP1dMbt6FkpmshCnhGDe97lsob5wJeQ7bfc74xQZSxWTGrIiJw217Q0GtbyGdaXZmq2JikRQ04+YK6UxmZHJkrgyanw/l5ze9ibOpr2ifLYVqzLxk1quQBGgAikxJ1XQdKtXWM8Z1pt7012XTCZhYJsbNVw8cSM003Q5FptRWM+MNN12Hsoyb3kKqQtc2PzIapg7Vm47MW2s7GcHZ1FrPFVRvOjI31x7vZJwTMfUV1edmxVxDKAkToYwvuXogcwGlZGLrM6yQxkRoAwPJCMW3kMZEaONN1y8lfb3pyEQop9l0hH4wryZCG7h6GKDVP3rTMdj65lcTYSIX5tVEKAETY2cilICJsTD11mcuM0/nKHecWbXe7U0/hTrAlDpTh6br1EwBR1wxzXm48/4IJFAmgW0788G32yBjII2AD7dszLfD4icIWqgAeHRrbdPMHLev3COHCiNUMcfjdhS5AX1zCtWYL8ZFu72AxvjOp4iUakVNzF0F7VVQyiBUZxbF7pwZuQydMyf7+6VTQR04o7Isk86cTA8OFk5HoCLH1iNzOh0OldMpqKigyHw2mxXjU6czUFmNJ2SOJmecJTRyrUyKOTqclk4FrZiRI62PFRSZr2bKWaj1LJXuQHNsfckcjWbTYrh/BunOGV2UqWQeHo4mw905zVnog2eHr0azYr/XiyJ3oZ/eqAoVB51OTx1Md6ExfJpOOp1Oe6nSnfEUS7h3Ei1DOtb6OId7V6KeB9AYnp6BuntGY+EVtOMBVG39iftndAH1oEzeQL1pfe5d6yM7NHcC2usYoj558gNAAFGwTPb8eQmCGCrg+6/bS/IS/6P+/P4KRDuPrffh1wEqqEhiewQ5VFFFjdAzQ0JCQkJCQkJCQkJCvMpfMAOukZpcr2YAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json",
      "data":
          "ewogICJpbWFnZXMiIDogWwogICAgewogICAgICAiaWRpb20iIDogInVuaXZlcnNhbCIsCiAgICAgICJmaWxlbmFtZSIgOiAiTGF1bmNoSW1hZ2UucG5nIiwKICAgICAgInNjYWxlIiA6ICIxeCIKICAgIH0sCiAgICB7CiAgICAgICJpZGlvbSIgOiAidW5pdmVyc2FsIiwKICAgICAgImZpbGVuYW1lIiA6ICJMYXVuY2hJbWFnZUAyeC5wbmciLAogICAgICAic2NhbGUiIDogIjJ4IgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJ1bml2ZXJzYWwiLAogICAgICAiZmlsZW5hbWUiIDogIkxhdW5jaEltYWdlQDN4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiM3giCiAgICB9CiAgXSwKICAiaW5mbyIgOiB7CiAgICAidmVyc2lvbiIgOiAxLAogICAgImF1dGhvciIgOiAieGNvZGUiCiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=",
      "type": "binary"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md",
      "data":
          "IyBMYXVuY2ggU2NyZWVuIEFzc2V0cwoKWW91IGNhbiBjdXN0b21pemUgdGhlIGxhdW5jaCBzY3JlZW4gd2l0aCB5b3VyIG93biBkZXNpcmVkIGFzc2V0cyBieSByZXBsYWNpbmcgdGhlIGltYWdlIGZpbGVzIGluIHRoaXMgZGlyZWN0b3J5LgoKWW91IGNhbiBhbHNvIGRvIGl0IGJ5IG9wZW5pbmcgeW91ciBGbHV0dGVyIHByb2plY3QncyBYY29kZSBwcm9qZWN0IHdpdGggYG9wZW4gaW9zL1J1bm5lci54Y3dvcmtzcGFjZWAsIHNlbGVjdGluZyBgUnVubmVyL0Fzc2V0cy54Y2Fzc2V0c2AgaW4gdGhlIFByb2plY3QgTmF2aWdhdG9yIGFuZCBkcm9wcGluZyBpbiB0aGUgZGVzaXJlZCBpbWFnZXMu",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Base.lproj/LaunchScreen.storyboard",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+Cjxkb2N1bWVudCB0eXBlPSJjb20uYXBwbGUuSW50ZXJmYWNlQnVpbGRlcjMuQ29jb2FUb3VjaC5TdG9yeWJvYXJkLlhJQiIgdmVyc2lvbj0iMy4wIiB0b29sc1ZlcnNpb249IjEyMTIxIiBzeXN0ZW1WZXJzaW9uPSIxNkcyOSIgdGFyZ2V0UnVudGltZT0iaU9TLkNvY29hVG91Y2giIHByb3BlcnR5QWNjZXNzQ29udHJvbD0ibm9uZSIgdXNlQXV0b2xheW91dD0iWUVTIiBsYXVuY2hTY3JlZW49IllFUyIgY29sb3JNYXRjaGVkPSJZRVMiIGluaXRpYWxWaWV3Q29udHJvbGxlcj0iMDFKLWxwLW9WTSI+CiAgICA8ZGVwZW5kZW5jaWVzPgogICAgICAgIDxkZXBsb3ltZW50IGlkZW50aWZpZXI9ImlPUyIvPgogICAgICAgIDxwbHVnSW4gaWRlbnRpZmllcj0iY29tLmFwcGxlLkludGVyZmFjZUJ1aWxkZXIuSUJDb2NvYVRvdWNoUGx1Z2luIiB2ZXJzaW9uPSIxMjA4OSIvPgogICAgPC9kZXBlbmRlbmNpZXM+CiAgICA8c2NlbmVzPgogICAgICAgIDwhLS1WaWV3IENvbnRyb2xsZXItLT4KICAgICAgICA8c2NlbmUgc2NlbmVJRD0iRUhmLUlXLUEyRSI+CiAgICAgICAgICAgIDxvYmplY3RzPgogICAgICAgICAgICAgICAgPHZpZXdDb250cm9sbGVyIGlkPSIwMUotbHAtb1ZNIiBzY2VuZU1lbWJlcklEPSJ2aWV3Q29udHJvbGxlciI+CiAgICAgICAgICAgICAgICAgICAgPGxheW91dEd1aWRlcz4KICAgICAgICAgICAgICAgICAgICAgICAgPHZpZXdDb250cm9sbGVyTGF5b3V0R3VpZGUgdHlwZT0idG9wIiBpZD0iWWRnLWZELXlReSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8dmlld0NvbnRyb2xsZXJMYXlvdXRHdWlkZSB0eXBlPSJib3R0b20iIGlkPSJ4YmMtMmstYzhaIi8+CiAgICAgICAgICAgICAgICAgICAgPC9sYXlvdXRHdWlkZXM+CiAgICAgICAgICAgICAgICAgICAgPHZpZXcga2V5PSJ2aWV3IiBjb250ZW50TW9kZT0ic2NhbGVUb0ZpbGwiIGlkPSJaZTUtNmItMnQzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGF1dG9yZXNpemluZ01hc2sga2V5PSJhdXRvcmVzaXppbmdNYXNrIiB3aWR0aFNpemFibGU9IllFUyIgaGVpZ2h0U2l6YWJsZT0iWUVTIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdWJ2aWV3cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWFnZVZpZXcgb3BhcXVlPSJOTyIgY2xpcHNTdWJ2aWV3cz0iWUVTIiBtdWx0aXBsZVRvdWNoRW5hYmxlZD0iWUVTIiBjb250ZW50TW9kZT0iY2VudGVyIiBpbWFnZT0iTGF1bmNoSW1hZ2UiIHRyYW5zbGF0ZXNBdXRvcmVzaXppbmdNYXNrSW50b0NvbnN0cmFpbnRzPSJOTyIgaWQ9IllSTy1rMC1FeTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pbWFnZVZpZXc+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Vidmlld3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xvciBrZXk9ImJhY2tncm91bmRDb2xvciIgcmVkPSIxIiBncmVlbj0iMSIgYmx1ZT0iMSIgYWxwaGE9IjEiIGNvbG9yU3BhY2U9ImN1c3RvbSIgY3VzdG9tQ29sb3JTcGFjZT0ic1JHQiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8Y29uc3RyYWludHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29uc3RyYWludCBmaXJzdEl0ZW09IllSTy1rMC1FeTQiIGZpcnN0QXR0cmlidXRlPSJjZW50ZXJYIiBzZWNvbmRJdGVtPSJaZTUtNmItMnQzIiBzZWNvbmRBdHRyaWJ1dGU9ImNlbnRlclgiIGlkPSIxYTItNnMtdlRDIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29uc3RyYWludCBmaXJzdEl0ZW09IllSTy1rMC1FeTQiIGZpcnN0QXR0cmlidXRlPSJjZW50ZXJZIiBzZWNvbmRJdGVtPSJaZTUtNmItMnQzIiBzZWNvbmRBdHRyaWJ1dGU9ImNlbnRlclkiIGlkPSI0WDItSEItUjdhIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvY29uc3RyYWludHM+CiAgICAgICAgICAgICAgICAgICAgPC92aWV3PgogICAgICAgICAgICAgICAgPC92aWV3Q29udHJvbGxlcj4KICAgICAgICAgICAgICAgIDxwbGFjZWhvbGRlciBwbGFjZWhvbGRlcklkZW50aWZpZXI9IklCRmlyc3RSZXNwb25kZXIiIGlkPSJpWWotS3EtRWExIiB1c2VyTGFiZWw9IkZpcnN0IFJlc3BvbmRlciIgc2NlbmVNZW1iZXJJRD0iZmlyc3RSZXNwb25kZXIiLz4KICAgICAgICAgICAgPC9vYmplY3RzPgogICAgICAgICAgICA8cG9pbnQga2V5PSJjYW52YXNMb2NhdGlvbiIgeD0iNTMiIHk9IjM3NSIvPgogICAgICAgIDwvc2NlbmU+CiAgICA8L3NjZW5lcz4KICAgIDxyZXNvdXJjZXM+CiAgICAgICAgPGltYWdlIG5hbWU9IkxhdW5jaEltYWdlIiB3aWR0aD0iMTY4IiBoZWlnaHQ9IjE4NSIvPgogICAgPC9yZXNvdXJjZXM+CjwvZG9jdW1lbnQ+Cg==",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Base.lproj/Main.storyboard",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+Cjxkb2N1bWVudCB0eXBlPSJjb20uYXBwbGUuSW50ZXJmYWNlQnVpbGRlcjMuQ29jb2FUb3VjaC5TdG9yeWJvYXJkLlhJQiIgdmVyc2lvbj0iMy4wIiB0b29sc1ZlcnNpb249IjEwMTE3IiBzeXN0ZW1WZXJzaW9uPSIxNUYzNCIgdGFyZ2V0UnVudGltZT0iaU9TLkNvY29hVG91Y2giIHByb3BlcnR5QWNjZXNzQ29udHJvbD0ibm9uZSIgdXNlQXV0b2xheW91dD0iWUVTIiB1c2VUcmFpdENvbGxlY3Rpb25zPSJZRVMiIGluaXRpYWxWaWV3Q29udHJvbGxlcj0iQllaLTM4LXQwciI+CiAgICA8ZGVwZW5kZW5jaWVzPgogICAgICAgIDxkZXBsb3ltZW50IGlkZW50aWZpZXI9ImlPUyIvPgogICAgICAgIDxwbHVnSW4gaWRlbnRpZmllcj0iY29tLmFwcGxlLkludGVyZmFjZUJ1aWxkZXIuSUJDb2NvYVRvdWNoUGx1Z2luIiB2ZXJzaW9uPSIxMDA4NSIvPgogICAgPC9kZXBlbmRlbmNpZXM+CiAgICA8c2NlbmVzPgogICAgICAgIDwhLS1GbHV0dGVyIFZpZXcgQ29udHJvbGxlci0tPgogICAgICAgIDxzY2VuZSBzY2VuZUlEPSJ0bmUtUVQtaWZ1Ij4KICAgICAgICAgICAgPG9iamVjdHM+CiAgICAgICAgICAgICAgICA8dmlld0NvbnRyb2xsZXIgaWQ9IkJZWi0zOC10MHIiIGN1c3RvbUNsYXNzPSJGbHV0dGVyVmlld0NvbnRyb2xsZXIiIHNjZW5lTWVtYmVySUQ9InZpZXdDb250cm9sbGVyIj4KICAgICAgICAgICAgICAgICAgICA8bGF5b3V0R3VpZGVzPgogICAgICAgICAgICAgICAgICAgICAgICA8dmlld0NvbnRyb2xsZXJMYXlvdXRHdWlkZSB0eXBlPSJ0b3AiIGlkPSJ5M2MtanktYURKIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2aWV3Q29udHJvbGxlckxheW91dEd1aWRlIHR5cGU9ImJvdHRvbSIgaWQ9IndmeS1kYi1ldUUiLz4KICAgICAgICAgICAgICAgICAgICA8L2xheW91dEd1aWRlcz4KICAgICAgICAgICAgICAgICAgICA8dmlldyBrZXk9InZpZXciIGNvbnRlbnRNb2RlPSJzY2FsZVRvRmlsbCIgaWQ9IjhiQy1YZi12ZEMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCBrZXk9ImZyYW1lIiB4PSIwLjAiIHk9IjAuMCIgd2lkdGg9IjYwMCIgaGVpZ2h0PSI2MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGF1dG9yZXNpemluZ01hc2sga2V5PSJhdXRvcmVzaXppbmdNYXNrIiB3aWR0aFNpemFibGU9IllFUyIgaGVpZ2h0U2l6YWJsZT0iWUVTIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xvciBrZXk9ImJhY2tncm91bmRDb2xvciIgd2hpdGU9IjEiIGFscGhhPSIxIiBjb2xvclNwYWNlPSJjdXN0b20iIGN1c3RvbUNvbG9yU3BhY2U9ImNhbGlicmF0ZWRXaGl0ZSIvPgogICAgICAgICAgICAgICAgICAgIDwvdmlldz4KICAgICAgICAgICAgICAgIDwvdmlld0NvbnRyb2xsZXI+CiAgICAgICAgICAgICAgICA8cGxhY2Vob2xkZXIgcGxhY2Vob2xkZXJJZGVudGlmaWVyPSJJQkZpcnN0UmVzcG9uZGVyIiBpZD0iZGt4LXowLW56ciIgc2NlbmVNZW1iZXJJRD0iZmlyc3RSZXNwb25kZXIiLz4KICAgICAgICAgICAgPC9vYmplY3RzPgogICAgICAgIDwvc2NlbmU+CiAgICA8L3NjZW5lcz4KPC9kb2N1bWVudD4K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/GeneratedPluginRegistrant.h",
      "data":
          "Ly8KLy8gIEdlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdC4KLy8KCi8vIGNsYW5nLWZvcm1hdCBvZmYKCiNpZm5kZWYgR2VuZXJhdGVkUGx1Z2luUmVnaXN0cmFudF9oCiNkZWZpbmUgR2VuZXJhdGVkUGx1Z2luUmVnaXN0cmFudF9oCgojaW1wb3J0IDxGbHV0dGVyL0ZsdXR0ZXIuaD4KCk5TX0FTU1VNRV9OT05OVUxMX0JFR0lOCgpAaW50ZXJmYWNlIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQgOiBOU09iamVjdAorICh2b2lkKXJlZ2lzdGVyV2l0aFJlZ2lzdHJ5OihOU09iamVjdDxGbHV0dGVyUGx1Z2luUmVnaXN0cnk+KilyZWdpc3RyeTsKQGVuZAoKTlNfQVNTVU1FX05PTk5VTExfRU5ECiNlbmRpZiAvKiBHZW5lcmF0ZWRQbHVnaW5SZWdpc3RyYW50X2ggKi8K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/GeneratedPluginRegistrant.m",
      "data":
          "Ly8KLy8gIEdlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdC4KLy8KCi8vIGNsYW5nLWZvcm1hdCBvZmYKCiNpbXBvcnQgIkdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQuaCIKCiNpZiBfX2hhc19pbmNsdWRlKDxjb25uZWN0aXZpdHlfcGx1cy9Db25uZWN0aXZpdHlQbHVzUGx1Z2luLmg+KQojaW1wb3J0IDxjb25uZWN0aXZpdHlfcGx1cy9Db25uZWN0aXZpdHlQbHVzUGx1Z2luLmg+CiNlbHNlCkBpbXBvcnQgY29ubmVjdGl2aXR5X3BsdXM7CiNlbmRpZgoKI2lmIF9faGFzX2luY2x1ZGUoPGZsdXR0ZXJfc2VjdXJlX3N0b3JhZ2UvRmx1dHRlclNlY3VyZVN0b3JhZ2VQbHVnaW4uaD4pCiNpbXBvcnQgPGZsdXR0ZXJfc2VjdXJlX3N0b3JhZ2UvRmx1dHRlclNlY3VyZVN0b3JhZ2VQbHVnaW4uaD4KI2Vsc2UKQGltcG9ydCBmbHV0dGVyX3NlY3VyZV9zdG9yYWdlOwojZW5kaWYKCiNpZiBfX2hhc19pbmNsdWRlKDxpbWFnZV9jcm9wcGVyL0ZMVEltYWdlQ3JvcHBlclBsdWdpbi5oPikKI2ltcG9ydCA8aW1hZ2VfY3JvcHBlci9GTFRJbWFnZUNyb3BwZXJQbHVnaW4uaD4KI2Vsc2UKQGltcG9ydCBpbWFnZV9jcm9wcGVyOwojZW5kaWYKCiNpZiBfX2hhc19pbmNsdWRlKDxpbWFnZV9waWNrZXJfaW9zL0ZMVEltYWdlUGlja2VyUGx1Z2luLmg+KQojaW1wb3J0IDxpbWFnZV9waWNrZXJfaW9zL0ZMVEltYWdlUGlja2VyUGx1Z2luLmg+CiNlbHNlCkBpbXBvcnQgaW1hZ2VfcGlja2VyX2lvczsKI2VuZGlmCgojaWYgX19oYXNfaW5jbHVkZSg8cGF0aF9wcm92aWRlcl9mb3VuZGF0aW9uL1BhdGhQcm92aWRlclBsdWdpbi5oPikKI2ltcG9ydCA8cGF0aF9wcm92aWRlcl9mb3VuZGF0aW9uL1BhdGhQcm92aWRlclBsdWdpbi5oPgojZWxzZQpAaW1wb3J0IHBhdGhfcHJvdmlkZXJfZm91bmRhdGlvbjsKI2VuZGlmCgojaWYgX19oYXNfaW5jbHVkZSg8c2hhcmVkX3ByZWZlcmVuY2VzX2ZvdW5kYXRpb24vU2hhcmVkUHJlZmVyZW5jZXNQbHVnaW4uaD4pCiNpbXBvcnQgPHNoYXJlZF9wcmVmZXJlbmNlc19mb3VuZGF0aW9uL1NoYXJlZFByZWZlcmVuY2VzUGx1Z2luLmg+CiNlbHNlCkBpbXBvcnQgc2hhcmVkX3ByZWZlcmVuY2VzX2ZvdW5kYXRpb247CiNlbmRpZgoKI2lmIF9faGFzX2luY2x1ZGUoPHNxZmxpdGVfZGFyd2luL1NxZmxpdGVQbHVnaW4uaD4pCiNpbXBvcnQgPHNxZmxpdGVfZGFyd2luL1NxZmxpdGVQbHVnaW4uaD4KI2Vsc2UKQGltcG9ydCBzcWZsaXRlX2RhcndpbjsKI2VuZGlmCgojaWYgX19oYXNfaW5jbHVkZSg8dXJsX2xhdW5jaGVyX2lvcy9VUkxMYXVuY2hlclBsdWdpbi5oPikKI2ltcG9ydCA8dXJsX2xhdW5jaGVyX2lvcy9VUkxMYXVuY2hlclBsdWdpbi5oPgojZWxzZQpAaW1wb3J0IHVybF9sYXVuY2hlcl9pb3M7CiNlbmRpZgoKQGltcGxlbWVudGF0aW9uIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQKCisgKHZvaWQpcmVnaXN0ZXJXaXRoUmVnaXN0cnk6KE5TT2JqZWN0PEZsdXR0ZXJQbHVnaW5SZWdpc3RyeT4qKXJlZ2lzdHJ5IHsKICBbQ29ubmVjdGl2aXR5UGx1c1BsdWdpbiByZWdpc3RlcldpdGhSZWdpc3RyYXI6W3JlZ2lzdHJ5IHJlZ2lzdHJhckZvclBsdWdpbjpAIkNvbm5lY3Rpdml0eVBsdXNQbHVnaW4iXV07CiAgW0ZsdXR0ZXJTZWN1cmVTdG9yYWdlUGx1Z2luIHJlZ2lzdGVyV2l0aFJlZ2lzdHJhcjpbcmVnaXN0cnkgcmVnaXN0cmFyRm9yUGx1Z2luOkAiRmx1dHRlclNlY3VyZVN0b3JhZ2VQbHVnaW4iXV07CiAgW0ZMVEltYWdlQ3JvcHBlclBsdWdpbiByZWdpc3RlcldpdGhSZWdpc3RyYXI6W3JlZ2lzdHJ5IHJlZ2lzdHJhckZvclBsdWdpbjpAIkZMVEltYWdlQ3JvcHBlclBsdWdpbiJdXTsKICBbRkxUSW1hZ2VQaWNrZXJQbHVnaW4gcmVnaXN0ZXJXaXRoUmVnaXN0cmFyOltyZWdpc3RyeSByZWdpc3RyYXJGb3JQbHVnaW46QCJGTFRJbWFnZVBpY2tlclBsdWdpbiJdXTsKICBbUGF0aFByb3ZpZGVyUGx1Z2luIHJlZ2lzdGVyV2l0aFJlZ2lzdHJhcjpbcmVnaXN0cnkgcmVnaXN0cmFyRm9yUGx1Z2luOkAiUGF0aFByb3ZpZGVyUGx1Z2luIl1dOwogIFtTaGFyZWRQcmVmZXJlbmNlc1BsdWdpbiByZWdpc3RlcldpdGhSZWdpc3RyYXI6W3JlZ2lzdHJ5IHJlZ2lzdHJhckZvclBsdWdpbjpAIlNoYXJlZFByZWZlcmVuY2VzUGx1Z2luIl1dOwogIFtTcWZsaXRlUGx1Z2luIHJlZ2lzdGVyV2l0aFJlZ2lzdHJhcjpbcmVnaXN0cnkgcmVnaXN0cmFyRm9yUGx1Z2luOkAiU3FmbGl0ZVBsdWdpbiJdXTsKICBbVVJMTGF1bmNoZXJQbHVnaW4gcmVnaXN0ZXJXaXRoUmVnaXN0cmFyOltyZWdpc3RyeSByZWdpc3RyYXJGb3JQbHVnaW46QCJVUkxMYXVuY2hlclBsdWdpbiJdXTsKfQoKQGVuZAo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Runner/Info.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+Q0ZCdW5kbGVEZXZlbG9wbWVudFJlZ2lvbjwva2V5PgoJPHN0cmluZz4kKERFVkVMT1BNRU5UX0xBTkdVQUdFKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZURpc3BsYXlOYW1lPC9rZXk+Cgk8c3RyaW5nPnt7cHJvamVjdF9uYW1lLnRpdGxlQ2FzZSgpfX08L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVFeGVjdXRhYmxlPC9rZXk+Cgk8c3RyaW5nPiQoRVhFQ1VUQUJMRV9OQU1FKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZUlkZW50aWZpZXI8L2tleT4KCTxzdHJpbmc+JChQUk9EVUNUX0JVTkRMRV9JREVOVElGSUVSKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvbjwva2V5PgoJPHN0cmluZz42LjA8L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVOYW1lPC9rZXk+Cgk8c3RyaW5nPnt7cHJvamVjdF9uYW1lLnNuYWtlQ2FzZSgpfX08L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVQYWNrYWdlVHlwZTwva2V5PgoJPHN0cmluZz5BUFBMPC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nPC9rZXk+Cgk8c3RyaW5nPiQoRkxVVFRFUl9CVUlMRF9OQU1FKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZVNpZ25hdHVyZTwva2V5PgoJPHN0cmluZz4/Pz8/PC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlVmVyc2lvbjwva2V5PgoJPHN0cmluZz4kKEZMVVRURVJfQlVJTERfTlVNQkVSKTwvc3RyaW5nPgoJPGtleT5MU1JlcXVpcmVzSVBob25lT1M8L2tleT4KCTx0cnVlLz4KCTxrZXk+VUlMYXVuY2hTdG9yeWJvYXJkTmFtZTwva2V5PgoJPHN0cmluZz5MYXVuY2hTY3JlZW48L3N0cmluZz4KCTxrZXk+VUlNYWluU3Rvcnlib2FyZEZpbGU8L2tleT4KCTxzdHJpbmc+TWFpbjwvc3RyaW5nPgoJPGtleT5VSVN1cHBvcnRlZEludGVyZmFjZU9yaWVudGF0aW9uczwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+VUlJbnRlcmZhY2VPcmllbnRhdGlvblBvcnRyYWl0PC9zdHJpbmc+CgkJPHN0cmluZz5VSUludGVyZmFjZU9yaWVudGF0aW9uTGFuZHNjYXBlTGVmdDwvc3RyaW5nPgoJCTxzdHJpbmc+VUlJbnRlcmZhY2VPcmllbnRhdGlvbkxhbmRzY2FwZVJpZ2h0PC9zdHJpbmc+Cgk8L2FycmF5PgoJPGtleT5VSVN1cHBvcnRlZEludGVyZmFjZU9yaWVudGF0aW9uc35pcGFkPC9rZXk+Cgk8YXJyYXk+CgkJPHN0cmluZz5VSUludGVyZmFjZU9yaWVudGF0aW9uUG9ydHJhaXQ8L3N0cmluZz4KCQk8c3RyaW5nPlVJSW50ZXJmYWNlT3JpZW50YXRpb25Qb3J0cmFpdFVwc2lkZURvd248L3N0cmluZz4KCQk8c3RyaW5nPlVJSW50ZXJmYWNlT3JpZW50YXRpb25MYW5kc2NhcGVMZWZ0PC9zdHJpbmc+CgkJPHN0cmluZz5VSUludGVyZmFjZU9yaWVudGF0aW9uTGFuZHNjYXBlUmlnaHQ8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PkNBRGlzYWJsZU1pbmltdW1GcmFtZUR1cmF0aW9uT25QaG9uZTwva2V5PgoJPHRydWUvPgoJPGtleT5VSUFwcGxpY2F0aW9uU3VwcG9ydHNJbmRpcmVjdElucHV0RXZlbnRzPC9rZXk+Cgk8dHJ1ZS8+CjwvZGljdD4KPC9wbGlzdD4K",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Runner-Bridging-Header.h",
      "data": "I2ltcG9ydCAiR2VuZXJhdGVkUGx1Z2luUmVnaXN0cmFudC5oIgo=",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/RunnerTests/RunnerTests.swift",
      "data":
          "aW1wb3J0IEZsdXR0ZXIKaW1wb3J0IFVJS2l0CmltcG9ydCBYQ1Rlc3QKCmNsYXNzIFJ1bm5lclRlc3RzOiBYQ1Rlc3RDYXNlIHsKCiAgZnVuYyB0ZXN0RXhhbXBsZSgpIHsKICAgIC8vIElmIHlvdSBhZGQgY29kZSB0byB0aGUgUnVubmVyIGFwcGxpY2F0aW9uLCBjb25zaWRlciBhZGRpbmcgdGVzdHMgaGVyZS4KICAgIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdXNpbmcgWENUZXN0LgogIH0KCn0K",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/README.md",
      "data":
          "IyB7e3Byb2plY3RfbmFtZX19CgpBIG5ldyBGbHV0dGVyIHByb2plY3QgY3JlYXRlZCB3aXRoIEJ1bm55IENMSS4KCiMjIFByb2plY3QgQ29uZmlndXJhdGlvbgoKIyMjIEJhc2ljIEluZm8KCi0gUHJvamVjdCBOYW1lOiB7e3Byb2plY3RfbmFtZX19Ci0gT3JnYW5pemF0aW9uOiB7e2J1bmRsZV9pZGVudGlmaWVyfX0KCiMjIyBBcmNoaXRlY3R1cmUKClNlbGVjdGVkIEFyY2hpdGVjdHVyZToge3thcmNoaXRlY3R1cmV9fQoKQXJjaGl0ZWN0dXJlIERldGFpbHM6Cnt7YXJjaGl0ZWN0dXJlRGV0YWlsc319CgojIyMgU3RhdGUgTWFuYWdlbWVudAoKU2VsZWN0ZWQgU3RhdGUgTWFuYWdlbWVudDoge3tzdGF0ZV9tYW5hZ2VtZW50fX0KClN0YXRlIE1hbmFnZW1lbnQgRGV0YWlsczoKe3tzdGF0ZU1hbmFnZW1lbnREZXRhaWxzfX0KCiMjIyBTZWxlY3RlZCBGZWF0dXJlcwoKRmVhdHVyZXMgaW5jbHVkZWQgaW4gdGhpcyBwcm9qZWN0Ogp7eyNmZWF0dXJlc319CgotIHt7Ln19CiAge3svZmVhdHVyZXN9fQoKIyMjIFNlbGVjdGVkIE1vZHVsZXMKCk1vZHVsZXMgaW5jbHVkZWQgaW4gdGhpcyBwcm9qZWN0Ogp7eyNtb2R1bGVzfX0KCi0ge3sufX0KICB7ey9tb2R1bGVzfX0KCiMjIFByb2plY3QgU3RydWN0dXJlCgpgYGAKbGliLwrilJzilIDilIAgY29yZS8K4pSCICAg4pSc4pSA4pSAIGNvbmZpZy8K4pSCICAg4pSc4pSA4pSAIHRoZW1lLwrilIIgICDilJTilIDilIAgdXRpbHMvCuKUnOKUgOKUgCBmZWF0dXJlcy8Ke3sjZmVhdHVyZXN9fQrilIIgICDilJzilIDilIAge3sufX0vCnt7L2ZlYXR1cmVzfX0K4pSU4pSA4pSAIG1vZHVsZXMvCnt7I21vZHVsZXN9fQogICAg4pSc4pSA4pSAIHt7Ln19Lwp7ey9tb2R1bGVzfX0KYGBgCgojIyBHZXR0aW5nIFN0YXJ0ZWQKCjEuIENsb25lIHRoZSByZXBvc2l0b3J5CjIuIEluc3RhbGwgZGVwZW5kZW5jaWVzOgogICBgYGBiYXNoCiAgIGZsdXR0ZXIgcHViIGdldAogICBgYGAKMy4gUnVuIHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXI6CiAgIGBgYGJhc2gKICAgZmx1dHRlciBydW4KICAgYGBgCgojIyBEZXZlbG9wbWVudCBHdWlkZWxpbmVzCgojIyMgQ29kZSBTdHlsZQoKLSBGb2xsb3cgRmx1dHRlcidzIG9mZmljaWFsIHN0eWxlIGd1aWRlCi0gVXNlIG1lYW5pbmdmdWwgdmFyaWFibGUgYW5kIGZ1bmN0aW9uIG5hbWVzCi0gV3JpdGUgY29tbWVudHMgZm9yIGNvbXBsZXggbG9naWMKLSBLZWVwIGZpbGVzIGFuZCBjbGFzc2VzIGZvY3VzZWQgYW5kIHNtYWxsCgojIyMgQXJjaGl0ZWN0dXJlIEd1aWRlbGluZXMKCi0gRm9sbG93IHRoZSB7e2FyY2hpdGVjdHVyZX19IHBhdHRlcm4KLSBNYWludGFpbiBzZXBhcmF0aW9uIG9mIGNvbmNlcm5zCi0gV3JpdGUgdW5pdCB0ZXN0cyBmb3IgYnVzaW5lc3MgbG9naWMKLSBEb2N1bWVudCBjb21wbGV4IGltcGxlbWVudGF0aW9ucwoKIyMjIFN0YXRlIE1hbmFnZW1lbnQKCi0gVXNlIHt7c3RhdGVfbWFuYWdlbWVudH19IGZvciBzdGF0ZSBtYW5hZ2VtZW50Ci0gRm9sbG93IGJlc3QgcHJhY3RpY2VzIGZvciBjaG9zZW4gc29sdXRpb24KLSBNYWludGFpbiBjbGVhciBzdGF0ZSB1cGRhdGUgcGF0dGVybnMKLSBEb2N1bWVudCBzdGF0ZSBmbG93IGZvciBjb21wbGV4IGZlYXR1cmVzCgojIyBUZXN0aW5nCgpgYGBiYXNoCiMgUnVuIGFsbCB0ZXN0cwpmbHV0dGVyIHRlc3QKCiMgUnVuIHRlc3RzIHdpdGggY292ZXJhZ2UKZmx1dHRlciB0ZXN0IC0tY292ZXJhZ2UKYGBgCgojIyBCdWlsZGluZyBmb3IgUHJvZHVjdGlvbgoKYGBgYmFzaAojIEJ1aWxkIEFQSwpmbHV0dGVyIGJ1aWxkIGFwawoKIyBCdWlsZCBpT1MKZmx1dHRlciBidWlsZCBpb3MKYGBgCgojIyBMaWNlbnNlCgpUaGlzIHByb2plY3QgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIC0gc2VlIHRoZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuCg==",
      "type": "text"
    },
    {
      "path": "{{project_name.snakeCase()}}/test/widget_test.dart",
      "data":
          "Ly8gVGhpcyBpcyBhIGJhc2ljIEZsdXR0ZXIgd2lkZ2V0IHRlc3QuCi8vCi8vIFRvIHBlcmZvcm0gYW4gaW50ZXJhY3Rpb24gd2l0aCBhIHdpZGdldCBpbiB5b3VyIHRlc3QsIHVzZSB0aGUgV2lkZ2V0VGVzdGVyCi8vIHV0aWxpdHkgaW4gdGhlIGZsdXR0ZXJfdGVzdCBwYWNrYWdlLiBGb3IgZXhhbXBsZSwgeW91IGNhbiBzZW5kIHRhcCBhbmQgc2Nyb2xsCi8vIGdlc3R1cmVzLiBZb3UgY2FuIGFsc28gdXNlIFdpZGdldFRlc3RlciB0byBmaW5kIGNoaWxkIHdpZGdldHMgaW4gdGhlIHdpZGdldAovLyB0cmVlLCByZWFkIHRleHQsIGFuZCB2ZXJpZnkgdGhhdCB0aGUgdmFsdWVzIG9mIHdpZGdldCBwcm9wZXJ0aWVzIGFyZSBjb3JyZWN0LgoKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX0vYXBwL2FwcC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwoKdm9pZCBtYWluKCkgewogIHRlc3RXaWRnZXRzKCdDb3VudGVyIGluY3JlbWVudHMgc21va2UgdGVzdCcsIChXaWRnZXRUZXN0ZXIgdGVzdGVyKSBhc3luYyB7CiAgICAvLyBCdWlsZCBvdXIgYXBwIGFuZCB0cmlnZ2VyIGEgZnJhbWUuCiAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChjb25zdCBBcHAoKSk7CgogICAgLy8gVmVyaWZ5IHRoYXQgb3VyIGNvdW50ZXIgc3RhcnRzIGF0IDAuCiAgICBleHBlY3QoZmluZC50ZXh0KCcwJyksIGZpbmRzT25lV2lkZ2V0KTsKICAgIGV4cGVjdChmaW5kLnRleHQoJzEnKSwgZmluZHNOb3RoaW5nKTsKCiAgICAvLyBUYXAgdGhlICcrJyBpY29uIGFuZCB0cmlnZ2VyIGEgZnJhbWUuCiAgICBhd2FpdCB0ZXN0ZXIudGFwKGZpbmQuYnlJY29uKEljb25zLmFkZCkpOwogICAgYXdhaXQgdGVzdGVyLnB1bXAoKTsKCiAgICAvLyBWZXJpZnkgdGhhdCBvdXIgY291bnRlciBoYXMgaW5jcmVtZW50ZWQuCiAgICBleHBlY3QoZmluZC50ZXh0KCcwJyksIGZpbmRzTm90aGluZyk7CiAgICBleHBlY3QoZmluZC50ZXh0KCcxJyksIGZpbmRzT25lV2lkZ2V0KTsKICB9KTsKfQo=",
      "type": "text"
    },
    {
      "path":
          "{{project_name.snakeCase()}}/{{project_name.snakeCase()}}_state.iml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPG1vZHVsZSB0eXBlPSJKQVZBX01PRFVMRSIgdmVyc2lvbj0iNCI+CiAgPGNvbXBvbmVudCBuYW1lPSJOZXdNb2R1bGVSb290TWFuYWdlciIgaW5oZXJpdC1jb21waWxlci1vdXRwdXQ9InRydWUiPgogICAgPGV4Y2x1ZGUtb3V0cHV0IC8+CiAgICA8Y29udGVudCB1cmw9ImZpbGU6Ly8kTU9EVUxFX0RJUiQiPgogICAgICA8c291cmNlRm9sZGVyIHVybD0iZmlsZTovLyRNT0RVTEVfRElSJC9saWIiIGlzVGVzdFNvdXJjZT0iZmFsc2UiIC8+CiAgICAgIDxzb3VyY2VGb2xkZXIgdXJsPSJmaWxlOi8vJE1PRFVMRV9ESVIkL3Rlc3QiIGlzVGVzdFNvdXJjZT0idHJ1ZSIgLz4KICAgICAgPGV4Y2x1ZGVGb2xkZXIgdXJsPSJmaWxlOi8vJE1PRFVMRV9ESVIkLy5kYXJ0X3Rvb2wiIC8+CiAgICAgIDxleGNsdWRlRm9sZGVyIHVybD0iZmlsZTovLyRNT0RVTEVfRElSJC8uaWRlYSIgLz4KICAgICAgPGV4Y2x1ZGVGb2xkZXIgdXJsPSJmaWxlOi8vJE1PRFVMRV9ESVIkL2J1aWxkIiAvPgogICAgPC9jb250ZW50PgogICAgPG9yZGVyRW50cnkgdHlwZT0ic291cmNlRm9sZGVyIiBmb3JUZXN0cz0iZmFsc2UiIC8+CiAgICA8b3JkZXJFbnRyeSB0eXBlPSJsaWJyYXJ5IiBuYW1lPSJEYXJ0IFNESyIgbGV2ZWw9InByb2plY3QiIC8+CiAgICA8b3JkZXJFbnRyeSB0eXBlPSJsaWJyYXJ5IiBuYW1lPSJGbHV0dGVyIFBsdWdpbnMiIGxldmVsPSJwcm9qZWN0IiAvPgogICAgPG9yZGVyRW50cnkgdHlwZT0ibGlicmFyeSIgbmFtZT0iRGFydCBQYWNrYWdlcyIgbGV2ZWw9InByb2plY3QiIC8+CiAgPC9jb21wb25lbnQ+CjwvbW9kdWxlPgo=",
      "type": "text"
    }
  ],
  "hooks": [
    {
      "path": "lib/app_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/architecture_handler.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCmltcG9ydCAndXRpbHMuZGFydCc7Cgp2b2lkIGNyZWF0ZUFyY2hpdGVjdHVyZVN0cnVjdHVyZSgKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwgU3RyaW5nIGFyY2hpdGVjdHVyZSkgewogIExpc3Q8U3RyaW5nPiBkaXJlY3RvcmllcyA9IFtdOwoKICBzd2l0Y2ggKGFyY2hpdGVjdHVyZSkgewogICAgY2FzZSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvZXJyb3InLAogICAgICAgICdsaWIvY29yZS91dGlscycsCiAgICAgICAgJ2xpYi9pbmZyYXN0cnVjdHVyZS9pbmplY3RvcicsCiAgICAgICAgJ2xpYi9pbmZyYXN0cnVjdHVyZS9uYXZpZ2F0aW9uJywKICAgICAgXTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVlZNJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvc2VydmljZXMnLAogICAgICAgICdsaWIvY29yZS91dGlscycsCiAgICAgICAgJ2xpYi9zaGFyZWQnLAogICAgICAgICdsaWIvc2hhcmVkL3dpZGdldHMnLAogICAgICAgICdsaWIvc2hhcmVkL3V0aWxzJywKICAgICAgXTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVkMnOgogICAgICBkaXJlY3RvcmllcyA9IFsKICAgICAgICAnbGliL2NvcmUnLAogICAgICAgICdsaWIvY29yZS9zZXJ2aWNlcycsCiAgICAgICAgJ2xpYi9jb3JlL3V0aWxzJywKICAgICAgICAnbGliL3NoYXJlZCcsCiAgICAgICAgJ2xpYi9zaGFyZWQvd2lkZ2V0cycsCiAgICAgICAgJ2xpYi9zaGFyZWQvdXRpbHMnLAogICAgICBdOwogICAgICBicmVhazsKICAgIGNhc2UgJ0ZlYXR1cmUtRHJpdmVuJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvdXRpbHMnLAogICAgICAgICdsaWIvY29yZS9zZXJ2aWNlcycsCiAgICAgICAgJ2xpYi9zaGFyZWQvd2lkZ2V0cycsCiAgICAgIF07CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgY29udGV4dC5sb2dnZXIud2FybignVW5rbm93biBhcmNoaXRlY3R1cmU6ICRhcmNoaXRlY3R1cmUnKTsKICAgICAgcmV0dXJuOwogIH0KCiAgZm9yIChmaW5hbCBkaXIgaW4gZGlyZWN0b3JpZXMpIHsKICAgIGZpbmFsIGRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lLyRkaXInKTsKICAgIGlmICghZGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgICBkaXJlY3RvcnkuY3JlYXRlU3luYyhyZWN1cnNpdmU6IHRydWUpOwogICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIGFyY2hpdGVjdHVyZSBkaXJlY3Rvcnk6ICRkaXInKTsKICAgIH0KICB9CgogIC8vIENyZWF0ZSBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgZmlsZXMKICBjcmVhdGVBcmNoaXRlY3R1cmVGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgYXJjaGl0ZWN0dXJlKTsKfQoKdm9pZCBjcmVhdGVBcmNoaXRlY3R1cmVGaWxlcygKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwgU3RyaW5nIGFyY2hpdGVjdHVyZSkgewogIHN3aXRjaCAoYXJjaGl0ZWN0dXJlKSB7CiAgICBjYXNlICdDbGVhbiBBcmNoaXRlY3R1cmUnOgogICAgICBjcmVhdGVDbGVhbkFyY2hpdGVjdHVyZUZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVlZNJzoKICAgICAgY3JlYXRlTVZWTUFyY2hpdGVjdHVyZUZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVkMnOgogICAgICBjcmVhdGVNVkNBcmNoaXRlY3R1cmVGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnRmVhdHVyZS1Ecml2ZW4nOgogICAgICBjcmVhdGVGZWF0dXJlRHJpdmVuQXJjaGl0ZWN0dXJlRmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUpOwogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAvLyBObyBzcGVjaWZpYyBmaWxlcyB0byBjcmVhdGUKICB9Cn0KCnZvaWQgY3JlYXRlQ2xlYW5BcmNoaXRlY3R1cmVGaWxlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBDb3JlIGVycm9yIGhhbmRsaW5nCiAgY3JlYXRlRmlsZSgKICAgICAgJyRwcm9qZWN0TmFtZS9saWIvY29yZS9lcnJvci9mYWlsdXJlcy5kYXJ0JywKICAgICAgJycnCi8vIEZhaWx1cmUgYmFzZSBjbGFzcyBhbmQgaW1wbGVtZW50YXRpb25zCi8vIEdlbmVyYXRlZCBieSBGbHV0dGVyIEJ1bm55IENsafCfkLAKCmFic3RyYWN0IGNsYXNzIEZhaWx1cmUgewogIGZpbmFsIFN0cmluZyBtZXNzYWdlOwogIAogIGNvbnN0IEZhaWx1cmUoe3JlcXVpcmVkIHRoaXMubWVzc2FnZX0pOwp9CgpjbGFzcyBTZXJ2ZXJGYWlsdXJlIGV4dGVuZHMgRmFpbHVyZSB7CiAgY29uc3QgU2VydmVyRmFpbHVyZSh7cmVxdWlyZWQgU3RyaW5nIG1lc3NhZ2V9KSA6IHN1cGVyKG1lc3NhZ2U6IG1lc3NhZ2UpOwp9CgpjbGFzcyBDYWNoZUZhaWx1cmUgZXh0ZW5kcyBGYWlsdXJlIHsKICBjb25zdCBDYWNoZUZhaWx1cmUoe3JlcXVpcmVkIFN0cmluZyBtZXNzYWdlfSkgOiBzdXBlcihtZXNzYWdlOiBtZXNzYWdlKTsKfQoKY2xhc3MgTmV0d29ya0ZhaWx1cmUgZXh0ZW5kcyBGYWlsdXJlIHsKICBjb25zdCBOZXR3b3JrRmFpbHVyZSh7cmVxdWlyZWQgU3RyaW5nIG1lc3NhZ2V9KSA6IHN1cGVyKG1lc3NhZ2U6IG1lc3NhZ2UpOwp9CicnJywKICAgICAgY29udGV4dCk7CgogIC8vIERJIHNldHVwIGZpbGUKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9pbmZyYXN0cnVjdHVyZS9pbmplY3Rvci9pbmplY3Rvci5kYXJ0JywKICAgICAgJycnCi8vIERlcGVuZGVuY3kgaW5qZWN0aW9uIHNldHVwCi8vIEdlbmVyYXRlZCBieSBGbHV0dGVyIEJ1bm55IENsafCfkLAKCi8vIFRoaXMgZmlsZSB3aWxsIGJlIHVzZWQgdG8gc2V0dXAgZGVwZW5kZW5jeSBpbmplY3Rpb24KLy8gd2l0aCBhIHBhY2thZ2UgbGlrZSBnZXRfaXQsIGluamVjdGFibGUsIGV0Yy4KCnZvaWQgc2V0dXBJbmplY3RvcigpIHsKICAvLyBUT0RPOiBSZWdpc3RlciBkZXBlbmRlbmNpZXMKfQonJycsCiAgICAgIGNvbnRleHQpOwp9Cgp2b2lkIGNyZWF0ZU1WVk1BcmNoaXRlY3R1cmVGaWxlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBCYXNlIHZpZXcgbW9kZWwKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL2Jhc2Vfdmlld19tb2RlbC5kYXJ0JywKICAgICAgJycnCi8vIEJhc2UgdmlldyBtb2RlbAovLyBHZW5lcmF0ZWQgYnkgRmx1dHRlciBCdW5ueSBDbGnwn5CwCgphYnN0cmFjdCBjbGFzcyBCYXNlVmlld01vZGVsIHsKICAvLyBCYXNlIHZpZXcgbW9kZWwgZnVuY3Rpb25hbGl0eQogIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGluY2x1ZGUgY29tbW9uIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMKICAvLyBmb3IgYWxsIHZpZXcgbW9kZWxzIGluIHRoZSBhcHBsaWNhdGlvbgogIAogIGJvb2wgaXNMb2FkaW5nID0gZmFsc2U7CiAgU3RyaW5nPyBlcnJvck1lc3NhZ2U7CiAgCiAgdm9pZCBzZXRMb2FkaW5nKGJvb2wgbG9hZGluZykgewogICAgaXNMb2FkaW5nID0gbG9hZGluZzsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9CiAgCiAgdm9pZCBzZXRFcnJvcihTdHJpbmc/IGVycm9yKSB7CiAgICBlcnJvck1lc3NhZ2UgPSBlcnJvcjsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9Cn0KJycnLAogICAgICBjb250ZXh0KTsKfQoKdm9pZCBjcmVhdGVNVkNBcmNoaXRlY3R1cmVGaWxlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBCYXNlIGNvbnRyb2xsZXIKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL2Jhc2VfY29udHJvbGxlci5kYXJ0JywKICAgICAgJycnCi8vIEJhc2UgY29udHJvbGxlcgovLyBHZW5lcmF0ZWQgYnkgRmx1dHRlciBCdW5ueSBDbGnwn5CwCgphYnN0cmFjdCBjbGFzcyBCYXNlQ29udHJvbGxlciB7CiAgLy8gQmFzZSBjb250cm9sbGVyIGZ1bmN0aW9uYWxpdHkKICAvLyBUaGlzIHdvdWxkIHR5cGljYWxseSBpbmNsdWRlIGNvbW1vbiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzCiAgLy8gZm9yIGFsbCBjb250cm9sbGVycyBpbiB0aGUgYXBwbGljYXRpb24KICAKICBib29sIGlzTG9hZGluZyA9IGZhbHNlOwogIFN0cmluZz8gZXJyb3JNZXNzYWdlOwogIAogIHZvaWQgc2V0TG9hZGluZyhib29sIGxvYWRpbmcpIHsKICAgIGlzTG9hZGluZyA9IGxvYWRpbmc7CiAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIC0gaW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiBzdGF0ZSBtYW5hZ2VtZW50CiAgfQogIAogIHZvaWQgc2V0RXJyb3IoU3RyaW5nPyBlcnJvcikgewogICAgZXJyb3JNZXNzYWdlID0gZXJyb3I7CiAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIC0gaW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiBzdGF0ZSBtYW5hZ2VtZW50CiAgfQp9CicnJywKICAgICAgY29udGV4dCk7Cn0KCnZvaWQgY3JlYXRlRmVhdHVyZURyaXZlbkFyY2hpdGVjdHVyZUZpbGVzKAogICAgSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgLy8gQXBwIG5hdmlnYXRpb24KICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL25hdmlnYXRpb24vYXBwX3JvdXRlci5kYXJ0JywKICAgICAgJycnCi8vIEFwcCByb3V0ZXIKLy8gR2VuZXJhdGVkIGJ5IEZsdXR0ZXIgQnVubnkgQ2xp8J+QsAoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgpjbGFzcyBBcHBSb3V0ZXIgewogIHN0YXRpYyBSb3V0ZTxkeW5hbWljPiBnZW5lcmF0ZVJvdXRlKFJvdXRlU2V0dGluZ3Mgc2V0dGluZ3MpIHsKICAgIC8vIFRPRE86IEltcGxlbWVudCByb3V0ZSBnZW5lcmF0aW9uIGJhc2VkIG9uIHlvdXIgZmVhdHVyZXMKICAgIHN3aXRjaCAoc2V0dGluZ3MubmFtZSkgewogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBNYXRlcmlhbFBhZ2VSb3V0ZSgKICAgICAgICAgIGJ1aWxkZXI6IChfKSA9PiBTY2FmZm9sZCgKICAgICAgICAgICAgYm9keTogQ2VudGVyKAogICAgICAgICAgICAgIGNoaWxkOiBUZXh0KCdObyByb3V0ZSBkZWZpbmVkIGZvciBcJHtzZXR0aW5ncy5uYW1lfScpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgfQogIH0KfQonJycsCiAgICAgIGNvbnRleHQpOwp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/error_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/feature_generator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCmltcG9ydCAnc3RhdGVfbWFuYWdlbWVudF9oYW5kbGVyLmRhcnQnOwppbXBvcnQgJ3V0aWxzLmRhcnQnOwoKdm9pZCBjcmVhdGVGZWF0dXJlU3RydWN0dXJlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUsCiAgICBMaXN0PGR5bmFtaWM+IGZlYXR1cmVzLCBTdHJpbmcgYXJjaGl0ZWN0dXJlLCBTdHJpbmcgc3RhdGVNYW5hZ2VtZW50KSB7CiAgZm9yIChmaW5hbCBmZWF0dXJlIGluIGZlYXR1cmVzKSB7CiAgICBmaW5hbCBmZWF0dXJlTmFtZSA9IGZlYXR1cmUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2VBbGwoJyAnLCAnXycpOwoKICAgIHN3aXRjaCAoYXJjaGl0ZWN0dXJlKSB7CiAgICAgIGNhc2UgJ0NsZWFuIEFyY2hpdGVjdHVyZSc6CiAgICAgICAgY3JlYXRlQ2xlYW5BcmNoaXRlY3R1cmVGZWF0dXJlKAogICAgICAgICAgICBjb250ZXh0LCBwcm9qZWN0TmFtZSwgZmVhdHVyZU5hbWUsIHN0YXRlTWFuYWdlbWVudCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ01WVk0nOgogICAgICAgIGNyZWF0ZU1WVk1GZWF0dXJlKGNvbnRleHQsIHByb2plY3ROYW1lLCBmZWF0dXJlTmFtZSwgc3RhdGVNYW5hZ2VtZW50KTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnTVZDJzoKICAgICAgICBjcmVhdGVNVkNGZWF0dXJlKGNvbnRleHQsIHByb2plY3ROYW1lLCBmZWF0dXJlTmFtZSwgc3RhdGVNYW5hZ2VtZW50KTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnRmVhdHVyZS1Ecml2ZW4nOgogICAgICAgIGNyZWF0ZUZlYXR1cmVEcml2ZW5GZWF0dXJlKAogICAgICAgICAgICBjb250ZXh0LCBwcm9qZWN0TmFtZSwgZmVhdHVyZU5hbWUsIHN0YXRlTWFuYWdlbWVudCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgY29udGV4dC5sb2dnZXIud2FybignVW5rbm93biBhcmNoaXRlY3R1cmU6ICRhcmNoaXRlY3R1cmUnKTsKICAgICAgICBjb250aW51ZTsKICAgIH0KICB9Cn0KCnZvaWQgY3JlYXRlQ2xlYW5BcmNoaXRlY3R1cmVGZWF0dXJlKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwKICAgIFN0cmluZyBmZWF0dXJlTmFtZSwgU3RyaW5nIHN0YXRlTWFuYWdlbWVudCkgewogIC8vIENyZWF0ZSBDbGVhbiBBcmNoaXRlY3R1cmUgc3RydWN0dXJlIGZvciB0aGUgZmVhdHVyZQogIGZpbmFsIGJhc2VEaXJlY3RvcmllcyA9IFsKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi9lbnRpdGllcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vcmVwb3NpdG9yaWVzJywKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi91c2VjYXNlcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL21vZGVscycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL3JlcG9zaXRvcmllcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL2RhdGFzb3VyY2VzJywKICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ByZXNlbnRhdGlvbi9wYWdlcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vd2lkZ2V0cycsCiAgXTsKCiAgLy8gQ3JlYXRlIGFsbCBiYXNlIGRpcmVjdG9yaWVzCiAgZm9yIChmaW5hbCBkaXIgaW4gYmFzZURpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmZWF0dXJlIGRpcmVjdG9yeTogJGRpcicpOwogICAgfQogIH0KCiAgLy8gQ3JlYXRlIHNhbXBsZSBlbnRpdHkKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL2VudGl0aWVzLyR7ZmVhdHVyZU5hbWV9X2VudGl0eS5kYXJ0JywKICAgICAgZ2VuZXJhdGVFbnRpdHlUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIHJlcG9zaXRvcnkgaW50ZXJmYWNlCiAgY3JlYXRlRmlsZSgKICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi9yZXBvc2l0b3JpZXMvJHtmZWF0dXJlTmFtZX1fcmVwb3NpdG9yeS5kYXJ0JywKICAgICAgZ2VuZXJhdGVSZXBvc2l0b3J5VGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgICBjb250ZXh0KTsKCiAgLy8gQ3JlYXRlIHNhbXBsZSB1c2UgY2FzZQogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vdXNlY2FzZXMvJHtmZWF0dXJlTmFtZX1fdXNlY2FzZS5kYXJ0JywKICAgICAgZ2VuZXJhdGVVc2VDYXNlVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgICBjb250ZXh0KTsKCiAgLy8gQ3JlYXRlIHNhbXBsZSBtb2RlbAogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL21vZGVscy8ke2ZlYXR1cmVOYW1lfV9tb2RlbC5kYXJ0JywKICAgICAgZ2VuZXJhdGVNb2RlbFRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzYW1wbGUgcmVwb3NpdG9yeSBpbXBsZW1lbnRhdGlvbgogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL3JlcG9zaXRvcmllcy8ke2ZlYXR1cmVOYW1lfV9yZXBvc2l0b3J5X2ltcGwuZGFydCcsCiAgICAgIGdlbmVyYXRlUmVwb3NpdG9yeUltcGxUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIGRhdGEgc291cmNlCiAgY3JlYXRlRmlsZSgKICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RhdGEvZGF0YXNvdXJjZXMvJHtmZWF0dXJlTmFtZX1fZGF0YV9zb3VyY2UuZGFydCcsCiAgICAgIGdlbmVyYXRlRGF0YVNvdXJjZVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzYW1wbGUgcGFnZQogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vcGFnZXMvJHtmZWF0dXJlTmFtZX1fcGFnZS5kYXJ0JywKICAgICAgZ2VuZXJhdGVQYWdlVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgICBjb250ZXh0KTsKCiAgLy8gQ3JlYXRlIHNhbXBsZSB3aWRnZXQKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvcHJlc2VudGF0aW9uL3dpZGdldHMvJHtmZWF0dXJlTmFtZX1fd2lkZ2V0LmRhcnQnLAogICAgICBnZW5lcmF0ZVdpZGdldFRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzdGF0ZSBtYW5hZ2VtZW50IGZpbGVzCiAgY3JlYXRlU3RhdGVNYW5hZ2VtZW50RmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUsCiAgICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ByZXNlbnRhdGlvbicsIGZlYXR1cmVOYW1lLCBzdGF0ZU1hbmFnZW1lbnQpOwp9Cgp2b2lkIGNyZWF0ZU1WVk1GZWF0dXJlKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwKICAgIFN0cmluZyBmZWF0dXJlTmFtZSwgU3RyaW5nIHN0YXRlTWFuYWdlbWVudCkgewogIC8vIENyZWF0ZSBNVlZNIHN0cnVjdHVyZSBmb3IgdGhlIGZlYXR1cmUKICBmaW5hbCBiYXNlRGlyZWN0b3JpZXMgPSBbCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9tb2RlbHMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld3MnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9zZXJ2aWNlcycsCiAgXTsKCiAgLy8gQ3JlYXRlIGFsbCBiYXNlIGRpcmVjdG9yaWVzCiAgZm9yIChmaW5hbCBkaXIgaW4gYmFzZURpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmZWF0dXJlIGRpcmVjdG9yeTogJGRpcicpOwogICAgfQogIH0KCiAgLy8gQ3JlYXRlIHNhbXBsZSBtb2RlbAogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9tb2RlbHMvJHtmZWF0dXJlTmFtZX1fbW9kZWwuZGFydCcsCiAgICAgICcnJwovLyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbAovLyBHZW5lcmF0ZWQgYnkgRmx1dHRlciBCdW5ueSBDbGnwn5CwCgpjbGFzcyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCB7CiAgZmluYWwgU3RyaW5nIGlkOwogIGZpbmFsIFN0cmluZyBuYW1lOwogIC8vIEFkZCBtb3JlIGZpZWxkcyBhcyBuZWVkZWQKICAKICAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCh7CiAgICByZXF1aXJlZCB0aGlzLmlkLAogICAgcmVxdWlyZWQgdGhpcy5uYW1lLAogIH0pOwogIAogIGZhY3RvcnkgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwuZnJvbUpzb24oTWFwPFN0cmluZywgZHluYW1pYz4ganNvbikgewogICAgcmV0dXJuICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfU1vZGVsKAogICAgICBpZDoganNvblsnaWQnXSwKICAgICAgbmFtZToganNvblsnbmFtZSddLAogICAgKTsKICB9CiAgCiAgTWFwPFN0cmluZywgZHluYW1pYz4gdG9Kc29uKCkgewogICAgcmV0dXJuIHsKICAgICAgJ2lkJzogaWQsCiAgICAgICduYW1lJzogbmFtZSwKICAgIH07CiAgfQp9CicnJywKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzYW1wbGUgdmlldwogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS92aWV3cy8ke2ZlYXR1cmVOYW1lfV92aWV3LmRhcnQnLAogICAgICAnJycKLy8gJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9VmlldwovLyBHZW5lcmF0ZWQgYnkgRmx1dHRlciBCdW5ueSBDbGnwn5CwCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwoKY2xhc3MgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9VmlldyBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3QgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9Vmlldyh7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICAvLyBVc2Ugc3RhdGUgbWFuYWdlbWVudCBoZXJlIHRvIGNvbm5lY3Qgd2l0aCB2aWV3bW9kZWwKICAgIHJldHVybiBTY2FmZm9sZCgKICAgICAgYXBwQmFyOiBBcHBCYXIoCiAgICAgICAgdGl0bGU6IFRleHQoJyR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfScpLAogICAgICApLAogICAgICBib2R5OiBDZW50ZXIoCiAgICAgICAgY2hpbGQ6IFRleHQoJyR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfSBWaWV3JyksCiAgICAgICksCiAgICApOwogIH0KfQonJycsCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIHNlcnZpY2UKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvc2VydmljZXMvJHtmZWF0dXJlTmFtZX1fc2VydmljZS5kYXJ0JywKICAgICAgJycnCi8vICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVNlcnZpY2UKLy8gR2VuZXJhdGVkIGJ5IEZsdXR0ZXIgQnVubnkgQ2xp8J+QsAoKY2xhc3MgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9U2VydmljZSB7CiAgLy8gVE9ETzogSW1wbGVtZW50IEFQSSBjYWxscywgZGF0YWJhc2Ugb3BlcmF0aW9ucywgZXRjLgogIAogIEZ1dHVyZTx2b2lkPiBmZXRjaERhdGEoKSBhc3luYyB7CiAgICAvLyBTYW1wbGUgaW1wbGVtZW50YXRpb24KICB9CiAgCiAgRnV0dXJlPHZvaWQ+IHNhdmVEYXRhKCkgYXN5bmMgewogICAgLy8gU2FtcGxlIGltcGxlbWVudGF0aW9uCiAgfQp9CicnJywKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzdGF0ZSBtYW5hZ2VtZW50LXNwZWNpZmljIHZpZXdtb2RlbAogIHN3aXRjaCAoc3RhdGVNYW5hZ2VtZW50KSB7CiAgICBjYXNlICdQcm92aWRlcic6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscy8ke2ZlYXR1cmVOYW1lfV92aWV3bW9kZWwuZGFydCcsCiAgICAgICAgICBnZW5lcmF0ZVByb3ZpZGVyVmlld01vZGVsKGZlYXR1cmVOYW1lKSwKICAgICAgICAgIGNvbnRleHQpOwogICAgICBicmVhazsKICAgIGNhc2UgJ1JpdmVycG9kJzoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS92aWV3bW9kZWxzLyR7ZmVhdHVyZU5hbWV9X3ZpZXdtb2RlbC5kYXJ0JywKICAgICAgICAgIGdlbmVyYXRlUml2ZXJwb2RWaWV3TW9kZWwoZmVhdHVyZU5hbWUpLAogICAgICAgICAgY29udGV4dCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnQkxvQyc6CiAgICAgIGNyZWF0ZUJsb2NGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwKICAgICAgICAgICdsaWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ZpZXdtb2RlbHMnLCBmZWF0dXJlTmFtZSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnR2V0WCc6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscy8ke2ZlYXR1cmVOYW1lfV92aWV3bW9kZWwuZGFydCcsCiAgICAgICAgICBnZW5lcmF0ZUdldFhWaWV3TW9kZWwoZmVhdHVyZU5hbWUpLAogICAgICAgICAgY29udGV4dCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnTW9iWCc6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscy8ke2ZlYXR1cmVOYW1lfV92aWV3bW9kZWwuZGFydCcsCiAgICAgICAgICBnZW5lcmF0ZU1vYlhWaWV3TW9kZWwoZmVhdHVyZU5hbWUpLAogICAgICAgICAgY29udGV4dCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnUmVkdXgnOgogICAgICBjcmVhdGVSZWR1eEZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lLAogICAgICAgICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld21vZGVscycsIGZlYXR1cmVOYW1lKTsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICBjcmVhdGVGaWxlKAogICAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ZpZXdtb2RlbHMvJHtmZWF0dXJlTmFtZX1fdmlld21vZGVsLmRhcnQnLAogICAgICAgICAgZ2VuZXJhdGVCYXNpY1ZpZXdNb2RlbChmZWF0dXJlTmFtZSksCiAgICAgICAgICBjb250ZXh0KTsKICB9Cn0KCnZvaWQgY3JlYXRlTVZDRmVhdHVyZShIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUsCiAgICBTdHJpbmcgZmVhdHVyZU5hbWUsIFN0cmluZyBzdGF0ZU1hbmFnZW1lbnQpIHsKICAvLyBDcmVhdGUgTVZDIHN0cnVjdHVyZSBmb3IgdGhlIGZlYXR1cmUKICBmaW5hbCBiYXNlRGlyZWN0b3JpZXMgPSBbCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9tb2RlbHMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld3MnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvY29udHJvbGxlcnMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvc2VydmljZXMnLAogIF07CgogIC8vIENyZWF0ZSBhbGwgYmFzZSBkaXJlY3RvcmllcwogIGZvciAoZmluYWwgZGlyIGluIGJhc2VEaXJlY3RvcmllcykgewogICAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KCckcHJvamVjdE5hbWUvJGRpcicpOwogICAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgZmVhdHVyZSBkaXJlY3Rvcnk6ICRkaXInKTsKICAgIH0KICB9CgogIC8vIENyZWF0ZSBzYW1wbGUgbW9kZWwKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvbW9kZWxzLyR7ZmVhdHVyZU5hbWV9X21vZGVsLmRhcnQnLAogICAgICAnJycKLy8gJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwKLy8gR2VuZXJhdGVkIGJ5IEZsdXR0ZXIgQnVubnkgQ2xp8J+QsAoKY2xhc3MgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwgewogIGZpbmFsIFN0cmluZyBpZDsKICBmaW5hbCBTdHJpbmcgbmFtZTsKICAvLyBBZGQgbW9yZSBmaWVsZHMgYXMgbmVlZGVkCiAgCiAgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9TW9kZWwoewogICAgcmVxdWlyZWQgdGhpcy5pZCwKICAgIHJlcXVpcmVkIHRoaXMubmFtZSwKICB9KTsKICAKICBmYWN0b3J5ICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfU1vZGVsLmZyb21Kc29uKE1hcDxTdHJpbmcsIGR5bmFtaWM+IGpzb24pIHsKICAgIHJldHVybiAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1Nb2RlbCgKICAgICAgaWQ6IGpzb25bJ2lkJ10sCiAgICAgIG5hbWU6IGpzb25bJ25hbWUnXSwKICAgICk7CiAgfQogIAogIE1hcDxTdHJpbmcsIGR5bmFtaWM+IHRvSnNvbigpIHsKICAgIHJldHVybiB7CiAgICAgICdpZCc6IGlkLAogICAgICAnbmFtZSc6IG5hbWUsCiAgICB9OwogIH0KfQonJycsCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIHZpZXcKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvdmlld3MvJHtmZWF0dXJlTmFtZX1fdmlldy5kYXJ0JywKICAgICAgJycnCi8vICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVZpZXcKLy8gR2VuZXJhdGVkIGJ5IEZsdXR0ZXIgQnVubnkgQ2xp8J+QsAppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKCgpjbGFzcyAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1WaWV3IGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBjb25zdCAke3RvQ2xhc3NOYW1lKGZlYXR1cmVOYW1lKX1WaWV3KHtLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIC8vIFVzZSBzdGF0ZSBtYW5hZ2VtZW50IGhlcmUgdG8gY29ubmVjdCB3aXRoIGNvbnRyb2xsZXIKICAgIHJldHVybiBTY2FmZm9sZCgKICAgICAgYXBwQmFyOiBBcHBCYXIoCiAgICAgICAgdGl0bGU6IFRleHQoJyR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfScpLAogICAgICApLAogICAgICBib2R5OiBDZW50ZXIoCiAgICAgICAgY2hpbGQ6IFRleHQoJyR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfSBWaWV3JyksCiAgICAgICksCiAgICApOwogIH0KfQonJycsCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIHNlcnZpY2UKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvc2VydmljZXMvJHtmZWF0dXJlTmFtZX1fc2VydmljZS5kYXJ0JywKICAgICAgJycnCi8vICR7dG9DbGFzc05hbWUoZmVhdHVyZU5hbWUpfVNlcnZpY2UKLy8gR2VuZXJhdGVkIGJ5IEZsdXR0ZXIgQnVubnkgQ2xp8J+QsAoKY2xhc3MgJHt0b0NsYXNzTmFtZShmZWF0dXJlTmFtZSl9U2VydmljZSB7CiAgLy8gVE9ETzogSW1wbGVtZW50IEFQSSBjYWxscywgZGF0YWJhc2Ugb3BlcmF0aW9ucywgZXRjLgogIAogIEZ1dHVyZTx2b2lkPiBmZXRjaERhdGEoKSBhc3luYyB7CiAgICAvLyBTYW1wbGUgaW1wbGVtZW50YXRpb24KICB9CiAgCiAgRnV0dXJlPHZvaWQ+IHNhdmVEYXRhKCkgYXN5bmMgewogICAgLy8gU2FtcGxlIGltcGxlbWVudGF0aW9uCiAgfQp9CicnJywKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzdGF0ZSBtYW5hZ2VtZW50LXNwZWNpZmljIGNvbnRyb2xsZXIKICBzd2l0Y2ggKHN0YXRlTWFuYWdlbWVudCkgewogICAgY2FzZSAnUHJvdmlkZXInOgogICAgICBjcmVhdGVGaWxlKAogICAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2NvbnRyb2xsZXJzLyR7ZmVhdHVyZU5hbWV9X2NvbnRyb2xsZXIuZGFydCcsCiAgICAgICAgICBnZW5lcmF0ZVByb3ZpZGVyQ29udHJvbGxlcihmZWF0dXJlTmFtZSksCiAgICAgICAgICBjb250ZXh0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdSaXZlcnBvZCc6CiAgICAgIGNyZWF0ZUZpbGUoCiAgICAgICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvY29udHJvbGxlcnMvJHtmZWF0dXJlTmFtZX1fY29udHJvbGxlci5kYXJ0JywKICAgICAgICAgIGdlbmVyYXRlUml2ZXJwb2RDb250cm9sbGVyKGZlYXR1cmVOYW1lKSwKICAgICAgICAgIGNvbnRleHQpOwogICAgICBicmVhazsKICAgIGNhc2UgJ0JMb0MnOgogICAgICBjcmVhdGVCbG9jRmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUsCiAgICAgICAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9jb250cm9sbGVycycsIGZlYXR1cmVOYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdHZXRYJzoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9jb250cm9sbGVycy8ke2ZlYXR1cmVOYW1lfV9jb250cm9sbGVyLmRhcnQnLAogICAgICAgICAgZ2VuZXJhdGVHZXRYQ29udHJvbGxlcihmZWF0dXJlTmFtZSksCiAgICAgICAgICBjb250ZXh0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNb2JYJzoKICAgICAgY3JlYXRlRmlsZSgKICAgICAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9jb250cm9sbGVycy8ke2ZlYXR1cmVOYW1lfV9jb250cm9sbGVyLmRhcnQnLAogICAgICAgICAgZ2VuZXJhdGVNb2JYQ29udHJvbGxlcihmZWF0dXJlTmFtZSksCiAgICAgICAgICBjb250ZXh0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdSZWR1eCc6CiAgICAgIGNyZWF0ZVJlZHV4RmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUsCiAgICAgICAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9jb250cm9sbGVycycsIGZlYXR1cmVOYW1lKTsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICBjcmVhdGVGaWxlKAogICAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2NvbnRyb2xsZXJzLyR7ZmVhdHVyZU5hbWV9X2NvbnRyb2xsZXIuZGFydCcsCiAgICAgICAgICBnZW5lcmF0ZUJhc2ljQ29udHJvbGxlcihmZWF0dXJlTmFtZSksCiAgICAgICAgICBjb250ZXh0KTsKICB9Cn0KCnZvaWQgY3JlYXRlRmVhdHVyZURyaXZlbkZlYXR1cmUoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lLAogICAgU3RyaW5nIGZlYXR1cmVOYW1lLCBTdHJpbmcgc3RhdGVNYW5hZ2VtZW50KSB7CiAgLy8gQ3JlYXRlIEZlYXR1cmUtRHJpdmVuIHN0cnVjdHVyZSBmb3IgdGhlIGZlYXR1cmUKICBmaW5hbCBiYXNlRGlyZWN0b3JpZXMgPSBbCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vZW50aXRpZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL3JlcG9zaXRvcmllcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vdXNlY2FzZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9tb2RlbHMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9yZXBvc2l0b3JpZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9kYXRhc291cmNlcycsCiAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24vcGFnZXMnLAogICAgJ2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvcHJlc2VudGF0aW9uL3dpZGdldHMnLAogIF07CgogIC8vIENyZWF0ZSBhbGwgYmFzZSBkaXJlY3RvcmllcwogIGZvciAoZmluYWwgZGlyIGluIGJhc2VEaXJlY3RvcmllcykgewogICAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KCckcHJvamVjdE5hbWUvJGRpcicpOwogICAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgZmVhdHVyZSBkaXJlY3Rvcnk6ICRkaXInKTsKICAgIH0KICB9CgogIC8vIENyZWF0ZSBzYW1wbGUgZW50aXR5CiAgY3JlYXRlRmlsZSgKICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL2RvbWFpbi9lbnRpdGllcy8ke2ZlYXR1cmVOYW1lfV9lbnRpdHkuZGFydCcsCiAgICAgIGdlbmVyYXRlRW50aXR5VGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgICBjb250ZXh0KTsKCiAgLy8gQ3JlYXRlIHNhbXBsZSByZXBvc2l0b3J5IGludGVyZmFjZQogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kb21haW4vcmVwb3NpdG9yaWVzLyR7ZmVhdHVyZU5hbWV9X3JlcG9zaXRvcnkuZGFydCcsCiAgICAgIGdlbmVyYXRlUmVwb3NpdG9yeVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzYW1wbGUgdXNlIGNhc2UKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZG9tYWluL3VzZWNhc2VzLyR7ZmVhdHVyZU5hbWV9X3VzZWNhc2UuZGFydCcsCiAgICAgIGdlbmVyYXRlVXNlQ2FzZVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzYW1wbGUgbW9kZWwKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9tb2RlbHMvJHtmZWF0dXJlTmFtZX1fbW9kZWwuZGFydCcsCiAgICAgIGdlbmVyYXRlTW9kZWxUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIHJlcG9zaXRvcnkgaW1wbGVtZW50YXRpb24KICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvZGF0YS9yZXBvc2l0b3JpZXMvJHtmZWF0dXJlTmFtZX1fcmVwb3NpdG9yeV9pbXBsLmRhcnQnLAogICAgICBnZW5lcmF0ZVJlcG9zaXRvcnlJbXBsVGVtcGxhdGUoZmVhdHVyZU5hbWUpLAogICAgICBjb250ZXh0KTsKCiAgLy8gQ3JlYXRlIHNhbXBsZSBkYXRhIHNvdXJjZQogIGNyZWF0ZUZpbGUoCiAgICAgICckcHJvamVjdE5hbWUvbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9kYXRhL2RhdGFzb3VyY2VzLyR7ZmVhdHVyZU5hbWV9X2RhdGFfc291cmNlLmRhcnQnLAogICAgICBnZW5lcmF0ZURhdGFTb3VyY2VUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc2FtcGxlIHBhZ2UKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy8kZmVhdHVyZU5hbWUvcHJlc2VudGF0aW9uL3BhZ2VzLyR7ZmVhdHVyZU5hbWV9X3BhZ2UuZGFydCcsCiAgICAgIGdlbmVyYXRlUGFnZVRlbXBsYXRlKGZlYXR1cmVOYW1lKSwKICAgICAgY29udGV4dCk7CgogIC8vIENyZWF0ZSBzYW1wbGUgd2lkZ2V0CiAgY3JlYXRlRmlsZSgKICAgICAgJyRwcm9qZWN0TmFtZS9saWIvZmVhdHVyZXMvJGZlYXR1cmVOYW1lL3ByZXNlbnRhdGlvbi93aWRnZXRzLyR7ZmVhdHVyZU5hbWV9X3dpZGdldC5kYXJ0JywKICAgICAgZ2VuZXJhdGVXaWRnZXRUZW1wbGF0ZShmZWF0dXJlTmFtZSksCiAgICAgIGNvbnRleHQpOwoKICAvLyBDcmVhdGUgc3RhdGUgbWFuYWdlbWVudCBmaWxlcwogIGNyZWF0ZVN0YXRlTWFuYWdlbWVudEZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lLAogICAgICAnbGliL2ZlYXR1cmVzLyRmZWF0dXJlTmFtZS9wcmVzZW50YXRpb24nLCBmZWF0dXJlTmFtZSwgc3RhdGVNYW5hZ2VtZW50KTsKfQo=",
      "type": "text"
    },
    {
      "path": "lib/integrate_network_generator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwoKLy8vIEludGVncmF0ZSB0aGUgbmV0d29yayBsYXllciB3aXRoIHRoZSBtYWluIHJ1biBmdW5jdGlvbiBhbmQgdXBkYXRlIHB1YnNwZWMueWFtbAp2b2lkIGludGVncmF0ZU5ldHdvcmtMYXllcihIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBVcGRhdGUgdGhlIHJ1biBmdW5jdGlvbiBpbiBtYWluLmRhcnQgdG8gaW1wb3J0IGFuZCBpbmNsdWRlIHRoZSBuZXR3b3JrIGxheWVyCiAgZmluYWwgbWFpbkRhcnRGaWxlID0gRmlsZSgnJHByb2plY3ROYW1lL2xpYi9tYWluLmRhcnQnKTsKICAKICBpZiAobWFpbkRhcnRGaWxlLmV4aXN0c1N5bmMoKSkgewogICAgU3RyaW5nIGNvbnRlbnQgPSBtYWluRGFydEZpbGUucmVhZEFzU3RyaW5nU3luYygpOwogICAgCiAgICAvLyBBZGQgaW1wb3J0cyBpZiBub3QgYWxyZWFkeSBwcmVzZW50CiAgICBpZiAoIWNvbnRlbnQuY29udGFpbnMoJ2Nvbm5lY3Rpdml0eV9zZXJ2aWNlLmRhcnQnKSkgewogICAgICBmaW5hbCBpbXBvcnRQYXR0ZXJuID0gUmVnRXhwKHInaW1wb3J0IC4qO1xuJyk7CiAgICAgIGZpbmFsIGxhc3RJbXBvcnRNYXRjaCA9IGltcG9ydFBhdHRlcm4uYWxsTWF0Y2hlcyhjb250ZW50KS5sYXN0T3JOdWxsOwogICAgICAKICAgICAgaWYgKGxhc3RJbXBvcnRNYXRjaCAhPSBudWxsKSB7CiAgICAgICAgZmluYWwgaW5zZXJ0UG9zaXRpb24gPSBsYXN0SW1wb3J0TWF0Y2guZW5kOwogICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBpbnNlcnRQb3NpdGlvbikgKwogICAgICAgICAgICAgICAgImltcG9ydCAncGFja2FnZTokcHJvamVjdE5hbWUvY29yZS9uZXR3b3JrL3NlcnZpY2VzL2Nvbm5lY3Rpdml0eV9zZXJ2aWNlLmRhcnQnO1xuIiArCiAgICAgICAgICAgICAgICAiaW1wb3J0ICdwYWNrYWdlOiRwcm9qZWN0TmFtZS9jb3JlL25ldHdvcmsvbmV0d29ya19pbmZvLmRhcnQnO1xuIiArCiAgICAgICAgICAgICAgICAiaW1wb3J0ICdwYWNrYWdlOmludGVybmV0X2Nvbm5lY3Rpb25fY2hlY2tlci9pbnRlcm5ldF9jb25uZWN0aW9uX2NoZWNrZXIuZGFydCc7XG4iICsKICAgICAgICAgICAgICAgIGNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvc2l0aW9uKTsKICAgICAgfQogICAgfQogICAgCiAgICAvLyBBZGQgbmV0d29yayBpbml0aWFsaXphdGlvbiBpZiBub3QgYWxyZWFkeSBwcmVzZW50CiAgICBpZiAoIWNvbnRlbnQuY29udGFpbnMoJ0Nvbm5lY3Rpdml0eVNlcnZpY2UoKScpKSB7CiAgICAgIC8vIEZpbmQgYSBnb29kIHBvc2l0aW9uIHRvIGluc2VydCB0aGUgaW5pdGlhbGl6YXRpb24KICAgICAgZmluYWwgc2V0dXBQb3NpdGlvbiA9IGNvbnRlbnQuaW5kZXhPZigndm9pZCBtYWluKCkgYXN5bmMgeycpICsgJ3ZvaWQgbWFpbigpIGFzeW5jIHsnLmxlbmd0aDsKICAgICAgCiAgICAgIGlmIChzZXR1cFBvc2l0aW9uID4gMCkgewogICAgICAgIC8vIEluc2VydCBuZXR3b3JrIGluaXRpYWxpemF0aW9uCiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIHNldHVwUG9zaXRpb24pICsgCiAgICAgICAgICAgICAgIlxuICAvLyBJbml0aWFsaXplIG5ldHdvcmsgc2VydmljZXNcbiIgKwogICAgICAgICAgICAgICIgIGZpbmFsIGNvbm5lY3Rpdml0eVNlcnZpY2UgPSBDb25uZWN0aXZpdHlTZXJ2aWNlKCk7XG4iICsKICAgICAgICAgICAgICAiICBmaW5hbCBuZXR3b3JrSW5mbyA9IE5ldHdvcmtJbmZvSW1wbChJbnRlcm5ldENvbm5lY3Rpb25DaGVja2VyKCkpO1xuXG4iICsKICAgICAgICAgICAgICBjb250ZW50LnN1YnN0cmluZyhzZXR1cFBvc2l0aW9uKTsKICAgICAgfQogICAgfQogICAgCiAgICAvLyBXcml0ZSB1cGRhdGVkIGNvbnRlbnQgYmFjayB0byBmaWxlCiAgICBtYWluRGFydEZpbGUud3JpdGVBc1N0cmluZ1N5bmMoY29udGVudCk7CiAgICBjb250ZXh0LmxvZ2dlci5zdWNjZXNzKCdVcGRhdGVkIG1haW4uZGFydCB3aXRoIG5ldHdvcmsgbGF5ZXIgaW5pdGlhbGl6YXRpb24nKTsKICB9Cn0KCi8vLyBVcGRhdGUgcHVic3BlYy55YW1sIHRvIGFkZCBuZXR3b3JrLXJlbGF0ZWQgZGVwZW5kZW5jaWVzCnZvaWQgdXBkYXRlUHVic3BlY0Zvck5ldHdvcmsoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgZmluYWwgcHVic3BlY0ZpbGUgPSBGaWxlKCckcHJvamVjdE5hbWUvcHVic3BlYy55YW1sJyk7CiAgaWYgKCFwdWJzcGVjRmlsZS5leGlzdHNTeW5jKCkpIHsKICAgIGNvbnRleHQubG9nZ2VyLndhcm4oJ3B1YnNwZWMueWFtbCBub3QgZm91bmQsIHNraXBwaW5nIGFkZGluZyBuZXR3b3JrIGRlcGVuZGVuY2llcycpOwogICAgcmV0dXJuOwogIH0KCiAgU3RyaW5nIGNvbnRlbnQgPSBwdWJzcGVjRmlsZS5yZWFkQXNTdHJpbmdTeW5jKCk7CiAgCiAgLy8gQ2hlY2sgaWYgdGhlIGRlcGVuZGVuY2llcyBhcmUgYWxyZWFkeSBhZGRlZAogIGlmICghY29udGVudC5jb250YWlucygnZGlvOicpIHx8ICFjb250ZW50LmNvbnRhaW5zKCdjb25uZWN0aXZpdHlfcGx1czonKSkgewogICAgLy8gRmluZCB0aGUgZW5kIG9mIHRoZSBkZXBlbmRlbmNpZXMgc2VjdGlvbgogICAgZmluYWwgZGVwZW5kZW5jaWVzTWF0Y2ggPSBSZWdFeHAocidkZXBlbmRlbmNpZXM6XHMqXG4oKFxzezJ9W1x3X10rOi4qXG4pKyknKS5maXJzdE1hdGNoKGNvbnRlbnQpOwogICAgCiAgICBpZiAoZGVwZW5kZW5jaWVzTWF0Y2ggIT0gbnVsbCkgewogICAgICBmaW5hbCBlbmRPZkRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llc01hdGNoLmVuZDsKICAgICAgCiAgICAgIC8vIE5ldHdvcmsgZGVwZW5kZW5jaWVzIHRvIGFkZAogICAgICBmaW5hbCBuZXR3b3JrRGVwZW5kZW5jaWVzID0gJycnCgogICMgTmV0d29yayBkZXBlbmRlbmNpZXMKICBkaW86IF41LjMuMwogIGNvbm5lY3Rpdml0eV9wbHVzOiBeNi4wLjAKICBpbnRlcm5ldF9jb25uZWN0aW9uX2NoZWNrZXI6IF4zLjAuMQonJyc7CiAgICAgIAogICAgICAvLyBJbnNlcnQgZGVwZW5kZW5jaWVzCiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBlbmRPZkRlcGVuZGVuY2llcykgKyAKICAgICAgICAgICAgICAgbmV0d29ya0RlcGVuZGVuY2llcyArIAogICAgICAgICAgICAgICBjb250ZW50LnN1YnN0cmluZyhlbmRPZkRlcGVuZGVuY2llcyk7CiAgICAgIAogICAgICAvLyBXcml0ZSB1cGRhdGVkIGNvbnRlbnQgYmFjayB0byBmaWxlCiAgICAgIHB1YnNwZWNGaWxlLndyaXRlQXNTdHJpbmdTeW5jKGNvbnRlbnQpOwogICAgICBjb250ZXh0LmxvZ2dlci5zdWNjZXNzKCdBZGRlZCBuZXR3b3JrIGRlcGVuZGVuY2llcyB0byBwdWJzcGVjLnlhbWwnKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnRleHQubG9nZ2VyLndhcm4oJ0NvdWxkIG5vdCBmaW5kIGRlcGVuZGVuY2llcyBzZWN0aW9uIGluIHB1YnNwZWMueWFtbCcpOwogICAgfQogIH0gZWxzZSB7CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdOZXR3b3JrIGRlcGVuZGVuY2llcyBhbHJlYWR5IGV4aXN0IGluIHB1YnNwZWMueWFtbCcpOwogIH0KfQoKLy8vIENyZWF0ZSBhIHNhbXBsZSBtb2RlbCB0byBkZW1vbnN0cmF0ZSBBUEkgdXNhZ2Ugd2l0aCBuZXR3b3JrIGxheWVyCnZvaWQgY3JlYXRlU2FtcGxlTW9kZWwoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KCckcHJvamVjdE5hbWUvbGliL2NvcmUvbmV0d29yay9tb2RlbHMnKTsKICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgfQogIAogIGZpbmFsIGZpbGVQYXRoID0gJyRwcm9qZWN0TmFtZS9saWIvY29yZS9uZXR3b3JrL21vZGVscy91c2VyX21vZGVsLmRhcnQnOwogIGZpbmFsIGNvbnRlbnQgPSAnJycKaW1wb3J0ICdwYWNrYWdlOmpzb25fYW5ub3RhdGlvbi9qc29uX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICd1c2VyX21vZGVsLmcuZGFydCc7CgovLy8gU2FtcGxlIHVzZXIgbW9kZWwgdG8gZGVtb25zdHJhdGUgQVBJIGludGVncmF0aW9uCkBKc29uU2VyaWFsaXphYmxlKCkKY2xhc3MgVXNlck1vZGVsIHsKICBmaW5hbCBpbnQgaWQ7CiAgZmluYWwgU3RyaW5nIG5hbWU7CiAgZmluYWwgU3RyaW5nIGVtYWlsOwogIAogIEBKc29uS2V5KG5hbWU6ICdwcm9maWxlX2ltYWdlJykKICBmaW5hbCBTdHJpbmc/IHByb2ZpbGVJbWFnZTsKICAKICBASnNvbktleShkZWZhdWx0VmFsdWU6IGZhbHNlKQogIGZpbmFsIGJvb2wgaXNBY3RpdmU7CgogIFVzZXJNb2RlbCh7CiAgICByZXF1aXJlZCB0aGlzLmlkLAogICAgcmVxdWlyZWQgdGhpcy5uYW1lLAogICAgcmVxdWlyZWQgdGhpcy5lbWFpbCwKICAgIHRoaXMucHJvZmlsZUltYWdlLAogICAgcmVxdWlyZWQgdGhpcy5pc0FjdGl2ZSwKICB9KTsKCiAgZmFjdG9yeSBVc2VyTW9kZWwuZnJvbUpzb24oTWFwPFN0cmluZywgZHluYW1pYz4ganNvbikgPT4gCiAgICAgIF9cJFVzZXJNb2RlbEZyb21Kc29uKGpzb24pOwogICAgICAKICBNYXA8U3RyaW5nLCBkeW5hbWljPiB0b0pzb24oKSA9PiBfXCRVc2VyTW9kZWxUb0pzb24odGhpcyk7Cn0KJycnOwoKICBmaW5hbCBmaWxlID0gRmlsZShmaWxlUGF0aCk7CiAgZmlsZS53cml0ZUFzU3RyaW5nU3luYyhjb250ZW50KTsKICAKICAvLyBDcmVhdGUgdGhlIGFzc29jaWF0ZWQgLmcuZGFydCBmaWxlCiAgZmluYWwgZ2VuZXJhdGVkRmlsZVBhdGggPSAnJHByb2plY3ROYW1lL2xpYi9jb3JlL25ldHdvcmsvbW9kZWxzL3VzZXJfbW9kZWwuZy5kYXJ0JzsKICBmaW5hbCBnZW5lcmF0ZWRDb250ZW50ID0gJycnCi8vIEdFTkVSQVRFRCBDT0RFIC0gRE8gTk9UIE1PRElGWSBCWSBIQU5ECgpwYXJ0IG9mICd1c2VyX21vZGVsLmRhcnQnOwoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gSnNvblNlcmlhbGl6YWJsZUdlbmVyYXRvcgovLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKVXNlck1vZGVsIF9cJFVzZXJNb2RlbEZyb21Kc29uKE1hcDxTdHJpbmcsIGR5bmFtaWM+IGpzb24pID0+IFVzZXJNb2RlbCgKICAgICAgaWQ6IGpzb25bJ2lkJ10gYXMgaW50LAogICAgICBuYW1lOiBqc29uWyduYW1lJ10gYXMgU3RyaW5nLAogICAgICBlbWFpbDoganNvblsnZW1haWwnXSBhcyBTdHJpbmcsCiAgICAgIHByb2ZpbGVJbWFnZToganNvblsncHJvZmlsZV9pbWFnZSddIGFzIFN0cmluZz8sCiAgICAgIGlzQWN0aXZlOiBqc29uWydpc0FjdGl2ZSddIGFzIGJvb2w/ID8/IGZhbHNlLAogICAgKTsKCk1hcDxTdHJpbmcsIGR5bmFtaWM+IF9cJFVzZXJNb2RlbFRvSnNvbihVc2VyTW9kZWwgaW5zdGFuY2UpID0+IDxTdHJpbmcsIGR5bmFtaWM+ewogICAgICAnaWQnOiBpbnN0YW5jZS5pZCwKICAgICAgJ25hbWUnOiBpbnN0YW5jZS5uYW1lLAogICAgICAnZW1haWwnOiBpbnN0YW5jZS5lbWFpbCwKICAgICAgJ3Byb2ZpbGVfaW1hZ2UnOiBpbnN0YW5jZS5wcm9maWxlSW1hZ2UsCiAgICAgICdpc0FjdGl2ZSc6IGluc3RhbmNlLmlzQWN0aXZlLAogICAgfTsKJycnOwoKICBmaW5hbCBnZW5lcmF0ZWRGaWxlID0gRmlsZShnZW5lcmF0ZWRGaWxlUGF0aCk7CiAgZ2VuZXJhdGVkRmlsZS53cml0ZUFzU3RyaW5nU3luYyhnZW5lcmF0ZWRDb250ZW50KTsKICAKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIHNhbXBsZSBtb2RlbCBmaWxlcyB0byBkZW1vbnN0cmF0ZSBBUEkgdXNhZ2UnKTsKfQoKLy8vIFNldHVwIE5ldHdvcmtNb2R1bGUgd2l0aCBkZXBlbmRlbmN5IGluamVjdGlvbiAoZXhhbXBsZSBmb3IgR2V0SXQgaWYgdXNlZCkKdm9pZCBzZXR1cE5ldHdvcmtNb2R1bGVGb3JESShIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUsIFN0cmluZyBhcmNoaXRlY3R1cmUpIHsKICAvLyBPbmx5IHByb2NlZWQgd2l0aCB0aGlzIGZvciBDbGVhbiBBcmNoaXRlY3R1cmUgd2hpY2ggbGlrZWx5IHVzZXMgZGVwZW5kZW5jeSBpbmplY3Rpb24KICBpZiAoYXJjaGl0ZWN0dXJlICE9ICdDbGVhbiBBcmNoaXRlY3R1cmUnKSB7CiAgICByZXR1cm47CiAgfQogIAogIGZpbmFsIGRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lL2xpYi9jb3JlL2RpJyk7CiAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICBkaXJlY3RvcnkuY3JlYXRlU3luYyhyZWN1cnNpdmU6IHRydWUpOwogIH0KICAKICBmaW5hbCBmaWxlUGF0aCA9ICckcHJvamVjdE5hbWUvbGliL2NvcmUvZGkvbmV0d29ya19tb2R1bGUuZGFydCc7CiAgZmluYWwgY29udGVudCA9ICcnJwppbXBvcnQgJ3BhY2thZ2U6ZGlvL2Rpby5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmdldF9pdC9nZXRfaXQuZGFydCc7CmltcG9ydCAncGFja2FnZTppbnRlcm5ldF9jb25uZWN0aW9uX2NoZWNrZXIvaW50ZXJuZXRfY29ubmVjdGlvbl9jaGVja2VyLmRhcnQnOwoKaW1wb3J0ICcuLi9uZXR3b3JrL2FwaV9jbGllbnQuZGFydCc7CmltcG9ydCAnLi4vbmV0d29yay9hcGlfY29uc3RhbnRzLmRhcnQnOwppbXBvcnQgJy4uL25ldHdvcmsvbmV0d29ya19pbmZvLmRhcnQnOwppbXBvcnQgJy4uL25ldHdvcmsvc2VydmljZXMvY29ubmVjdGl2aXR5X3NlcnZpY2UuZGFydCc7CgovLy8gUmVnaXN0ZXIgbmV0d29yay1yZWxhdGVkIGRlcGVuZGVuY2llcwp2b2lkIHJlZ2lzdGVyTmV0d29ya0RlcGVuZGVuY2llcyhHZXRJdCBzbCkgewogIC8vIENvcmUgbmV0d29yayBjb21wb25lbnRzCiAgc2wucmVnaXN0ZXJMYXp5U2luZ2xldG9uPEludGVybmV0Q29ubmVjdGlvbkNoZWNrZXI+KAogICAgKCkgPT4gSW50ZXJuZXRDb25uZWN0aW9uQ2hlY2tlcigpLAogICk7CiAgCiAgc2wucmVnaXN0ZXJMYXp5U2luZ2xldG9uPE5ldHdvcmtJbmZvPigKICAgICgpID0+IE5ldHdvcmtJbmZvSW1wbChzbDxJbnRlcm5ldENvbm5lY3Rpb25DaGVja2VyPigpKSwKICApOwogIAogIHNsLnJlZ2lzdGVyTGF6eVNpbmdsZXRvbjxDb25uZWN0aXZpdHlTZXJ2aWNlPigKICAgICgpID0+IENvbm5lY3Rpdml0eVNlcnZpY2UoKSwKICApOwogIAogIC8vIEFQSSBjbGllbnQKICBzbC5yZWdpc3RlckxhenlTaW5nbGV0b248QXBpQ2xpZW50PigKICAgICgpID0+IEFwaUNsaWVudCgKICAgICAgYmFzZVVybDogQXBpQ29uc3RhbnRzLmJhc2VVcmwsCiAgICAgIHRpbWVvdXQ6IEFwaUNvbnN0YW50cy50aW1lb3V0LAogICAgICB1c2VBdXRoOiB0cnVlLAogICAgKSwKICApOwogIAogIC8vIFJlZ2lzdGVyIGluZGl2aWR1YWwgQVBJIHNlcnZpY2VzCiAgLy8gVE9ETzogQWRkIHlvdXIgQVBJIHNlcnZpY2VzIGhlcmUKICAvLyBFeGFtcGxlOgogIC8vIHNsLnJlZ2lzdGVyTGF6eVNpbmdsZXRvbjxVc2VyQXBpU2VydmljZT4oCiAgLy8gICAoKSA9PiBVc2VyQXBpU2VydmljZSgpLAogIC8vICk7Cn0KJycnOwoKICBmaW5hbCBmaWxlID0gRmlsZShmaWxlUGF0aCk7CiAgZmlsZS53cml0ZUFzU3RyaW5nU3luYyhjb250ZW50KTsKICAKICAvLyBVcGRhdGUgdGhlIG1haW4gREkgZmlsZSBpZiBpdCBleGlzdHMKICBmaW5hbCBkaUZpbGVQYXRoID0gJyRwcm9qZWN0TmFtZS9saWIvY29yZS9kaS9pbmplY3Rpb24uZGFydCc7CiAgZmluYWwgZGlGaWxlID0gRmlsZShkaUZpbGVQYXRoKTsKICAKICBpZiAoZGlGaWxlLmV4aXN0c1N5bmMoKSkgewogICAgU3RyaW5nIGRpQ29udGVudCA9IGRpRmlsZS5yZWFkQXNTdHJpbmdTeW5jKCk7CiAgICAKICAgIC8vIEFkZCBpbXBvcnQgaWYgbm90IHByZXNlbnQKICAgIGlmICghZGlDb250ZW50LmNvbnRhaW5zKCduZXR3b3JrX21vZHVsZS5kYXJ0JykpIHsKICAgICAgZmluYWwgaW1wb3J0UGF0dGVybiA9IFJlZ0V4cChyJ2ltcG9ydCAuKjtcbicpOwogICAgICBmaW5hbCBsYXN0SW1wb3J0TWF0Y2ggPSBpbXBvcnRQYXR0ZXJuLmFsbE1hdGNoZXMoZGlDb250ZW50KS5sYXN0T3JOdWxsOwogICAgICAKICAgICAgaWYgKGxhc3RJbXBvcnRNYXRjaCAhPSBudWxsKSB7CiAgICAgICAgZmluYWwgaW5zZXJ0UG9zaXRpb24gPSBsYXN0SW1wb3J0TWF0Y2guZW5kOwogICAgICAgIGRpQ29udGVudCA9IGRpQ29udGVudC5zdWJzdHJpbmcoMCwgaW5zZXJ0UG9zaXRpb24pICsKICAgICAgICAgICAgICAgICAiaW1wb3J0ICduZXR3b3JrX21vZHVsZS5kYXJ0JztcbiIgKwogICAgICAgICAgICAgICAgIGRpQ29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pOwogICAgICB9CiAgICB9CiAgICAKICAgIC8vIEFkZCBuZXR3b3JrIHJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBjYWxsIGlmIG5vdCBwcmVzZW50CiAgICBpZiAoIWRpQ29udGVudC5jb250YWlucygncmVnaXN0ZXJOZXR3b3JrRGVwZW5kZW5jaWVzJykpIHsKICAgICAgZmluYWwgY29uZmlnUGF0dGVybiA9IFJlZ0V4cChyJ3ZvaWQgY29uZmlndXJlRGVwZW5kZW5jaWVzXChcKSBhc3luYyBceycpOwogICAgICBmaW5hbCBjb25maWdNYXRjaCA9IGNvbmZpZ1BhdHRlcm4uZmlyc3RNYXRjaChkaUNvbnRlbnQpOwogICAgICAKICAgICAgaWYgKGNvbmZpZ01hdGNoICE9IG51bGwpIHsKICAgICAgICBmaW5hbCBpbnNlcnRQb3NpdGlvbiA9IGNvbmZpZ01hdGNoLmVuZDsKICAgICAgICBkaUNvbnRlbnQgPSBkaUNvbnRlbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvc2l0aW9uKSArCiAgICAgICAgICAgICAgICAgIlxuICAvLyBSZWdpc3RlciBuZXR3b3JrIGRlcGVuZGVuY2llc1xuIiArCiAgICAgICAgICAgICAgICAgIiAgcmVnaXN0ZXJOZXR3b3JrRGVwZW5kZW5jaWVzKHNsKTtcbiIgKwogICAgICAgICAgICAgICAgIGRpQ29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pOwogICAgICB9CiAgICB9CiAgICAKICAgIC8vIFdyaXRlIHVwZGF0ZWQgY29udGVudCBiYWNrIHRvIGZpbGUKICAgIGRpRmlsZS53cml0ZUFzU3RyaW5nU3luYyhkaUNvbnRlbnQpOwogIH0KICAKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIG5ldHdvcmsgbW9kdWxlIGZvciBkZXBlbmRlbmN5IGluamVjdGlvbicpOwp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/integrate_theme_manager.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/localization_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/main_configurator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCi8vLyBHZW5lcmF0ZXMgdGhlIG1haW4uZGFydCBmaWxlIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBhcmNoaXRlY3R1cmUsIHN0YXRlIG1hbmFnZW1lbnQsCi8vLyBmZWF0dXJlcywgYW5kIG1vZHVsZXMKdm9pZCBnZW5lcmF0ZU1haW5EYXJ0KAogICAgSG9va0NvbnRleHQgY29udGV4dCwKICAgIFN0cmluZyBwcm9qZWN0TmFtZSwKICAgIFN0cmluZyBvcmdhbml6YXRpb24sCiAgICBTdHJpbmcgYXJjaGl0ZWN0dXJlLAogICAgU3RyaW5nIHN0YXRlTWFuYWdlbWVudCwKICAgIExpc3Q8ZHluYW1pYz4gZmVhdHVyZXMsCiAgICBMaXN0PGR5bmFtaWM+IG1vZHVsZXMpIHsKICBmaW5hbCBtYWluRmlsZSA9IEZpbGUoJyRwcm9qZWN0TmFtZS9saWIvbWFpbi5kYXJ0Jyk7CiAgU3RyaW5nIG1haW5Db250ZW50ID0gJyc7CgogIC8vIFN0YXJ0IHdpdGggaW1wb3J0cyBiYXNlZCBvbiBhcmNoaXRlY3R1cmUgYW5kIHN0YXRlIG1hbmFnZW1lbnQKICBtYWluQ29udGVudCA9ICcnJwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvc2VydmljZXMuZGFydCc7CmltcG9ydCAnZGFydDphc3luYyc7CicnJzsKCiAgaWYgKG1vZHVsZXMuY29udGFpbnMoJ1RoZW1lIE1hbmFnZXInKSkgewogICAgbWFpbkNvbnRlbnQgKz0gJycnCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3NlcnZpY2VzLmRhcnQnOwonJyc7CiAgfQoKICAvLyBBZGQgaW1wb3J0cyBiYXNlZCBvbiBzdGF0ZSBtYW5hZ2VtZW50CiAgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnQmxvYycpIHsKICAgIG1haW5Db250ZW50ICs9ICcnJwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9ibG9jL2ZsdXR0ZXJfYmxvYy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmh5ZHJhdGVkX2Jsb2MvaHlkcmF0ZWRfYmxvYy5kYXJ0JzsKJycnOwogIH0gZWxzZSBpZiAoc3RhdGVNYW5hZ2VtZW50ID09ICdQcm92aWRlcicpIHsKICAgIG1haW5Db250ZW50ICs9ICcnJwppbXBvcnQgJ3BhY2thZ2U6cHJvdmlkZXIvcHJvdmlkZXIuZGFydCc7CicnJzsKICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnUml2ZXJwb2QnKSB7CiAgICBtYWluQ29udGVudCArPSAnJycKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfcml2ZXJwb2QvZmx1dHRlcl9yaXZlcnBvZC5kYXJ0JzsKJycnOwogIH0gZWxzZSBpZiAoc3RhdGVNYW5hZ2VtZW50ID09ICdHZXRYJykgewogICAgbWFpbkNvbnRlbnQgKz0gJycnCmltcG9ydCAncGFja2FnZTpnZXQvZ2V0LmRhcnQnOwonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ01vYlgnKSB7CiAgICBtYWluQ29udGVudCArPSAnJycKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfbW9ieC9mbHV0dGVyX21vYnguZGFydCc7CicnJzsKICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnUmVkdXgnKSB7CiAgICBtYWluQ29udGVudCArPSAnJycKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfcmVkdXgvZmx1dHRlcl9yZWR1eC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnJlZHV4L3JlZHV4LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6JHByb2plY3ROYW1lL2NvcmUvcmVkdXgvYXBwX3JlZHVjZXIuZGFydCc7CmltcG9ydCAncGFja2FnZTokcHJvamVjdE5hbWUvY29yZS9yZWR1eC9hcHBfc3RhdGUuZGFydCc7CmltcG9ydCAncGFja2FnZTpyZWR1eF90aHVuay9yZWR1eF90aHVuay5kYXJ0JzsKJycnOwogIH0KCiAgLy8gQWRkIGFyY2hpdGVjdHVyZSBzcGVjaWZpYyBpbXBvcnRzCiAgaWYgKGFyY2hpdGVjdHVyZSA9PSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgbWFpbkNvbnRlbnQgKz0gJycnCmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2RvdGVudi9mbHV0dGVyX2RvdGVudi5kYXJ0JzsKCicnJzsKICB9IGVsc2UgaWYgKGFyY2hpdGVjdHVyZSA9PSAnTVZWTScpIHsKICAgIG1haW5Db250ZW50ICs9ICcnJwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9kb3RlbnYvZmx1dHRlcl9kb3RlbnYuZGFydCc7CicnJzsKICB9IGVsc2UgaWYgKGFyY2hpdGVjdHVyZSA9PSAnTVZDJykgewogICAgbWFpbkNvbnRlbnQgKz0gJycnCmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2RvdGVudi9mbHV0dGVyX2RvdGVudi5kYXJ0JzsKJycnOwogIH0gZWxzZSBpZiAoYXJjaGl0ZWN0dXJlID09ICdGZWF0dXJlLURyaXZlbicpIHsKICAgIG1haW5Db250ZW50ICs9ICcnJwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9tb2R1bGFyL2ZsdXR0ZXJfbW9kdWxhci5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOiRwcm9qZWN0TmFtZS9hcHAvYXBwX21vZHVsZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOiRwcm9qZWN0TmFtZS9hcHAvYXBwX3dpZGdldC5kYXJ0JzsKJycnOwogIH0KCiAgLy8gSW1wb3J0IGFwcCB3aWRnZXQgYmFzZWQgb24gYXJjaGl0ZWN0dXJlCiAgaWYgKGFyY2hpdGVjdHVyZSAhPSAnRmVhdHVyZS1Ecml2ZW4nKSB7CiAgICBtYWluQ29udGVudCArPSAnJycKaW1wb3J0ICdwYWNrYWdlOiRwcm9qZWN0TmFtZS9hcHAvYXBwLmRhcnQnOwonJyc7CiAgfQoKICAvLyBNYWluIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgbWFpbkNvbnRlbnQgKz0gJycnCgp2b2lkIG1haW4oKSBhc3luYyB7CiAgV2lkZ2V0c0ZsdXR0ZXJCaW5kaW5nLmVuc3VyZUluaXRpYWxpemVkKCk7CicnJzsKCiAgaWYgKGFyY2hpdGVjdHVyZSA9PSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgbWFpbkNvbnRlbnQgKz0gJycnCiAgYXdhaXQgZG90ZW52LmxvYWQoZmlsZU5hbWU6ICIuZW52Iik7CicnJzsKICB9IGVsc2UgaWYgKGFyY2hpdGVjdHVyZSA9PSAnTVZWTScpIHsKICAgIG1haW5Db250ZW50ICs9ICcnJwogIGF3YWl0IGRvdGVudi5sb2FkKGZpbGVOYW1lOiAiLmVudiIpOwonJyc7CiAgfQoKICAvLyBTZXR1cCBzdGF0ZSBtYW5hZ2VtZW50IGluaXRpYWxpemF0aW9uCiAgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnQmxvYycpIHsKICAgIG1haW5Db250ZW50ICs9ICcnJwoKICBCbG9jLm9ic2VydmVyID0gQXBwQmxvY09ic2VydmVyKCk7CicnJzsKICB9CgogIC8vIFBsYXRmb3JtLXNwZWNpZmljIGNvbmZpZ3VyYXRpb25zCiAgbWFpbkNvbnRlbnQgKz0gJycnCiAgLy8gU2V0IHByZWZlcnJlZCBvcmllbnRhdGlvbnMKICBhd2FpdCBTeXN0ZW1DaHJvbWUuc2V0UHJlZmVycmVkT3JpZW50YXRpb25zKFsKICAgIERldmljZU9yaWVudGF0aW9uLnBvcnRyYWl0VXAsCiAgICBEZXZpY2VPcmllbnRhdGlvbi5wb3J0cmFpdERvd24sCiAgXSk7CiAgCiAgLy8gU2V0IHN5c3RlbSBVSSBvdmVybGF5IHN0eWxlCiAgU3lzdGVtQ2hyb21lLnNldFN5c3RlbVVJT3ZlcmxheVN0eWxlKAogICAgY29uc3QgU3lzdGVtVWlPdmVybGF5U3R5bGUoCiAgICAgIHN0YXR1c0JhckNvbG9yOiBDb2xvcnMudHJhbnNwYXJlbnQsCiAgICAgIHN0YXR1c0Jhckljb25CcmlnaHRuZXNzOiBCcmlnaHRuZXNzLmRhcmssCiAgICAgIHN5c3RlbU5hdmlnYXRpb25CYXJDb2xvcjogQ29sb3JzLndoaXRlLAogICAgICBzeXN0ZW1OYXZpZ2F0aW9uQmFySWNvbkJyaWdodG5lc3M6IEJyaWdodG5lc3MuZGFyaywKICAgICksCiAgKTsKJycnOwoKICAvLyBBcHAgbGF1bmNoIGJhc2VkIG9uIGFyY2hpdGVjdHVyZSBhbmQgc3RhdGUgbWFuYWdlbWVudAogIGlmIChhcmNoaXRlY3R1cmUgPT0gJ0ZlYXR1cmUtRHJpdmVuJykgewogICAgbWFpbkNvbnRlbnQgKz0gJycnCiAgcnVuQXBwKE1vZHVsYXJBcHAobW9kdWxlOiBBcHBNb2R1bGUoKSwgY2hpbGQ6IGNvbnN0IEFwcFdpZGdldCgpKSk7CicnJzsKICB9IGVsc2UgewogICAgLy8gUnVuIGFwcCBiYXNlZCBvbiBzdGF0ZSBtYW5hZ2VtZW50CiAgICBpZiAoc3RhdGVNYW5hZ2VtZW50ID09ICdQcm92aWRlcicpIHsKICAgICAgbWFpbkNvbnRlbnQgKz0gJycnCiAgcnVuQXBwKAogICAgTXVsdGlQcm92aWRlcigKICAgICAgcHJvdmlkZXJzOiBbCiAgICAgICAgLy8gQWRkIHlvdXIgcHJvdmlkZXJzIGhlcmUKICAgICAgICAvLyBDaGFuZ2VOb3RpZmllclByb3ZpZGVyKGNyZWF0ZTogKF8pID0+IFlvdXJQcm92aWRlcigpKSwKICAgICAgXSwKICAgICAgY2hpbGQ6IGNvbnN0IEFwcCgpLAogICAgKSwKICApOwonJyc7CiAgICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnUml2ZXJwb2QnKSB7CiAgICAgIG1haW5Db250ZW50ICs9ICcnJwogIHJ1bkFwcCgKICAgIGNvbnN0IFByb3ZpZGVyU2NvcGUoCiAgICAgIGNoaWxkOiBBcHAoKSwKICAgICksCiAgKTsKJycnOwogICAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ0dldFgnKSB7CiAgICAgIG1haW5Db250ZW50ICs9ICcnJwogIHJ1bkFwcChjb25zdCBBcHAoKSk7CicnJzsKICAgIH0gZWxzZSBpZiAoc3RhdGVNYW5hZ2VtZW50ID09ICdCbG9jJykgewogICAgICBtYWluQ29udGVudCArPSAnJycKICBydW5BcHAoCiAgICBNdWx0aUJsb2NQcm92aWRlcigKICAgICAgcHJvdmlkZXJzOiBbCiAgICAgICAgLy8gQWRkIHlvdXIgQkxvQ3MgaGVyZQogICAgICAgIC8vIEJsb2NQcm92aWRlcihjcmVhdGU6IChfKSA9PiBZb3VyQmxvYygpKSwKICAgICAgXSwKICAgICAgY2hpbGQ6IGNvbnN0IEFwcCgpLAogICAgKSwKICApOwonJyc7CiAgICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnTW9iWCcpIHsKICAgICAgbWFpbkNvbnRlbnQgKz0gJycnCiAgcnVuQXBwKGNvbnN0IEFwcCgpKTsKJycnOwogICAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1JlZHV4JykgewogICAgICBtYWluQ29udGVudCArPSAnJycKICBmaW5hbCBzdG9yZSA9IFN0b3JlPEFwcFN0YXRlPigKICAgIGFwcFJlZHVjZXIsCiAgICBpbml0aWFsU3RhdGU6IEFwcFN0YXRlLmluaXRpYWwoKSwKICAgIG1pZGRsZXdhcmU6IFt0aHVua01pZGRsZXdhcmVdLAogICk7CiAgCiAgcnVuQXBwKAogICAgU3RvcmVQcm92aWRlcjxBcHBTdGF0ZT4oCiAgICAgIHN0b3JlOiBzdG9yZSwKICAgICAgY2hpbGQ6IGNvbnN0IEFwcCgpLAogICAgKSwKICApOwonJyc7CiAgICB9IGVsc2UgewogICAgICAvLyBEZWZhdWx0CiAgICAgIG1haW5Db250ZW50ICs9ICcnJwogIHJ1bkFwcChjb25zdCBBcHAoKSk7CicnJzsKICAgIH0KICB9CgogIC8vIENsb3NlIG1haW4gZnVuY3Rpb24KICBtYWluQ29udGVudCArPSAnJyd9CicnJzsKCiAgLy8gQ3JlYXRlIHBhcmVudCBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdAogIGZpbmFsIGxpYkRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lL2xpYicpOwogIGlmICghbGliRGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgbGliRGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgbGliIGRpcmVjdG9yeTogJHByb2plY3ROYW1lL2xpYicpOwogIH0KCiAgLy8gV3JpdGUgdGhlIG1haW4uZGFydCBmaWxlCiAgbWFpbkZpbGUud3JpdGVBc1N0cmluZ1N5bmMobWFpbkNvbnRlbnQpOwogIGNvbnRleHQubG9nZ2VyLnN1Y2Nlc3MoJ0dlbmVyYXRlZCBtYWluLmRhcnQgYmFzZWQgb24gcHJvamVjdCBjb25maWd1cmF0aW9uJyk7Cn0K",
      "type": "text"
    },
    {
      "path": "lib/network_layer_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/pubsec_configurator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCi8vLyBDb25maWd1cmVzIHRoZSBwdWJzcGVjLnlhbWwgZmlsZSBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgYXJjaGl0ZWN0dXJlLCBzdGF0ZSBtYW5hZ2VtZW50LAovLy8gZmVhdHVyZXMsIGFuZCBtb2R1bGVzCnZvaWQgY29uZmlndXJlUHVic3BlYygKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsCiAgICBTdHJpbmcgcHJvamVjdE5hbWUsCiAgICBTdHJpbmcgb3JnYW5pemF0aW9uLAogICAgU3RyaW5nIGFyY2hpdGVjdHVyZSwKICAgIFN0cmluZyBzdGF0ZU1hbmFnZW1lbnQsCiAgICBMaXN0PGR5bmFtaWM+IGZlYXR1cmVzLAogICAgTGlzdDxkeW5hbWljPiBtb2R1bGVzKSB7CiAgZmluYWwgcHVic3BlY0ZpbGUgPSBGaWxlKCckcHJvamVjdE5hbWUvcHVic3BlYy55YW1sJyk7CiAgU3RyaW5nIHB1YnNwZWNDb250ZW50ID0gJyc7CgogIC8vIENyZWF0ZSBwdWJzcGVjIHRlbXBsYXRlIGNvbnRlbnQKICBwdWJzcGVjQ29udGVudCA9ICcnJwpuYW1lOiAkcHJvamVjdE5hbWUKZGVzY3JpcHRpb246IEEgRmx1dHRlciBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgYnkgQnVubnkgQ0xJLgpwdWJsaXNoX3RvOiAnbm9uZScgIyBSZW1vdmUgdGhpcyBsaW5lIGlmIHlvdSB3aXNoIHRvIHB1Ymxpc2ggdG8gcHViLmRldgp2ZXJzaW9uOiAxLjAuMCsxCgplbnZpcm9ubWVudDoKICBzZGs6IF4zLjYuMAoKZGVwZW5kZW5jaWVzOgogIGZsdXR0ZXI6CiAgICBzZGs6IGZsdXR0ZXIKICBmbHV0dGVyX2xvY2FsaXphdGlvbnM6CiAgICBzZGs6IGZsdXR0ZXIKCiAgIyBDb3JlIHBhY2thZ2VzCiAgY3VwZXJ0aW5vX2ljb25zOiBeMS4wLjYKICBpbnRsOiBhbnkKICBlcXVhdGFibGU6IF4yLjAuNQogIHBhdGhfcHJvdmlkZXI6IF4yLjEuMQogIHNoYXJlZF9wcmVmZXJlbmNlczogXjIuNS4yCiAgZmx1dHRlcl9zZWN1cmVfc3RvcmFnZTogXjkuMC4wCiAgY2FjaGVkX25ldHdvcmtfaW1hZ2U6IF4zLjMuMAogIHVybF9sYXVuY2hlcjogXjYuMS4xNAogIGNvbm5lY3Rpdml0eV9wbHVzOiBeNi4wLjAKICBmbHV0dGVyX3N2ZzogXjIuMC45CiAgZmx1dHRlcl9kb3RlbnY6IF41LjEuMAogIGpzb25fYW5ub3RhdGlvbjogXjQuOC4xCiAgZnJlZXplZF9hbm5vdGF0aW9uOiBeMi40LjEKICBzaGltbWVyOiBeMy4wLjAKICBkaW86IF41LjMuMwogIGxvZ2dlcjogXjIuMC4yCicnJzsKCiAgLy8gQWRkIHN0YXRlIG1hbmFnZW1lbnQgZGVwZW5kZW5jaWVzCiAgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnQmxvYycgfHwgc3RhdGVNYW5hZ2VtZW50ID09ICdCTG9DJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBCTG9DIHN0YXRlIG1hbmFnZW1lbnQKICBmbHV0dGVyX2Jsb2M6IF44LjEuMwogIGJsb2M6IF44LjEuMgogIGh5ZHJhdGVkX2Jsb2M6IF44LjAuMAonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1Byb3ZpZGVyJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBQcm92aWRlciBzdGF0ZSBtYW5hZ2VtZW50CiAgcHJvdmlkZXI6IF42LjAuNQonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1JpdmVycG9kJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBSaXZlcnBvZCBzdGF0ZSBtYW5hZ2VtZW50CiAgZmx1dHRlcl9yaXZlcnBvZDogXjIuNi4xCicnJzsKICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnR2V0WCcpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogICMgR2V0WCBzdGF0ZSBtYW5hZ2VtZW50CiAgZ2V0OiBeNC43LjIKJycnOwogIH0gZWxzZSBpZiAoc3RhdGVNYW5hZ2VtZW50ID09ICdNb2JYJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBNb2JYIHN0YXRlIG1hbmFnZW1lbnQKICBtb2J4OiBeMi41LjAKICBmbHV0dGVyX21vYng6IF4yLjEuMAonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1JlZHV4JykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBSZWR1eCBzdGF0ZSBtYW5hZ2VtZW50CiAgcmVkdXg6IF41LjAuMAogIGZsdXR0ZXJfcmVkdXg6IF4wLjEwLjAKICByZWR1eF90aHVuazogXjAuNC4wCicnJzsKICB9CgogIC8vIEFkZCBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgZGVwZW5kZW5jaWVzCiAgaWYgKGFyY2hpdGVjdHVyZSA9PSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBDbGVhbiBBcmNoaXRlY3R1cmUgZGVwZW5kZW5jaWVzCiAgZGFydHo6IF4wLjEwLjEKICBpbmplY3RhYmxlOiBeMi4zLjAKICBnZXRfaXQ6IF43LjYuNAonJyc7CiAgfSBlbHNlIGlmIChhcmNoaXRlY3R1cmUgPT0gJ01WVk0nKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICAjIE1WVk0gQXJjaGl0ZWN0dXJlIGRlcGVuZGVuY2llcwogIHN0YWNrZWQ6IF4zLjQuMQogIHN0YWNrZWRfc2VydmljZXM6IF4xLjMuMAonJyc7CiAgfSBlbHNlIGlmIChhcmNoaXRlY3R1cmUgPT0gJ0ZlYXR1cmUtRHJpdmVuJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBGZWF0dXJlLURyaXZlbiBBcmNoaXRlY3R1cmUgZGVwZW5kZW5jaWVzCiAgZ29fcm91dGVyOiBeMTIuMS4xCiAgZmx1dHRlcl9tb2R1bGFyOiBeNi4zLjIKJycnOwogIH0KCiAgaWYgKGZlYXR1cmVzLmNvbnRhaW5zKCdVc2VyIFByb2ZpbGUnKSkgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBVc2VyIFByb2ZpbGUgZGVwZW5kZW5jaWVzCiAgaW1hZ2VfcGlja2VyOiBeMS4wLjQKICBpbWFnZV9jcm9wcGVyOiBeNS4wLjEKJycnOwogIH0KCiAgaWYgKGZlYXR1cmVzLmNvbnRhaW5zKCdQcm9kdWN0cycpKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICAjIFByb2R1Y3RzIGZlYXR1cmUgZGVwZW5kZW5jaWVzCiAgY2Fyb3VzZWxfc2xpZGVyOiBeNC4yLjEKICBpbmZpbml0ZV9zY3JvbGxfcGFnaW5hdGlvbjogXjQuMC4wCicnJzsKICB9CgogIC8vIEFkZCBkZXYgZGVwZW5kZW5jaWVzCiAgcHVic3BlY0NvbnRlbnQgKz0gJycnCgpkZXZfZGVwZW5kZW5jaWVzOgogIGZsdXR0ZXJfdGVzdDoKICAgIHNkazogZmx1dHRlcgogIGZsdXR0ZXJfbGludHM6IF4zLjAuMAogIGJ1aWxkX3J1bm5lcjogXjIuNC42CiAgZmx1dHRlcl9nZW5fcnVubmVyOiBeNS4zLjIKICBmbHV0dGVyX2xhdW5jaGVyX2ljb25zOiBeMC4xMy4xCiAgc291cmNlX2dlbjogXjEuNC4wCicnJzsKCiAgLy8gQWRkIHN0YXRlIG1hbmFnZW1lbnQtc3BlY2lmaWMgZGV2IGRlcGVuZGVuY2llcwogIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ0Jsb2MnIHx8IHN0YXRlTWFuYWdlbWVudCA9PSAnQkxvQycpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogIGJsb2NfdGVzdDogXjkuMS40CicnJzsKICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnUml2ZXJwb2QnKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICByaXZlcnBvZF9nZW5lcmF0b3I6IF4yLjMuNQonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ01vYlgnKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICBtb2J4X2NvZGVnZW46IF4yLjcuMAonJyc7CiAgfQoKICAvLyBBZGQgZmVhdHVyZS1zcGVjaWZpYyBkZXYgZGVwZW5kZW5jaWVzCiAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAganNvbl9zZXJpYWxpemFibGU6IF42LjcuMQogIGZyZWV6ZWQ6IF4yLjQuNQonJyc7CgogIGlmIChtb2R1bGVzLmNvbnRhaW5zKCdOZXR3b3JrIExheWVyJykpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogIGludGVybmV0X2Nvbm5lY3Rpb25fY2hlY2tlcjogXjMuMC4xCicnJzsKICB9CgogIGlmIChtb2R1bGVzLmNvbnRhaW5zKCdMb2NhbCBTdG9yYWdlJykpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogIGhpdmVfZ2VuZXJhdG9yOiBeMi4wLjEKJycnOwogIH0KCiAgaWYgKGFyY2hpdGVjdHVyZSA9PSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgaW5qZWN0YWJsZV9nZW5lcmF0b3I6IF4yLjQuMAonJyc7CiAgfQovLyAgIGVsc2UgaWYgKGFyY2hpdGVjdHVyZSA9PSAnTVZWTScpIHsKLy8gICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwovLyAgIHN0YWNrZWRfZ2VuZXJhdG9yOiBeMS41LjEKLy8gJycnOwovLyAgIH0KCiAgLy8gQWRkIEZsdXR0ZXIgY29uZmlndXJhdGlvbgogIHB1YnNwZWNDb250ZW50ICs9ICcnJwoKIyBGbHV0dGVyIGNvbmZpZ3VyYXRpb24KZmx1dHRlcjoKICB1c2VzLW1hdGVyaWFsLWRlc2lnbjogdHJ1ZQogIGdlbmVyYXRlOiB0cnVlCgogIGFzc2V0czoKICAgIC0gYXNzZXRzL2ltYWdlcy8KICAgIC0gYXNzZXRzL2ljb25zLwogICAgLSBhc3NldHMvanNvbnMvCiAgICAtIGFzc2V0cy9naWYvCicnJzsKCiAgLy8gQWRkIGNvbmRpdGlvbmFsIGFzc2V0cyBiYXNlZCBvbiBmZWF0dXJlcyBhbmQgbW9kdWxlcwogIGlmIChtb2R1bGVzLmNvbnRhaW5zKCdMb2NhbGl6YXRpb24nKSkgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgICAtIGFzc2V0cy90cmFuc2xhdGlvbnMvCicnJzsKICB9CgogIHB1YnNwZWNDb250ZW50ICs9ICcnJwogICAgLSAuZW52CgogIGZvbnRzOgogICAgLSBmYW1pbHk6IFBvcHBpbnMKICAgICAgZm9udHM6CiAgICAgICAgLSBhc3NldDogYXNzZXRzL2ZvbnRzL1BvcHBpbnMtUmVndWxhci50dGYKICAgICAgICAtIGFzc2V0OiBhc3NldHMvZm9udHMvUG9wcGlucy1NZWRpdW0udHRmCiAgICAgICAgICB3ZWlnaHQ6IDUwMAogICAgICAgIC0gYXNzZXQ6IGFzc2V0cy9mb250cy9Qb3BwaW5zLVNlbWlCb2xkLnR0ZgogICAgICAgICAgd2VpZ2h0OiA2MDAKICAgICAgICAtIGFzc2V0OiBhc3NldHMvZm9udHMvUG9wcGlucy1Cb2xkLnR0ZgogICAgICAgICAgd2VpZ2h0OiA3MDAKJycnOwoKICAvLyBGbHV0dGVyIG5hdGl2ZSBzcGxhc2ggY29uZmlndXJhdGlvbiBpZiBkYXNoYm9hcmQgZmVhdHVyZSBpcyBpbmNsdWRlZAogIGlmIChmZWF0dXJlcy5jb250YWlucygnRGFzaGJvYXJkJykpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwoKIyBGbHV0dGVyIG5hdGl2ZSBzcGxhc2ggY29uZmlndXJhdGlvbgpmbHV0dGVyX25hdGl2ZV9zcGxhc2g6CiAgY29sb3I6ICIjRkZGRkZGIgogIGltYWdlOiBhc3NldHMvaW1hZ2VzL3NwbGFzaC5wbmcKICBhbmRyb2lkXzEyOgogICAgaW1hZ2U6IGFzc2V0cy9pbWFnZXMvc3BsYXNoX2FuZHJvaWQxMi5wbmcKICAgIGljb25fYmFja2dyb3VuZF9jb2xvcjogIiNGRkZGRkYiCiAgd2ViOiBmYWxzZQonJyc7CiAgfQoKICAvLyBDcmVhdGUgZGlyZWN0b3J5IGlmIGl0IGRvZXNuJ3QgZXhpc3QKICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkocHJvamVjdE5hbWUpOwogIGlmICghZGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgcHJvamVjdCBkaXJlY3Rvcnk6ICRwcm9qZWN0TmFtZScpOwogIH0KCiAgLy8gV3JpdGUgdGhlIHB1YnNwZWMueWFtbCBmaWxlCiAgcHVic3BlY0ZpbGUud3JpdGVBc1N0cmluZ1N5bmMocHVic3BlY0NvbnRlbnQpOwogIGNvbnRleHQubG9nZ2VyCiAgICAgIC5zdWNjZXNzKCdHZW5lcmF0ZWQgcHVic3BlYy55YW1sIHdpdGggYXBwcm9wcmlhdGUgZGVwZW5kZW5jaWVzJyk7Cn0K",
      "type": "text"
    },
    {
      "path": "lib/push_notification_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/redux_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/state_management_handler.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/state_management_observablity.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/theme_manager_generator.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/utils.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "pre_gen.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2J1bm55X2NsaS9hcHBfZ2VuZXJhdG9yLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9idW5ueV9jbGkvZXJyb3JfZ2VuZXJhdG9yLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9idW5ueV9jbGkvbG9jYWxpemF0aW9uX2dlbmVyYXRvci5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfYnVubnlfY2xpL21haW5fY29uZmlndXJhdG9yLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9idW5ueV9jbGkvbmV0d29ya19sYXllcl9nZW5lcmF0b3IuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2J1bm55X2NsaS9wdWJzZWNfY29uZmlndXJhdG9yLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9idW5ueV9jbGkvcHVzaF9ub3RpZmljYXRpb25fZ2VuZXJhdG9yLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9idW5ueV9jbGkvcmVkdXhfZ2VuZXJhdG9yLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9idW5ueV9jbGkvc3RhdGVfbWFuYWdlbWVudF9vYnNlcnZhYmxpdHkuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2J1bm55X2NsaS90aGVtZV9tYW5hZ2VyX2dlbmVyYXRvci5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwoKLy8gSW1wb3J0IGhlbHBlciBmaWxlcwppbXBvcnQgJ2xpYi9hcmNoaXRlY3R1cmVfaGFuZGxlci5kYXJ0JzsKaW1wb3J0ICdsaWIvZmVhdHVyZV9nZW5lcmF0b3IuZGFydCc7CmltcG9ydCAnbGliL3V0aWxzLmRhcnQnOwoKdm9pZCBydW4oSG9va0NvbnRleHQgY29udGV4dCkgewogIC8vIFZhbGlkYXRlIHByb2plY3QgbmFtZQogIGZpbmFsIHByb2plY3ROYW1lID0gY29udGV4dC52YXJzWydwcm9qZWN0X25hbWUnXSBhcyBTdHJpbmc7CiAgZmluYWwgYXJjaGl0ZWN0dXJlID0gY29udGV4dC52YXJzWydhcmNoaXRlY3R1cmUnXSBhcyBTdHJpbmc7CiAgZmluYWwgb3JnYW5pemF0aW9uTmFtZSA9IGNvbnRleHQudmFyc1snYnVuZGxlX2lkZW50aWZpZXInXSBhcyBTdHJpbmc7CiAgZmluYWwgc3RhdGVNYW5hZ2VtZW50ID0gY29udGV4dC52YXJzWydzdGF0ZV9tYW5hZ2VtZW50J10gYXMgU3RyaW5nOwogIHZhciBmZWF0dXJlcyA9IGNvbnRleHQudmFyc1snZmVhdHVyZXMnXSBhcyBMaXN0PGR5bmFtaWM+OwogIGZpbmFsIG1vZHVsZXMgPSBjb250ZXh0LnZhcnNbJ21vZHVsZXMnXSBhcyBMaXN0PGR5bmFtaWM+OwoKICAvLyBWYWxpZGF0ZSBwcm9qZWN0IG5hbWUKICBpZiAoIWlzVmFsaWRQcm9qZWN0TmFtZShwcm9qZWN0TmFtZSkpIHsKICAgIHRocm93IEFyZ3VtZW50RXJyb3IoCiAgICAgICAgJ0ludmFsaWQgcHJvamVjdCBuYW1lLiBNdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIgb3IgdW5kZXJzY29yZSwgJwogICAgICAgICdjb250YWluIG9ubHkgbG93ZXJjYXNlIGxldHRlcnMsIG51bWJlcnMsIGFuZCB1bmRlcnNjb3Jlcy4nKTsKICB9CgogIC8vIE1ha2UgQXV0aGVudGljYXRpb24gdGhlIGRlZmF1bHQgZmVhdHVyZSBpZiBub25lIGFyZSBzZWxlY3RlZAogIGlmIChmZWF0dXJlcy5pc0VtcHR5KSB7CiAgICBmZWF0dXJlcyA9IFsnQXV0aGVudGljYXRpb24nXTsKICAgIGNvbnRleHQubG9nZ2VyCiAgICAgICAgLmluZm8oJ05vIGZlYXR1cmVzIHNlbGVjdGVkLCBhZGRpbmcgZGVmYXVsdCBmZWF0dXJlOiBBdXRoZW50aWNhdGlvbicpOwogIH0gZWxzZSBpZiAoIWZlYXR1cmVzLmNvbnRhaW5zKCdBdXRoZW50aWNhdGlvbicpKSB7CiAgICAvLyBBZGQgQXV0aGVudGljYXRpb24gaWYgbm90IGFscmVhZHkgaW5jbHVkZWQKICAgIGZlYXR1cmVzID0gWy4uLmZlYXR1cmVzXTsKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0FkZGluZyBkZWZhdWx0IGZlYXR1cmU6IEF1dGhlbnRpY2F0aW9uJyk7CiAgfQoKICAvLyBMb2cgcHJvamVjdCBkZXRhaWxzCiAgY29udGV4dC5sb2dnZXIuaW5mbygnR2VuZXJhdGluZyBwcm9qZWN0OiAkcHJvamVjdE5hbWUnKTsKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdBcmNoaXRlY3R1cmU6ICRhcmNoaXRlY3R1cmUnKTsKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdTdGF0ZSBNYW5hZ2VtZW50OiAkc3RhdGVNYW5hZ2VtZW50Jyk7CiAgY29udGV4dC5sb2dnZXIuaW5mbygnRmVhdHVyZXM6ICRmZWF0dXJlcycpOwogIGNvbnRleHQubG9nZ2VyLmluZm8oJ01vZHVsZXM6ICRtb2R1bGVzJyk7CgogIGNvbnRleHQudmFyc1snYXBwbGljYXRpb25faWRfYW5kcm9pZCddID0KICAgICAgX2FwcElkKGNvbnRleHQsIHBsYXRmb3JtOiBQbGF0Zm9ybS5hbmRyb2lkKTsKICBjb250ZXh0LnZhcnNbJ2FwcGxpY2F0aW9uX2lkX2lvcyddID0gX2FwcElkKGNvbnRleHQsIHBsYXRmb3JtOiBQbGF0Zm9ybS5pb3MpOwoKICAvLyBDcmVhdGUgcHJvamVjdCBzdHJ1Y3R1cmUKICBjcmVhdGVQcm9qZWN0U3RydWN0dXJlKGNvbnRleHQsIHByb2plY3ROYW1lKTsKCiAgLy8gR2VuZXJhdGUgYXBwIHdpZGdldCBiYXNlZCBvbiBzZWxlY3RlZCBmZWF0dXJlcwogIGdlbmVyYXRlQXBwV2lkZ2V0KAogICAgICBjb250ZXh0LCBwcm9qZWN0TmFtZSwgYXJjaGl0ZWN0dXJlLCBzdGF0ZU1hbmFnZW1lbnQsIGZlYXR1cmVzLCBtb2R1bGVzKTsKCiAgLy8gQ3JlYXRlIGFyY2hpdGVjdHVyZS1zcGVjaWZpYyBzdHJ1Y3R1cmUKICBjcmVhdGVBcmNoaXRlY3R1cmVTdHJ1Y3R1cmUoY29udGV4dCwgcHJvamVjdE5hbWUsIGFyY2hpdGVjdHVyZSk7CgogIC8vIENyZWF0ZSBmZWF0dXJlIHN0cnVjdHVyZXMgYmFzZWQgb24gYXJjaGl0ZWN0dXJlIGFuZCBzdGF0ZSBtYW5hZ2VtZW50CiAgY3JlYXRlRmVhdHVyZVN0cnVjdHVyZXMoCiAgICAgIGNvbnRleHQsIHByb2plY3ROYW1lLCBmZWF0dXJlcywgYXJjaGl0ZWN0dXJlLCBzdGF0ZU1hbmFnZW1lbnQpOwoKICAvLyBDb25maWd1cmUgcHVic3BlYy55YW1sIGJhc2VkIG9uIHByb2plY3QgcmVxdWlyZW1lbnRzCgogIGNvbmZpZ3VyZVB1YnNwZWMoY29udGV4dCwgcHJvamVjdE5hbWUsIG9yZ2FuaXphdGlvbk5hbWUsIGFyY2hpdGVjdHVyZSwKICAgICAgc3RhdGVNYW5hZ2VtZW50LCBmZWF0dXJlcywgbW9kdWxlcyk7CgogIC8vIFNldHVwIHN0YXRlIG1hbmFnZW1lbnQgb2JzZXJ2YWJpbGl0eQogIHNldHVwT2JzZXJ2YWJpbGl0eShjb250ZXh0LCBwcm9qZWN0TmFtZSwgc3RhdGVNYW5hZ2VtZW50KTsKCiAgLy8gU2V0dXAgdGhlbWUgc3lzdGVtIGlmIFRoZW1lIE1hbmFnZXIgaXMgc2VsZWN0ZWQKICBnZW5lcmF0ZVRoZW1lU3lzdGVtKGNvbnRleHQsIHByb2plY3ROYW1lLCBtb2R1bGVzKTsKCiAgLy8gU2V0dXAgbmV0d29yayBtb2R1bGUgaWYgTmV0d29yayBNb2R1bGUgaXMgc2VsZWN0ZWQKICBnZW5lcmF0ZU5ldHdvcmtMYXllclNlcnZpY2UoY29udGV4dCwgcHJvamVjdE5hbWUsIG1vZHVsZXMpOwoKICAvLyBSZWR1eCBzcGVjaWZpYyBzZXR1cAogIGdlbmVyYXRlUmVkdXhGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgc3RhdGVNYW5hZ2VtZW50KTsKCiAgLy8gQ3JlYXRlIG1vZHVsZSBzdHJ1Y3R1cmVzCiAgY3JlYXRlTW9kdWxlU3RydWN0dXJlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgbW9kdWxlcywgYXJjaGl0ZWN0dXJlKTsKCiAgLy8gR2VuZXJhdGUgbWFpbi5kYXJ0IGZpbGUgYmFzZWQgb24gYXJjaGl0ZWN0dXJlLCBzdGF0ZSBtYW5hZ2VtZW50LCBmZWF0dXJlcywgYW5kIG1vZHVsZXMKICBnZW5lcmF0ZU1haW5EYXJ0KGNvbnRleHQsIHByb2plY3ROYW1lLCBvcmdhbml6YXRpb25OYW1lLCBhcmNoaXRlY3R1cmUsCiAgICAgIHN0YXRlTWFuYWdlbWVudCwgZmVhdHVyZXMsIG1vZHVsZXMpOwoKICAvLyBTZXR1cCBwdXNoIG5vdGlmaWNhdGlvbiBzeXN0ZW0gaWYgTm90aWZpY2F0aW9ucyBpcyBzZWxlY3RlZAogIGdlbmVyYXRlUHVzaE5vdGlmaWNhdGlvblN5c3RlbShjb250ZXh0LCBwcm9qZWN0TmFtZSwgbW9kdWxlcyk7CgogIC8vIEdlbmVyYXRlIGVycm9yIGhhbmRsaW5nIHN5c3RlbQogIGdlbmVyYXRlRXJyb3JIYW5kbGluZyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgYXJjaGl0ZWN0dXJlKTsKCiAgLy8gR2VuZXJhdGUgbG9jYWxpemF0aW9uIHN5c3RlbSBpZiBzZWxlY3RlZAogIGdlbmVyYXRlTG9jYWxpemF0aW9uU3lzdGVtKGNvbnRleHQsIHByb2plY3ROYW1lLCBtb2R1bGVzKTsKCiAgY29udGV4dC5sb2dnZXIuc3VjY2VzcygnUHJvamVjdCBzdHJ1Y3R1cmUgY3JlYXRlZCBzdWNjZXNzZnVsbHkhJyk7Cn0KCi8vIE1haW4gbWV0aG9kIHJlcXVpcmVkIGZvciBrZXJuZWwgY29tcGlsYXRpb24Kdm9pZCBtYWluKExpc3Q8U3RyaW5nPiBhcmdzKSB7CiAgLy8gVGhpcyBpcyBhIHBsYWNlaG9sZGVyIG1haW4gbWV0aG9kCiAgcHJpbnQoJ01hc29uIHByZS1nZW5lcmF0aW9uIGhvb2snKTsKfQoKZW51bSBQbGF0Zm9ybSB7CiAgYW5kcm9pZCwKICBpb3MsCn0KClN0cmluZyBfYXBwSWQoSG9va0NvbnRleHQgY29udGV4dCwge1BsYXRmb3JtPyBwbGF0Zm9ybX0pIHsKICBmaW5hbCBhcHBsaWNhdGlvbklkID0gY29udGV4dC52YXJzWydidW5kbGVfaWRlbnRpZmllciddIGFzIFN0cmluZz87CiAgaWYgKGFwcGxpY2F0aW9uSWQgPT0gbnVsbCkgewogICAgcmV0dXJuICcnOwogIH0KICAvLyBDb252ZXJ0IHRvIGEgdmFsaWQgQW5kcm9pZCBhcHBsaWNhdGlvbiBJRAogIGlmIChwbGF0Zm9ybSA9PSBQbGF0Zm9ybS5hbmRyb2lkKSB7CiAgICByZXR1cm4gYXBwbGljYXRpb25JZC5yZXBsYWNlQWxsKCcuJywgJ18nKS50b0xvd2VyQ2FzZSgpOwogIH0KCiAgLy8gQ29udmVydCB0byBhIHZhbGlkIGlPUyBhcHBsaWNhdGlvbiBJRAogIGlmIChwbGF0Zm9ybSA9PSBQbGF0Zm9ybS5pb3MpIHsKICAgIHJldHVybiBhcHBsaWNhdGlvbklkLnJlcGxhY2VBbGwoJy4nLCAnJykudG9Mb3dlckNhc2UoKTsKICB9CgogIHJldHVybiBhcHBsaWNhdGlvbklkOwp9Cgp2b2lkIGNyZWF0ZVByb2plY3RTdHJ1Y3R1cmUoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgZmluYWwgZGlyZWN0b3JpZXMgPSBbCiAgICAnbGliJywKICAgICd0ZXN0JywKICAgICdhc3NldHMnLAogICAgJ2Fzc2V0cy9pbWFnZXMnLAogIF07CgogIGZvciAoZmluYWwgZGlyIGluIGRpcmVjdG9yaWVzKSB7CiAgICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS8kZGlyJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBkaXJlY3Rvcnk6ICRkaXInKTsKICAgIH0KICB9Cn0KCnZvaWQgY3JlYXRlTW9kdWxlU3RydWN0dXJlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUsCiAgICBMaXN0PGR5bmFtaWM+IG1vZHVsZXMsIFN0cmluZyBhcmNoaXRlY3R1cmUpIHsKICBmb3IgKGZpbmFsIG1vZHVsZSBpbiBtb2R1bGVzKSB7CiAgICBmaW5hbCBtb2R1bGVOYW1lID0gbW9kdWxlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlQWxsKCcgJywgJ18nKTsKICAgIFN0cmluZyBiYXNlRGlyOwoKICAgIHN3aXRjaCAoYXJjaGl0ZWN0dXJlKSB7CiAgICAgIGNhc2UgJ0NsZWFuIEFyY2hpdGVjdHVyZSc6CiAgICAgICAgYmFzZURpciA9ICdjb3JlJzsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnTVZWTSc6CiAgICAgICAgYmFzZURpciA9ICdjb3JlJzsKICAgICAgY2FzZSAnTVZDJzoKICAgICAgICBiYXNlRGlyID0gJ2NvcmUnOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdGZWF0dXJlLURyaXZlbic6CiAgICAgICAgYmFzZURpciA9ICdzaGFyZWQvc2VydmljZXMnOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIGJhc2VEaXIgPSAnY29yZSc7CiAgICB9CgogICAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KCckcHJvamVjdE5hbWUvbGliLyRiYXNlRGlyLyRtb2R1bGVOYW1lJyk7CiAgICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBtb2R1bGUgZGlyZWN0b3J5OiBsaWIvJGJhc2VEaXIvJG1vZHVsZU5hbWUnKTsKCiAgICAgIC8vIENyZWF0ZSBhIGJhc2UgZmlsZSBmb3IgdGhlIG1vZHVsZQogICAgICBjcmVhdGVGaWxlKAogICAgICAgICAgJyRwcm9qZWN0TmFtZS9saWIvJGJhc2VEaXIvJG1vZHVsZU5hbWUvJHttb2R1bGVOYW1lfV9zZXJ2aWNlLmRhcnQnLAogICAgICAgICAgZ2VuZXJhdGVTZXJ2aWNlVGVtcGxhdGUobW9kdWxlTmFtZSksCiAgICAgICAgICBjb250ZXh0KTsKICAgIH0KICB9Cn0K",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZTogZmx1dHRlcl9idW5ueV9jbGkKCmVudmlyb25tZW50OgogIHNkazogIl4zLjYuMCIKCmRlcGVuZGVuY2llczoKICBtYXNvbjogXjAuMS4wCg==",
      "type": "text"
    }
  ],
  "name": "bunny_cli_template",
  "description": "A generator for flutter bunny cli.",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0"},
  "readme": {
    "path": "README.md",
    "data": "IyBGbHV0dGVyIEJ1bm55IENMSSBUZW1wbGF0ZQ==",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMCsxCgotIFRPRE86IERlc2NyaWJlIGluaXRpYWwgcmVsZWFzZS4K",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data":
        "TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyNSBGbHV0dGVyIEJ1bm55IENMSSBUZW1wbGF0ZQoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQpvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAppbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQpTT0ZUV0FSRS4=",
    "type": "text"
  },
  "vars": {
    "project_name": {
      "type": "string",
      "description": "The project or app name",
      "default": "flutter_bunny",
      "prompt": "What is the project name?"
    },
    "bundle_identifier": {
      "type": "string",
      "description": "The bundle identifier",
      "default": "com.example.app",
      "prompt": "What is the bundle identifier?"
    },
    "architecture": {
      "type": "enum",
      "description": "The architecture pattern to use",
      "default": "Clean Architecture",
      "values": ["Clean Architecture", "MVVM", "MVC"]
    },
    "state_management": {
      "type": "enum",
      "description": "The state management solution to use",
      "default": "Provider",
      "values": ["Provider", "Riverpod", "Bloc", "GetX", "MobX", "Redux"]
    },
    "features": {
      "type": "list",
      "description": "Features to include in the application",
      "defaults": ["Authentication"],
      "values": ["Authentication", "User Profile", "Settings", "Dashboard"]
    },
    "modules": {
      "type": "list",
      "description": "Additional modules to include",
      "defaults": ["Network Layer"],
      "values": [
        "Network Layer",
        "Local Storage",
        "Localization",
        "Theme Manager"
      ]
    }
  }
});
