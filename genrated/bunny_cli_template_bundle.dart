// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final bunnyCliTemplateBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "{{project_name.snakeCase()}}/.env",
      "data": "QVBQX05BTUUgPSB7e3Byb2plY3RfbmFtZS50b1NlbnRlbmNlQ2FzZSgpfX0=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/.github/dependabot.yaml",
      "data":
          "dmVyc2lvbjogMgp1cGRhdGVzOgogIC0gcGFja2FnZS1lY29zeXN0ZW06ICJnaXRodWItYWN0aW9ucyIKICAgIGRpcmVjdG9yeTogIi8iCiAgICBzY2hlZHVsZToKICAgICAgaW50ZXJ2YWw6ICJkYWlseSIKICAtIHBhY2thZ2UtZWNvc3lzdGVtOiAicHViIgogICAgZGlyZWN0b3J5OiAiLyIKICAgIHNjaGVkdWxlOgogICAgICBpbnRlcnZhbDogImRhaWx5Ig==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/.github/workflows/ci.yml",
      "data":
          "bmFtZTogUGlwZUxpbmUKCm9uOgogIHB1c2g6CiAgICBicmFuY2hlczogW21haW5dCiAgcHVsbF9yZXF1ZXN0OgogICAgYnJhbmNoZXM6IFttYWluXQoKam9iczoKICB0ZXN0OgogICAgbmFtZTogdW5pdC10ZXN0CiAgICBydW5zLW9uOiB1YnVudHUtbGF0ZXN0CiAgICBwZXJtaXNzaW9uczoKICAgICAgY29udGVudHM6IHdyaXRlCiAgICBzdGVwczoKICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYyCiAgICAgIC0gdXNlczogYWN0aW9ucy9zZXR1cC1qYXZhQHYxCiAgICAgICAgd2l0aDoKICAgICAgICAgIGphdmEtdmVyc2lvbjogIjEyLngiCiAgICAgIC0gdXNlczogc3Vib3NpdG8vZmx1dHRlci1hY3Rpb25AdjEuNS4zCiAgICAgICAgd2l0aDoKICAgICAgICAgIGZsdXR0ZXJfY2hhbm5lbDogc3RhYmxlCiAgICAgICAgICBmbHV0dGVyX3ZlcnNpb246IDMuNC4wCiAgICAgIC0gbmFtZTogSW5zdGFsbCBkZXBlbmRlbmNpZXMKICAgICAgICBydW46IGZsdXR0ZXIgcHViIGdldAogICAgICAtIG5hbWU6IEJ1aWxkIEFQSwogICAgICAgIHJ1bjogZmx1dHRlciBidWlsZCBhcGsgLS1yZWxlYXNlIC0tc3BsaXQtZGVidWctaW5mbz1kZWJ1Zy1pbmZvCg==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/.gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGQvCi5idWlsZGxvZy8KLmhpc3RvcnkKLnN2bi8KLnN3aWZ0cG0vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCioqL2RvYy9hcGkvCioqL2lvcy9GbHV0dGVyLy5sYXN0X2J1aWxkX2lkCi5kYXJ0X3Rvb2wvCi5mbHV0dGVyLXBsdWdpbnMKLmZsdXR0ZXItcGx1Z2lucy1kZXBlbmRlbmNpZXMKLnB1Yi1jYWNoZS8KLnB1Yi8KL2J1aWxkLwoKIyBTeW1ib2xpY2F0aW9uIHJlbGF0ZWQKYXBwLiouc3ltYm9scwoKIyBPYmZ1c2NhdGlvbiByZWxhdGVkCmFwcC4qLm1hcC5qc29uCgojIEFuZHJvaWQgU3R1ZGlvIHdpbGwgcGxhY2UgYnVpbGQgYXJ0aWZhY3RzIGhlcmUKL2FuZHJvaWQvYXBwL2RlYnVnCi9hbmRyb2lkL2FwcC9wcm9maWxlCi9hbmRyb2lkL2FwcC9yZWxlYXNlCg==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/.metadata",
      "data":
          "IyBUaGlzIGZpbGUgdHJhY2tzIHByb3BlcnRpZXMgb2YgdGhpcyBGbHV0dGVyIHByb2plY3QuCiMgVXNlZCBieSBGbHV0dGVyIHRvb2wgdG8gYXNzZXNzIGNhcGFiaWxpdGllcyBhbmQgcGVyZm9ybSB1cGdyYWRlcyBldGMuCiMKIyBUaGlzIGZpbGUgc2hvdWxkIGJlIHZlcnNpb24gY29udHJvbGxlZCBhbmQgc2hvdWxkIG5vdCBiZSBtYW51YWxseSBlZGl0ZWQuCgp2ZXJzaW9uOgogIHJldmlzaW9uOiAiMzVjMzg4YWZiNTdlZjA2MWQwNmEzOWI1MzczMzZjODdlMGUzZDFiMSIKICBjaGFubmVsOiAic3RhYmxlIgoKcHJvamVjdF90eXBlOiBhcHAKCiMgVHJhY2tzIG1ldGFkYXRhIGZvciB0aGUgZmx1dHRlciBtaWdyYXRlIGNvbW1hbmQKbWlncmF0aW9uOgogIHBsYXRmb3JtczoKICAgIC0gcGxhdGZvcm06IHJvb3QKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IGFuZHJvaWQKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IGlvcwogICAgICBjcmVhdGVfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgICAgYmFzZV9yZXZpc2lvbjogMzVjMzg4YWZiNTdlZjA2MWQwNmEzOWI1MzczMzZjODdlMGUzZDFiMQogICAgLSBwbGF0Zm9ybTogbGludXgKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IG1hY29zCiAgICAgIGNyZWF0ZV9yZXZpc2lvbjogMzVjMzg4YWZiNTdlZjA2MWQwNmEzOWI1MzczMzZjODdlMGUzZDFiMQogICAgICBiYXNlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAtIHBsYXRmb3JtOiB3ZWIKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKICAgIC0gcGxhdGZvcm06IHdpbmRvd3MKICAgICAgY3JlYXRlX3JldmlzaW9uOiAzNWMzODhhZmI1N2VmMDYxZDA2YTM5YjUzNzMzNmM4N2UwZTNkMWIxCiAgICAgIGJhc2VfcmV2aXNpb246IDM1YzM4OGFmYjU3ZWYwNjFkMDZhMzliNTM3MzM2Yzg3ZTBlM2QxYjEKCiAgIyBVc2VyIHByb3ZpZGVkIHNlY3Rpb24KCiAgIyBMaXN0IG9mIExvY2FsIHBhdGhzIChyZWxhdGl2ZSB0byB0aGlzIGZpbGUpIHRoYXQgc2hvdWxkIGJlCiAgIyBpZ25vcmVkIGJ5IHRoZSBtaWdyYXRlIHRvb2wuCiAgIwogICMgRmlsZXMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHRlbXBsYXRlcyB3aWxsIGJlIGlnbm9yZWQgYnkgZGVmYXVsdC4KICB1bm1hbmFnZWRfZmlsZXM6CiAgICAtICdsaWIvbWFpbi5kYXJ0JwogICAgLSAnaW9zL1J1bm5lci54Y29kZXByb2ovcHJvamVjdC5wYnhwcm9qJwo=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/analysis_options.yaml",
      "data": "",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/android/.gitignore",
      "data":
          "Z3JhZGxlLXdyYXBwZXIuamFyCi8uZ3JhZGxlCi9jYXB0dXJlcy8KL2dyYWRsZXcKL2dyYWRsZXcuYmF0Ci9sb2NhbC5wcm9wZXJ0aWVzCkdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQuamF2YQoKIyBSZW1lbWJlciB0byBuZXZlciBwdWJsaWNseSBzaGFyZSB5b3VyIGtleXN0b3JlLgojIFNlZSBodHRwczovL2ZsdXR0ZXIuZGV2L3RvL3JlZmVyZW5jZS1rZXlzdG9yZQprZXkucHJvcGVydGllcwoqKi8qLmtleXN0b3JlCioqLyouamtzCg==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/android/app/build.gradle",
      "data":
          "cGx1Z2lucyB7CiAgICBpZCAiY29tLmFuZHJvaWQuYXBwbGljYXRpb24iCiAgICBpZCAia290bGluLWFuZHJvaWQiCiAgICAvLyBUaGUgRmx1dHRlciBHcmFkbGUgUGx1Z2luIG11c3QgYmUgYXBwbGllZCBhZnRlciB0aGUgQW5kcm9pZCBhbmQgS290bGluIEdyYWRsZSBwbHVnaW5zLgogICAgaWQgImRldi5mbHV0dGVyLmZsdXR0ZXItZ3JhZGxlLXBsdWdpbiIKfQoKYW5kcm9pZCB7CiAgICBuYW1lc3BhY2UgPSAie3thcHBsaWNhdGlvbl9pZF9hbmRyb2lkfX0iCiAgICBjb21waWxlU2RrID0gZmx1dHRlci5jb21waWxlU2RrVmVyc2lvbgogICAgbmRrVmVyc2lvbiA9IGZsdXR0ZXIubmRrVmVyc2lvbgoKICAgIGNvbXBpbGVPcHRpb25zIHsKICAgICAgICBzb3VyY2VDb21wYXRpYmlsaXR5ID0gSmF2YVZlcnNpb24uVkVSU0lPTl8xXzgKICAgICAgICB0YXJnZXRDb21wYXRpYmlsaXR5ID0gSmF2YVZlcnNpb24uVkVSU0lPTl8xXzgKICAgIH0KCiAgICBrb3RsaW5PcHRpb25zIHsKICAgICAgICBqdm1UYXJnZXQgPSBKYXZhVmVyc2lvbi5WRVJTSU9OXzFfOAogICAgfQoKICAgIGRlZmF1bHRDb25maWcgewogICAgICAgIC8vIFRPRE86IFNwZWNpZnkgeW91ciBvd24gdW5pcXVlIEFwcGxpY2F0aW9uIElEIChodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9zdHVkaW8vYnVpbGQvYXBwbGljYXRpb24taWQuaHRtbCkuCiAgICAgICAgIGFwcGxpY2F0aW9uSWQgInt7YXBwbGljYXRpb25faWRfYW5kcm9pZH19IgogICAgICAgIC8vIFlvdSBjYW4gdXBkYXRlIHRoZSBmb2xsb3dpbmcgdmFsdWVzIHRvIG1hdGNoIHlvdXIgYXBwbGljYXRpb24gbmVlZHMuCiAgICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9mbHV0dGVyLmRldi90by9yZXZpZXctZ3JhZGxlLWNvbmZpZy4KICAgICAgICBtaW5TZGsgPSBmbHV0dGVyLm1pblNka1ZlcnNpb24KICAgICAgICB0YXJnZXRTZGsgPSBmbHV0dGVyLnRhcmdldFNka1ZlcnNpb24KICAgICAgICB2ZXJzaW9uQ29kZSA9IGZsdXR0ZXIudmVyc2lvbkNvZGUKICAgICAgICB2ZXJzaW9uTmFtZSA9IGZsdXR0ZXIudmVyc2lvbk5hbWUKICAgIH0KCiAgICBidWlsZFR5cGVzIHsKICAgICAgICByZWxlYXNlIHsKICAgICAgICAgICAgLy8gVE9ETzogQWRkIHlvdXIgb3duIHNpZ25pbmcgY29uZmlnIGZvciB0aGUgcmVsZWFzZSBidWlsZC4KICAgICAgICAgICAgLy8gU2lnbmluZyB3aXRoIHRoZSBkZWJ1ZyBrZXlzIGZvciBub3csIHNvIGBmbHV0dGVyIHJ1biAtLXJlbGVhc2VgIHdvcmtzLgogICAgICAgICAgICBzaWduaW5nQ29uZmlnID0gc2lnbmluZ0NvbmZpZ3MuZGVidWcKICAgICAgICB9CiAgICB9Cn0KCmZsdXR0ZXIgewogICAgc291cmNlID0gIi4uLy4uIgp9Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/debug/AndroidManifest.xml",
      "data":
          "PG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8IS0tIFRoZSBJTlRFUk5FVCBwZXJtaXNzaW9uIGlzIHJlcXVpcmVkIGZvciBkZXZlbG9wbWVudC4gU3BlY2lmaWNhbGx5LAogICAgICAgICB0aGUgRmx1dHRlciB0b29sIG5lZWRzIGl0IHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHJ1bm5pbmcgYXBwbGljYXRpb24KICAgICAgICAgdG8gYWxsb3cgc2V0dGluZyBicmVha3BvaW50cywgdG8gcHJvdmlkZSBob3QgcmVsb2FkLCBldGMuCiAgICAtLT4KICAgIDx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPSJhbmRyb2lkLnBlcm1pc3Npb24uSU5URVJORVQiLz4KPC9tYW5pZmVzdD4K",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/AndroidManifest.xml",
      "data":
          "PG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8YXBwbGljYXRpb24KICAgICAgICBhbmRyb2lkOmxhYmVsPXt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19CiAgICAgICAgYW5kcm9pZDpuYW1lPSIke3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19CiAgICAgICAgYW5kcm9pZDppY29uPSJAbWlwbWFwL2ljX2xhdW5jaGVyIj4KICAgICAgICA8YWN0aXZpdHkKICAgICAgICAgICAgYW5kcm9pZDpuYW1lPSIuTWFpbkFjdGl2aXR5IgogICAgICAgICAgICBhbmRyb2lkOmV4cG9ydGVkPSJ0cnVlIgogICAgICAgICAgICBhbmRyb2lkOmxhdW5jaE1vZGU9InNpbmdsZVRvcCIKICAgICAgICAgICAgYW5kcm9pZDp0YXNrQWZmaW5pdHk9IiIKICAgICAgICAgICAgYW5kcm9pZDp0aGVtZT0iQHN0eWxlL0xhdW5jaFRoZW1lIgogICAgICAgICAgICBhbmRyb2lkOmNvbmZpZ0NoYW5nZXM9Im9yaWVudGF0aW9ufGtleWJvYXJkSGlkZGVufGtleWJvYXJkfHNjcmVlblNpemV8c21hbGxlc3RTY3JlZW5TaXplfGxvY2FsZXxsYXlvdXREaXJlY3Rpb258Zm9udFNjYWxlfHNjcmVlbkxheW91dHxkZW5zaXR5fHVpTW9kZSIKICAgICAgICAgICAgYW5kcm9pZDpoYXJkd2FyZUFjY2VsZXJhdGVkPSJ0cnVlIgogICAgICAgICAgICBhbmRyb2lkOndpbmRvd1NvZnRJbnB1dE1vZGU9ImFkanVzdFJlc2l6ZSI+CiAgICAgICAgICAgIDwhLS0gU3BlY2lmaWVzIGFuIEFuZHJvaWQgdGhlbWUgdG8gYXBwbHkgdG8gdGhpcyBBY3Rpdml0eSBhcyBzb29uIGFzCiAgICAgICAgICAgICAgICAgdGhlIEFuZHJvaWQgcHJvY2VzcyBoYXMgc3RhcnRlZC4gVGhpcyB0aGVtZSBpcyB2aXNpYmxlIHRvIHRoZSB1c2VyCiAgICAgICAgICAgICAgICAgd2hpbGUgdGhlIEZsdXR0ZXIgVUkgaW5pdGlhbGl6ZXMuIEFmdGVyIHRoYXQsIHRoaXMgdGhlbWUgY29udGludWVzCiAgICAgICAgICAgICAgICAgdG8gZGV0ZXJtaW5lIHRoZSBXaW5kb3cgYmFja2dyb3VuZCBiZWhpbmQgdGhlIEZsdXR0ZXIgVUkuIC0tPgogICAgICAgICAgICA8bWV0YS1kYXRhCiAgICAgICAgICAgICAgYW5kcm9pZDpuYW1lPSJpby5mbHV0dGVyLmVtYmVkZGluZy5hbmRyb2lkLk5vcm1hbFRoZW1lIgogICAgICAgICAgICAgIGFuZHJvaWQ6cmVzb3VyY2U9IkBzdHlsZS9Ob3JtYWxUaGVtZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8aW50ZW50LWZpbHRlcj4KICAgICAgICAgICAgICAgIDxhY3Rpb24gYW5kcm9pZDpuYW1lPSJhbmRyb2lkLmludGVudC5hY3Rpb24uTUFJTiIvPgogICAgICAgICAgICAgICAgPGNhdGVnb3J5IGFuZHJvaWQ6bmFtZT0iYW5kcm9pZC5pbnRlbnQuY2F0ZWdvcnkuTEFVTkNIRVIiLz4KICAgICAgICAgICAgPC9pbnRlbnQtZmlsdGVyPgogICAgICAgIDwvYWN0aXZpdHk+CiAgICAgICAgPCEtLSBEb24ndCBkZWxldGUgdGhlIG1ldGEtZGF0YSBiZWxvdy4KICAgICAgICAgICAgIFRoaXMgaXMgdXNlZCBieSB0aGUgRmx1dHRlciB0b29sIHRvIGdlbmVyYXRlIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQuamF2YSAtLT4KICAgICAgICA8bWV0YS1kYXRhCiAgICAgICAgICAgIGFuZHJvaWQ6bmFtZT0iZmx1dHRlckVtYmVkZGluZyIKICAgICAgICAgICAgYW5kcm9pZDp2YWx1ZT0iMiIgLz4KICAgIDwvYXBwbGljYXRpb24+CiAgICA8IS0tIFJlcXVpcmVkIHRvIHF1ZXJ5IGFjdGl2aXRpZXMgdGhhdCBjYW4gcHJvY2VzcyB0ZXh0LCBzZWU6CiAgICAgICAgIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3RyYWluaW5nL3BhY2thZ2UtdmlzaWJpbGl0eSBhbmQKICAgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQjQUNUSU9OX1BST0NFU1NfVEVYVC4KCiAgICAgICAgIEluIHBhcnRpY3VsYXIsIHRoaXMgaXMgdXNlZCBieSB0aGUgRmx1dHRlciBlbmdpbmUgaW4gaW8uZmx1dHRlci5wbHVnaW4udGV4dC5Qcm9jZXNzVGV4dFBsdWdpbi4gLS0+CiAgICA8cXVlcmllcz4KICAgICAgICA8aW50ZW50PgogICAgICAgICAgICA8YWN0aW9uIGFuZHJvaWQ6bmFtZT0iYW5kcm9pZC5pbnRlbnQuYWN0aW9uLlBST0NFU1NfVEVYVCIvPgogICAgICAgICAgICA8ZGF0YSBhbmRyb2lkOm1pbWVUeXBlPSJ0ZXh0L3BsYWluIi8+CiAgICAgICAgPC9pbnRlbnQ+CiAgICA8L3F1ZXJpZXM+CjwvbWFuaWZlc3Q+Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/kotlin/com/example/{{application_id_android}}/MainActivity.kt",
      "data":
          "cGFja2FnZSB7e2FwcGxpY2F0aW9uX2lkX2FuZHJvaWR9fQoKaW1wb3J0IGlvLmZsdXR0ZXIuZW1iZWRkaW5nLmFuZHJvaWQuRmx1dHRlckFjdGl2aXR5CgpjbGFzcyBNYWluQWN0aXZpdHk6IEZsdXR0ZXJBY3Rpdml0eSgpCg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/drawable-v21/launch_background.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBNb2RpZnkgdGhpcyBmaWxlIHRvIGN1c3RvbWl6ZSB5b3VyIGxhdW5jaCBzcGxhc2ggc2NyZWVuIC0tPgo8bGF5ZXItbGlzdCB4bWxuczphbmRyb2lkPSJodHRwOi8vc2NoZW1hcy5hbmRyb2lkLmNvbS9hcGsvcmVzL2FuZHJvaWQiPgogICAgPGl0ZW0gYW5kcm9pZDpkcmF3YWJsZT0iP2FuZHJvaWQ6Y29sb3JCYWNrZ3JvdW5kIiAvPgoKICAgIDwhLS0gWW91IGNhbiBpbnNlcnQgeW91ciBvd24gaW1hZ2UgYXNzZXRzIGhlcmUgLS0+CiAgICA8IS0tIDxpdGVtPgogICAgICAgIDxiaXRtYXAKICAgICAgICAgICAgYW5kcm9pZDpncmF2aXR5PSJjZW50ZXIiCiAgICAgICAgICAgIGFuZHJvaWQ6c3JjPSJAbWlwbWFwL2xhdW5jaF9pbWFnZSIgLz4KICAgIDwvaXRlbT4gLS0+CjwvbGF5ZXItbGlzdD4K",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/drawable/launch_background.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBNb2RpZnkgdGhpcyBmaWxlIHRvIGN1c3RvbWl6ZSB5b3VyIGxhdW5jaCBzcGxhc2ggc2NyZWVuIC0tPgo8bGF5ZXItbGlzdCB4bWxuczphbmRyb2lkPSJodHRwOi8vc2NoZW1hcy5hbmRyb2lkLmNvbS9hcGsvcmVzL2FuZHJvaWQiPgogICAgPGl0ZW0gYW5kcm9pZDpkcmF3YWJsZT0iQGFuZHJvaWQ6Y29sb3Ivd2hpdGUiIC8+CgogICAgPCEtLSBZb3UgY2FuIGluc2VydCB5b3VyIG93biBpbWFnZSBhc3NldHMgaGVyZSAtLT4KICAgIDwhLS0gPGl0ZW0+CiAgICAgICAgPGJpdG1hcAogICAgICAgICAgICBhbmRyb2lkOmdyYXZpdHk9ImNlbnRlciIKICAgICAgICAgICAgYW5kcm9pZDpzcmM9IkBtaXBtYXAvbGF1bmNoX2ltYWdlIiAvPgogICAgPC9pdGVtPiAtLT4KPC9sYXllci1saXN0Pgo=",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-hdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAMAAABiM0N1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAK5QTFRFAAAAAU6KAVebKbb2VMX4Kbb2VMX4AVaaAVebKbb2RsD3VMX4VMX4AVaZAVebGHalKbb2VMX4Pa7jADJZADhkAStLATBTAT5uAT5vAUd/AUmCAUyHAU6KAU6LAU6MAVGRAVKSAVKTAVOUAVWXAVWYAVaYAVaaAVeaAVebAjtnAkBwAkN2AkmAA02GA0+KA1CLFmiQF2+ZGXimGn6wG4O2G4a6HIe8Kbb2RL/3VMX47aEaPQAAABN0Uk5TABAQEBBQUGBgYGBggM/Pz8/P3xkQ5PoAAADpSURBVFjD7czXDoJAEEBRVOy9YO+KjB0r+v8/ZoQIC0sizq4PxrmvNzmKQklMrd758uSQQw455JBDDjnvnFSBL4Vw8iGzqn7TCYUwTpiEc3gJ6wQlvOOXXCf3ucNKrpO1bp87nsQ4FidFcF6SzwlKkRxHCjh+KaLzlDiHlSI7TJ7jSaLOSxJ3HEmG85QwTtLiqyEcJVHhnOs+rciQLjsdMhKk83ZmgATptBnrCxCXjuvB1IYEpcOyM5zMbEhIMpvtTn+sAwhKplZv9aYGgKBkao3uHNhwUnk1gmAoKVYEkCPFSyT9qvSvPQCNJCMEO265wAAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-mdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAMAAABg3Am1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAIpQTFRFAAAAAVebVMX4Kbb2VMX4AVebKbb2VMX4VMX4Kbb2VMX4VMX4VMX4AVebB1ePVMX4AVebBENyKbb2UcT4VMX4ADxrAUJ1AU2KAU6LAVSVAVSWAVWXAVaZAVaaAVeaAVebAy1LAzFRBUJuBU2ABlOJHom6H43AIZXLIprSIpzVKbb2Mbn2UcT4VMX4UU+PBQAAABV0Uk5TABAQICAwMDCPn5+vv8/Pz+/v7+/vb7KPEwAAAKVJREFUSMft1MkSgjAQRdGIA86igoKirSIOiP//ew6J3WwMnYULU3nL1LnVuwhh9/zwTpt4zjvv/G99d0gbePW+X3kJfd0Bjq8WPE8F138K6Xu3stbLQvmiwOK7fxXosdB5IVrkVaH3csq/CyP/LOYM35xRcB03GJ92B4vLMR2ZFOcs2YJBcTrEqw3wi3y/WK4B2EW+i+IUgF9ME8CxinYAVhR/sgfbkVbaxFzJpwAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-xhdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAPZQTFRFAAAAVMX4Kbb2AUiAAVebKbb2VMX4VMX4AVebVMX4DVmPVMX4VMX4Kbb2R8H3VMX4VMX4AVOUAVebFmyWKbb2VMX4AC1PAC5SAC9UADBUAD5uASlGASpKATZeATdiAThkATtpAT9wAUByAUF0AUV7AUZ9AUd+AUd/AUh/AUmDAUqEAUyHAUyIAU2IAU2JAU6KAU+OAVCPAVKRAVKTAVOTAVOUAVSVAVWXAVaYAVaZAVaaAVeaAVebAjNYAjplAj9uAkN2Akd7A0l+A0qBA0uCFmiPF2uUGHKeGXinGn2uGoGzG4O2G4W4G4a6HYrAKbb2RL/3VMX4cbCtoAAAABZ0Uk5TABAgMDAwMFBgYHBwgJ+fn8/v7+/v77sEZREAAAFPSURBVGje7dnXTsNAEIXhQCih92p6bwFMYoLjpWMSauD9XwbLRJbX3olkawYJOOd69X+a6y0UsN+6vplPcgPoo48++uijjz766KOPPvroo//f+kPD5Po5+mP0u/Guv9vvBLD0OwhMfVJg6xMCY98osPYNAnM/JWj9UYZ+QtD6I60Phr4mJPotSsjUjwmpPiFk7EeCoW8UMvfbgrFvEHL0Q4Hop4Rc/UAg+wkhZ1+f3tcEkX5MEOpHgli/LQj2Q0G0Hwgs/e5pEngfZPmK6KWEtwenJCm83lc8JSi83J25npITnm/tWj0ApISnmxPnIgRkhOb1ge18XyAiNK62ygHg1pWM8Hi5vntkVyOAW/CXVjZ3Dk8rNU8pCcG35lY3tstVV8XGKPjW7MLa/rlKjE3wrfnFY2UYkzC1vOcp83iE4gTV5xJ6JhUECBB+TMDY9gVhhwZ2u52HDgAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAVNQTFRFAAAAKbb2VMX4VMX4VMX4Kbb2AVKTAVebCUhwKbb2VMX4GXCiKbb2Orz3VMX4AChHACtNACxPAC5SAC9TAC9UADBWADNcADtoAD9vATFXATVfATZgATdiATpnATtpATxrATxsAT1sAT1tAT5uAT9xAUFzAUF0AUJ1AUN4AUR6AUV7AUZ8AUZ9AUZ+AUd+AUiAAUiBAUmBAUmCAUmDAUmEAUqDAUqEAUyHAUyIAU2IAU2JAU6LAU6MAU+MAU+NAVCOAVGPAVGQAVGRAVGSAVKRAVKSAVKTAVOTAVOUAVSVAVSWAVWXAVWYAVaYAVaZAVaaAVeaAVebBzZTCDtaCUFjCUZrCkpyCk54C1F9C1SBC1aEC1eHC1mJC1qKC1qMDFuMJKDZJKHZJaLcJaTeJaXgJqfhJqjjJqnkJqnlJqrmJqvmJqvnJ6vnJ6voKbb2Obz3VMX4m8WQNQAAAA90Uk5TABAQQGCAn5+fn5+/z8/PrpHT6gAAAi9JREFUeNrt0GdTU1EUheEoCghWFEVCs1AMGpQSQoSERMDATTuxgD3YaBL4/59IMZKEc+/dM1z2Pg7r/b5mnlk+H0IG1nFIrQMeeOCBBx544IEHHnjggQceeOCBBx544IEHHnjggQceeOCBBx544IEHHnj+M8/FFnI8nuvk+SV44Dl7Dx3E5CGL2DxEEaOHJGL1EETMHlcRu8dFJOBxFIl4HERCHluRmMdGpPNcuMbi0Yq0nqvFAxaPRmTjKRJFp/WcENl6aKLTe5pEDh6KyAtPg8jR4y7yxlMncvG4ibzy/BO5epxF3nn+iggeJ5GXnoqI5LEXeespiYgeO5HXHm1aj14k6dGJZD0nRdKeZpG8p1FkgqdeZIbnWGSKpyYyx1MVmeQpi1g8vstET3G/08fTFZrnz7dQq0miva/Ty+k2c0R7X6ZfpXPKGNHu58lEKqeUKaKdT88XrWzOGNH2x2B0NVMFmSDa+hB4uWJlstkKSF70e2MsHE9a6RpIWvRrfTgUXaoHyYp+vn8UnIstN4AkRT/e9Y/NRGJLybV05hgkJ/r+1v94PBSJJqogcdHmm/sDo09nItH461Wr/iEhUSF/s3dodHxqdqEESmVVQwKiQv7Gnb4HI4HJ2fnEWhNHQlTy3OruGxwOTMVSShezqOzp6vY/fBFXdrGKKp7bPWHlFKOo7Lk3YSmX2ESF/N0nSUWIS9T+bCWjlEmiVqKHT9SmIIIIIoggggii8yRC56kjnvQNYJm/1ucAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAMAAABlApw1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAdpQTFRFAAAAVMX4VMX4AUN3AVGRAVaaAVebKbb2VMX4FmOXVMX4VMX4Kbb2AUuGAUuHAVWXAVebFmyWKbb2LLf2VMX4AClIACxOACxPAC1QAC5RAC5SAC9TAC9UADBWADFWADFXADNaADVeADZgADdgADtpADxsASZCASZDASpJATFXATRbATRcATRdATVfATZgAThjAThkATlmATpnATpoATtpATxqAT1sAT1tAT5tAT5uAT5vAT9vAT9wAUByAUFzAUF0AUJ1AUJ2AUR5AUR6AUV6AUV7AUZ8AUd+AUd/AUiAAUiBAUmCAUmDAUqDAUqEAUqFAUuEAUuFAUuGAUuHAUyHAUyIAUyJAU2IAU2JAU2KAU6KAU6LAU6MAU+MAU+NAVCOAVCPAVCQAVGPAVGQAVGRAVKRAVKSAVOSAVOTAVOUAVOVAVSUAVSVAVSWAVWWAVWXAVWYAVWZAVaYAVaZAVaaAVeaAVebAi5PAjFWAjRbAjdgAjpkAjxoAj5rAkBuAkFxAkJzAkN1AkR2AkV4AkZ5AkZ6Akd6FmiPFmmQF22WF3CbGHOfGXajGXmnGXuqGn2tGn+wGoCyG4K0G4O2G4S3G4W4G4W5G4a6HIa7H4vAKbb2LLf2TML4VMX4KQGaCAAAABV0Uk5TABAgMDAwMDAwQEDP3+/v7+/v7+/v7Yl3rQAAAz5JREFUeNrt1AdTE1EUhmFEQKygYi9YsTewYcOAEBBRg6KIkASBmKhhkazXLnbsvUb8r2bNMASy2b33zmzmnJnv+wF7nnd2dgsKMAzL60or/uqtohR++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++OGHH3744Ycffvjhhx9++Gn7C2dprpCGX/uhs6fBDz/88HPxa9+i4te9Rsevd4+SX+ciLb/6TWp+1av0/Gp3KfpVLtP0y9+m6pe9Ttcvd5+yX0ZA2+9uoO53U9D3Ozuc/DMWjpHwOxU4+hck/4yR8OcucPEntQo88OcqcPXrFHjity+Q8KsXeOS3K5DyqxZ45s8ukPSrFXjon1og7Vcp8NQ/uUDBL1/gsT+zQMkvW+C5f6JA0S9XkAf/eIGyX6YgL/50gYbfvSBPfqtAy+9WkDd/qkDP71yQR7/THP1OBTz8uQu4+HMV8PHbF3Dy2xXw8mcXcPNPLeDnn1zA0Z9ZwNM/UcDVP17A158u4Oy3Coj4C+Yk9fZ7Jg2/7hv49XJuEeeCny/a+8qK+RZY/kGzvIRrwY/n7b3xhBBcC74/O5vy3xJcC749bQvFb5pWAMuCr09ag9eHzHQAw4Ivj1u6o0YiFcCz4POIv6s/PjwRwKzg06OmjiuxwcwAVgUfH9YHgpGYYWQGMCr48MDX2hWOxuLGsDn+FXMqeH//qP9cT+/VrAAmBe/uHWw4dSHYF8kOYFHw9u5eX/OZzmA4ErthTPqKeRS8ubPrSENLoLMnPGAXQL7g9e3t++oaTwY6u8MDUbsA4gWvNm/ZXetrbDl9sTvUH72W/o8KwaZgdNOSbdWHrICOy6E+6z9qiuzRLRitWrRyR83h4yea285bAUZC2I5qQcq/ePXOmtq6Bn8qIDIkco5mgeVfVrmu+sCxen9X1BROo1jw37+8cu2e/c2hhHAbvYK0f8WqDW1DQmbUCtL+9U0RITtaBZZ/jU9eT61gtGrpxkumUBydgvlbG/sNZT+hgunztPyECorKtPyECorLBfOCEhSgAAUoQAEKUIACFKAABShAAZkCDKO1f/OiyBBYvwCtAAAAAElFTkSuQmCC",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/values-night/styles.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHJlc291cmNlcz4KICAgIDwhLS0gVGhlbWUgYXBwbGllZCB0byB0aGUgQW5kcm9pZCBXaW5kb3cgd2hpbGUgdGhlIHByb2Nlc3MgaXMgc3RhcnRpbmcgd2hlbiB0aGUgT1MncyBEYXJrIE1vZGUgc2V0dGluZyBpcyBvbiAtLT4KICAgIDxzdHlsZSBuYW1lPSJMYXVuY2hUaGVtZSIgcGFyZW50PSJAYW5kcm9pZDpzdHlsZS9UaGVtZS5CbGFjay5Ob1RpdGxlQmFyIj4KICAgICAgICA8IS0tIFNob3cgYSBzcGxhc2ggc2NyZWVuIG9uIHRoZSBhY3Rpdml0eS4gQXV0b21hdGljYWxseSByZW1vdmVkIHdoZW4KICAgICAgICAgICAgIHRoZSBGbHV0dGVyIGVuZ2luZSBkcmF3cyBpdHMgZmlyc3QgZnJhbWUgLS0+CiAgICAgICAgPGl0ZW0gbmFtZT0iYW5kcm9pZDp3aW5kb3dCYWNrZ3JvdW5kIj5AZHJhd2FibGUvbGF1bmNoX2JhY2tncm91bmQ8L2l0ZW0+CiAgICA8L3N0eWxlPgogICAgPCEtLSBUaGVtZSBhcHBsaWVkIHRvIHRoZSBBbmRyb2lkIFdpbmRvdyBhcyBzb29uIGFzIHRoZSBwcm9jZXNzIGhhcyBzdGFydGVkLgogICAgICAgICBUaGlzIHRoZW1lIGRldGVybWluZXMgdGhlIGNvbG9yIG9mIHRoZSBBbmRyb2lkIFdpbmRvdyB3aGlsZSB5b3VyCiAgICAgICAgIEZsdXR0ZXIgVUkgaW5pdGlhbGl6ZXMsIGFzIHdlbGwgYXMgYmVoaW5kIHlvdXIgRmx1dHRlciBVSSB3aGlsZSBpdHMKICAgICAgICAgcnVubmluZy4KCiAgICAgICAgIFRoaXMgVGhlbWUgaXMgb25seSB1c2VkIHN0YXJ0aW5nIHdpdGggVjIgb2YgRmx1dHRlcidzIEFuZHJvaWQgZW1iZWRkaW5nLiAtLT4KICAgIDxzdHlsZSBuYW1lPSJOb3JtYWxUaGVtZSIgcGFyZW50PSJAYW5kcm9pZDpzdHlsZS9UaGVtZS5CbGFjay5Ob1RpdGxlQmFyIj4KICAgICAgICA8aXRlbSBuYW1lPSJhbmRyb2lkOndpbmRvd0JhY2tncm91bmQiPj9hbmRyb2lkOmNvbG9yQmFja2dyb3VuZDwvaXRlbT4KICAgIDwvc3R5bGU+CjwvcmVzb3VyY2VzPgo=",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/main/res/values/styles.xml",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHJlc291cmNlcz4KICAgIDwhLS0gVGhlbWUgYXBwbGllZCB0byB0aGUgQW5kcm9pZCBXaW5kb3cgd2hpbGUgdGhlIHByb2Nlc3MgaXMgc3RhcnRpbmcgd2hlbiB0aGUgT1MncyBEYXJrIE1vZGUgc2V0dGluZyBpcyBvZmYgLS0+CiAgICA8c3R5bGUgbmFtZT0iTGF1bmNoVGhlbWUiIHBhcmVudD0iQGFuZHJvaWQ6c3R5bGUvVGhlbWUuTGlnaHQuTm9UaXRsZUJhciI+CiAgICAgICAgPCEtLSBTaG93IGEgc3BsYXNoIHNjcmVlbiBvbiB0aGUgYWN0aXZpdHkuIEF1dG9tYXRpY2FsbHkgcmVtb3ZlZCB3aGVuCiAgICAgICAgICAgICB0aGUgRmx1dHRlciBlbmdpbmUgZHJhd3MgaXRzIGZpcnN0IGZyYW1lIC0tPgogICAgICAgIDxpdGVtIG5hbWU9ImFuZHJvaWQ6d2luZG93QmFja2dyb3VuZCI+QGRyYXdhYmxlL2xhdW5jaF9iYWNrZ3JvdW5kPC9pdGVtPgogICAgPC9zdHlsZT4KICAgIDwhLS0gVGhlbWUgYXBwbGllZCB0byB0aGUgQW5kcm9pZCBXaW5kb3cgYXMgc29vbiBhcyB0aGUgcHJvY2VzcyBoYXMgc3RhcnRlZC4KICAgICAgICAgVGhpcyB0aGVtZSBkZXRlcm1pbmVzIHRoZSBjb2xvciBvZiB0aGUgQW5kcm9pZCBXaW5kb3cgd2hpbGUgeW91cgogICAgICAgICBGbHV0dGVyIFVJIGluaXRpYWxpemVzLCBhcyB3ZWxsIGFzIGJlaGluZCB5b3VyIEZsdXR0ZXIgVUkgd2hpbGUgaXRzCiAgICAgICAgIHJ1bm5pbmcuCgogICAgICAgICBUaGlzIFRoZW1lIGlzIG9ubHkgdXNlZCBzdGFydGluZyB3aXRoIFYyIG9mIEZsdXR0ZXIncyBBbmRyb2lkIGVtYmVkZGluZy4gLS0+CiAgICA8c3R5bGUgbmFtZT0iTm9ybWFsVGhlbWUiIHBhcmVudD0iQGFuZHJvaWQ6c3R5bGUvVGhlbWUuTGlnaHQuTm9UaXRsZUJhciI+CiAgICAgICAgPGl0ZW0gbmFtZT0iYW5kcm9pZDp3aW5kb3dCYWNrZ3JvdW5kIj4/YW5kcm9pZDpjb2xvckJhY2tncm91bmQ8L2l0ZW0+CiAgICA8L3N0eWxlPgo8L3Jlc291cmNlcz4K",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/app/src/profile/AndroidManifest.xml",
      "data":
          "PG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8IS0tIFRoZSBJTlRFUk5FVCBwZXJtaXNzaW9uIGlzIHJlcXVpcmVkIGZvciBkZXZlbG9wbWVudC4gU3BlY2lmaWNhbGx5LAogICAgICAgICB0aGUgRmx1dHRlciB0b29sIG5lZWRzIGl0IHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHJ1bm5pbmcgYXBwbGljYXRpb24KICAgICAgICAgdG8gYWxsb3cgc2V0dGluZyBicmVha3BvaW50cywgdG8gcHJvdmlkZSBob3QgcmVsb2FkLCBldGMuCiAgICAtLT4KICAgIDx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPSJhbmRyb2lkLnBlcm1pc3Npb24uSU5URVJORVQiLz4KPC9tYW5pZmVzdD4K",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/android/build.gradle",
      "data":
          "YWxscHJvamVjdHMgewogICAgcmVwb3NpdG9yaWVzIHsKICAgICAgICBnb29nbGUoKQogICAgICAgIG1hdmVuQ2VudHJhbCgpCiAgICB9Cn0KCnJvb3RQcm9qZWN0LmJ1aWxkRGlyID0gIi4uL2J1aWxkIgpzdWJwcm9qZWN0cyB7CiAgICBwcm9qZWN0LmJ1aWxkRGlyID0gIiR7cm9vdFByb2plY3QuYnVpbGREaXJ9LyR7cHJvamVjdC5uYW1lfSIKfQpzdWJwcm9qZWN0cyB7CiAgICBwcm9qZWN0LmV2YWx1YXRpb25EZXBlbmRzT24oIjphcHAiKQp9Cgp0YXNrcy5yZWdpc3RlcigiY2xlYW4iLCBEZWxldGUpIHsKICAgIGRlbGV0ZSByb290UHJvamVjdC5idWlsZERpcgp9Cg==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/android/gradle.properties",
      "data":
          "b3JnLmdyYWRsZS5qdm1hcmdzPS1YbXg0RyAtWFg6TWF4TWV0YXNwYWNlU2l6ZT0yRyAtWFg6K0hlYXBEdW1wT25PdXRPZk1lbW9yeUVycm9yCmFuZHJvaWQudXNlQW5kcm9pZFg9dHJ1ZQphbmRyb2lkLmVuYWJsZUpldGlmaWVyPXRydWUK",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/android/gradle/wrapper/gradle-wrapper.properties",
      "data":
          "ZGlzdHJpYnV0aW9uQmFzZT1HUkFETEVfVVNFUl9IT01FCmRpc3RyaWJ1dGlvblBhdGg9d3JhcHBlci9kaXN0cwp6aXBTdG9yZUJhc2U9R1JBRExFX1VTRVJfSE9NRQp6aXBTdG9yZVBhdGg9d3JhcHBlci9kaXN0cwpkaXN0cmlidXRpb25Vcmw9aHR0cHNcOi8vc2VydmljZXMuZ3JhZGxlLm9yZy9kaXN0cmlidXRpb25zL2dyYWRsZS04LjMtYWxsLnppcAo=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/android/settings.gradle",
      "data":
          "cGx1Z2luTWFuYWdlbWVudCB7CiAgICBkZWYgZmx1dHRlclNka1BhdGggPSB7CiAgICAgICAgZGVmIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCiAgICAgICAgZmlsZSgibG9jYWwucHJvcGVydGllcyIpLndpdGhJbnB1dFN0cmVhbSB7IHByb3BlcnRpZXMubG9hZChpdCkgfQogICAgICAgIGRlZiBmbHV0dGVyU2RrUGF0aCA9IHByb3BlcnRpZXMuZ2V0UHJvcGVydHkoImZsdXR0ZXIuc2RrIikKICAgICAgICBhc3NlcnQgZmx1dHRlclNka1BhdGggIT0gbnVsbCwgImZsdXR0ZXIuc2RrIG5vdCBzZXQgaW4gbG9jYWwucHJvcGVydGllcyIKICAgICAgICByZXR1cm4gZmx1dHRlclNka1BhdGgKICAgIH0oKQoKICAgIGluY2x1ZGVCdWlsZCgiJGZsdXR0ZXJTZGtQYXRoL3BhY2thZ2VzL2ZsdXR0ZXJfdG9vbHMvZ3JhZGxlIikKCiAgICByZXBvc2l0b3JpZXMgewogICAgICAgIGdvb2dsZSgpCiAgICAgICAgbWF2ZW5DZW50cmFsKCkKICAgICAgICBncmFkbGVQbHVnaW5Qb3J0YWwoKQogICAgfQp9CgpwbHVnaW5zIHsKICAgIGlkICJkZXYuZmx1dHRlci5mbHV0dGVyLXBsdWdpbi1sb2FkZXIiIHZlcnNpb24gIjEuMC4wIgogICAgaWQgImNvbS5hbmRyb2lkLmFwcGxpY2F0aW9uIiB2ZXJzaW9uICI4LjEuMCIgYXBwbHkgZmFsc2UKICAgIGlkICJvcmcuamV0YnJhaW5zLmtvdGxpbi5hbmRyb2lkIiB2ZXJzaW9uICIxLjguMjIiIGFwcGx5IGZhbHNlCn0KCmluY2x1ZGUgIjphcHAiCg==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/.gitignore",
      "data":
          "KiovZGdwaAoqLm1vZGUxdjMKKi5tb2RlMnYzCioubW92ZWQtYXNpZGUKKi5wYnh1c2VyCioucGVyc3BlY3RpdmV2MwoqKi8qc3luYy8KLnNjb25zaWduLmRibGl0ZQoudGFncyoKKiovLnZhZ3JhbnQvCioqL0Rlcml2ZWREYXRhLwpJY29uPwoqKi9Qb2RzLwoqKi8uc3ltbGlua3MvCnByb2ZpbGUKeGN1c2VyZGF0YQoqKi8uZ2VuZXJhdGVkLwpGbHV0dGVyL0FwcC5mcmFtZXdvcmsKRmx1dHRlci9GbHV0dGVyLmZyYW1ld29yawpGbHV0dGVyL0ZsdXR0ZXIucG9kc3BlYwpGbHV0dGVyL0dlbmVyYXRlZC54Y2NvbmZpZwpGbHV0dGVyL2VwaGVtZXJhbC8KRmx1dHRlci9hcHAuZmx4CkZsdXR0ZXIvYXBwLnppcApGbHV0dGVyL2ZsdXR0ZXJfYXNzZXRzLwpGbHV0dGVyL2ZsdXR0ZXJfZXhwb3J0X2Vudmlyb25tZW50LnNoClNlcnZpY2VEZWZpbml0aW9ucy5qc29uClJ1bm5lci9HZW5lcmF0ZWRQbHVnaW5SZWdpc3RyYW50LioKCiMgRXhjZXB0aW9ucyB0byBhYm92ZSBydWxlcy4KIWRlZmF1bHQubW9kZTF2MwohZGVmYXVsdC5tb2RlMnYzCiFkZWZhdWx0LnBieHVzZXIKIWRlZmF1bHQucGVyc3BlY3RpdmV2Mwo=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Flutter/AppFrameworkInfo.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KICA8a2V5PkNGQnVuZGxlRGV2ZWxvcG1lbnRSZWdpb248L2tleT4KICA8c3RyaW5nPmVuPC9zdHJpbmc+CiAgPGtleT5DRkJ1bmRsZUV4ZWN1dGFibGU8L2tleT4KICA8c3RyaW5nPkFwcDwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVJZGVudGlmaWVyPC9rZXk+CiAgPHN0cmluZz5pby5mbHV0dGVyLmZsdXR0ZXIuYXBwPC9zdHJpbmc+CiAgPGtleT5DRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvbjwva2V5PgogIDxzdHJpbmc+Ni4wPC9zdHJpbmc+CiAgPGtleT5DRkJ1bmRsZU5hbWU8L2tleT4KICA8c3RyaW5nPkFwcDwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVQYWNrYWdlVHlwZTwva2V5PgogIDxzdHJpbmc+Rk1XSzwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVTaG9ydFZlcnNpb25TdHJpbmc8L2tleT4KICA8c3RyaW5nPjEuMDwvc3RyaW5nPgogIDxrZXk+Q0ZCdW5kbGVTaWduYXR1cmU8L2tleT4KICA8c3RyaW5nPj8/Pz88L3N0cmluZz4KICA8a2V5PkNGQnVuZGxlVmVyc2lvbjwva2V5PgogIDxzdHJpbmc+MS4wPC9zdHJpbmc+CiAgPGtleT5NaW5pbXVtT1NWZXJzaW9uPC9rZXk+CiAgPHN0cmluZz4xMi4wPC9zdHJpbmc+CjwvZGljdD4KPC9wbGlzdD4K",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Flutter/Debug.xcconfig",
      "data":
          "I2luY2x1ZGU/ICJQb2RzL1RhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtUnVubmVyL1BvZHMtUnVubmVyLmRlYnVnLnhjY29uZmlnIgojaW5jbHVkZSAiR2VuZXJhdGVkLnhjY29uZmlnIgo=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Flutter/Release.xcconfig",
      "data":
          "I2luY2x1ZGU/ICJQb2RzL1RhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtUnVubmVyL1BvZHMtUnVubmVyLnJlbGVhc2UueGNjb25maWciCiNpbmNsdWRlICJHZW5lcmF0ZWQueGNjb25maWciCg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.pbxproj",
      "data":
          "",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFdvcmtzcGFjZQogICB2ZXJzaW9uID0gIjEuMCI+CiAgIDxGaWxlUmVmCiAgICAgIGxvY2F0aW9uID0gInNlbGY6Ij4KICAgPC9GaWxlUmVmPgo8L1dvcmtzcGFjZT4K",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+SURFRGlkQ29tcHV0ZU1hYzMyQml0V2FybmluZzwva2V5PgoJPHRydWUvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+UHJldmlld3NFbmFibGVkPC9rZXk+Cgk8ZmFsc2UvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFNjaGVtZQogICBMYXN0VXBncmFkZVZlcnNpb24gPSAiMTUxMCIKICAgdmVyc2lvbiA9ICIxLjMiPgogICA8QnVpbGRBY3Rpb24KICAgICAgcGFyYWxsZWxpemVCdWlsZGFibGVzID0gIllFUyIKICAgICAgYnVpbGRJbXBsaWNpdERlcGVuZGVuY2llcyA9ICJZRVMiPgogICAgICA8QnVpbGRBY3Rpb25FbnRyaWVzPgogICAgICAgICA8QnVpbGRBY3Rpb25FbnRyeQogICAgICAgICAgICBidWlsZEZvclRlc3RpbmcgPSAiWUVTIgogICAgICAgICAgICBidWlsZEZvclJ1bm5pbmcgPSAiWUVTIgogICAgICAgICAgICBidWlsZEZvclByb2ZpbGluZyA9ICJZRVMiCiAgICAgICAgICAgIGJ1aWxkRm9yQXJjaGl2aW5nID0gIllFUyIKICAgICAgICAgICAgYnVpbGRGb3JBbmFseXppbmcgPSAiWUVTIj4KICAgICAgICAgICAgPEJ1aWxkYWJsZVJlZmVyZW5jZQogICAgICAgICAgICAgICBCdWlsZGFibGVJZGVudGlmaWVyID0gInByaW1hcnkiCiAgICAgICAgICAgICAgIEJsdWVwcmludElkZW50aWZpZXIgPSAiOTdDMTQ2RUQxQ0Y5MDAwRjAwN0MxMTdEIgogICAgICAgICAgICAgICBCdWlsZGFibGVOYW1lID0gIlJ1bm5lci5hcHAiCiAgICAgICAgICAgICAgIEJsdWVwcmludE5hbWUgPSAiUnVubmVyIgogICAgICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgICAgIDwvQnVpbGRBY3Rpb25FbnRyeT4KICAgICAgPC9CdWlsZEFjdGlvbkVudHJpZXM+CiAgIDwvQnVpbGRBY3Rpb24+CiAgIDxUZXN0QWN0aW9uCiAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbiA9ICJEZWJ1ZyIKICAgICAgc2VsZWN0ZWREZWJ1Z2dlcklkZW50aWZpZXIgPSAiWGNvZGUuRGVidWdnZXJGb3VuZGF0aW9uLkRlYnVnZ2VyLkxMREIiCiAgICAgIHNlbGVjdGVkTGF1bmNoZXJJZGVudGlmaWVyID0gIlhjb2RlLkRlYnVnZ2VyRm91bmRhdGlvbi5MYXVuY2hlci5MTERCIgogICAgICBzaG91bGRVc2VMYXVuY2hTY2hlbWVBcmdzRW52ID0gIllFUyI+CiAgICAgIDxNYWNyb0V4cGFuc2lvbj4KICAgICAgICAgPEJ1aWxkYWJsZVJlZmVyZW5jZQogICAgICAgICAgICBCdWlsZGFibGVJZGVudGlmaWVyID0gInByaW1hcnkiCiAgICAgICAgICAgIEJsdWVwcmludElkZW50aWZpZXIgPSAiOTdDMTQ2RUQxQ0Y5MDAwRjAwN0MxMTdEIgogICAgICAgICAgICBCdWlsZGFibGVOYW1lID0gIlJ1bm5lci5hcHAiCiAgICAgICAgICAgIEJsdWVwcmludE5hbWUgPSAiUnVubmVyIgogICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgIDwvTWFjcm9FeHBhbnNpb24+CiAgICAgIDxUZXN0YWJsZXM+CiAgICAgICAgIDxUZXN0YWJsZVJlZmVyZW5jZQogICAgICAgICAgICBza2lwcGVkID0gIk5PIgogICAgICAgICAgICBwYXJhbGxlbGl6YWJsZSA9ICJZRVMiPgogICAgICAgICAgICA8QnVpbGRhYmxlUmVmZXJlbmNlCiAgICAgICAgICAgICAgIEJ1aWxkYWJsZUlkZW50aWZpZXIgPSAicHJpbWFyeSIKICAgICAgICAgICAgICAgQmx1ZXByaW50SWRlbnRpZmllciA9ICIzMzFDODA4MDI5NEE2M0E0MDAyNjNCRTUiCiAgICAgICAgICAgICAgIEJ1aWxkYWJsZU5hbWUgPSAiUnVubmVyVGVzdHMueGN0ZXN0IgogICAgICAgICAgICAgICBCbHVlcHJpbnROYW1lID0gIlJ1bm5lclRlc3RzIgogICAgICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgICAgIDwvVGVzdGFibGVSZWZlcmVuY2U+CiAgICAgIDwvVGVzdGFibGVzPgogICA8L1Rlc3RBY3Rpb24+CiAgIDxMYXVuY2hBY3Rpb24KICAgICAgYnVpbGRDb25maWd1cmF0aW9uID0gIkRlYnVnIgogICAgICBzZWxlY3RlZERlYnVnZ2VySWRlbnRpZmllciA9ICJYY29kZS5EZWJ1Z2dlckZvdW5kYXRpb24uRGVidWdnZXIuTExEQiIKICAgICAgc2VsZWN0ZWRMYXVuY2hlcklkZW50aWZpZXIgPSAiWGNvZGUuRGVidWdnZXJGb3VuZGF0aW9uLkxhdW5jaGVyLkxMREIiCiAgICAgIGxhdW5jaFN0eWxlID0gIjAiCiAgICAgIHVzZUN1c3RvbVdvcmtpbmdEaXJlY3RvcnkgPSAiTk8iCiAgICAgIGlnbm9yZXNQZXJzaXN0ZW50U3RhdGVPbkxhdW5jaCA9ICJOTyIKICAgICAgZGVidWdEb2N1bWVudFZlcnNpb25pbmcgPSAiWUVTIgogICAgICBkZWJ1Z1NlcnZpY2VFeHRlbnNpb24gPSAiaW50ZXJuYWwiCiAgICAgIGFsbG93TG9jYXRpb25TaW11bGF0aW9uID0gIllFUyI+CiAgICAgIDxCdWlsZGFibGVQcm9kdWN0UnVubmFibGUKICAgICAgICAgcnVubmFibGVEZWJ1Z2dpbmdNb2RlID0gIjAiPgogICAgICAgICA8QnVpbGRhYmxlUmVmZXJlbmNlCiAgICAgICAgICAgIEJ1aWxkYWJsZUlkZW50aWZpZXIgPSAicHJpbWFyeSIKICAgICAgICAgICAgQmx1ZXByaW50SWRlbnRpZmllciA9ICI5N0MxNDZFRDFDRjkwMDBGMDA3QzExN0QiCiAgICAgICAgICAgIEJ1aWxkYWJsZU5hbWUgPSAiUnVubmVyLmFwcCIKICAgICAgICAgICAgQmx1ZXByaW50TmFtZSA9ICJSdW5uZXIiCiAgICAgICAgICAgIFJlZmVyZW5jZWRDb250YWluZXIgPSAiY29udGFpbmVyOlJ1bm5lci54Y29kZXByb2oiPgogICAgICAgICA8L0J1aWxkYWJsZVJlZmVyZW5jZT4KICAgICAgPC9CdWlsZGFibGVQcm9kdWN0UnVubmFibGU+CiAgIDwvTGF1bmNoQWN0aW9uPgogICA8UHJvZmlsZUFjdGlvbgogICAgICBidWlsZENvbmZpZ3VyYXRpb24gPSAiUHJvZmlsZSIKICAgICAgc2hvdWxkVXNlTGF1bmNoU2NoZW1lQXJnc0VudiA9ICJZRVMiCiAgICAgIHNhdmVkVG9vbElkZW50aWZpZXIgPSAiIgogICAgICB1c2VDdXN0b21Xb3JraW5nRGlyZWN0b3J5ID0gIk5PIgogICAgICBkZWJ1Z0RvY3VtZW50VmVyc2lvbmluZyA9ICJZRVMiPgogICAgICA8QnVpbGRhYmxlUHJvZHVjdFJ1bm5hYmxlCiAgICAgICAgIHJ1bm5hYmxlRGVidWdnaW5nTW9kZSA9ICIwIj4KICAgICAgICAgPEJ1aWxkYWJsZVJlZmVyZW5jZQogICAgICAgICAgICBCdWlsZGFibGVJZGVudGlmaWVyID0gInByaW1hcnkiCiAgICAgICAgICAgIEJsdWVwcmludElkZW50aWZpZXIgPSAiOTdDMTQ2RUQxQ0Y5MDAwRjAwN0MxMTdEIgogICAgICAgICAgICBCdWlsZGFibGVOYW1lID0gIlJ1bm5lci5hcHAiCiAgICAgICAgICAgIEJsdWVwcmludE5hbWUgPSAiUnVubmVyIgogICAgICAgICAgICBSZWZlcmVuY2VkQ29udGFpbmVyID0gImNvbnRhaW5lcjpSdW5uZXIueGNvZGVwcm9qIj4KICAgICAgICAgPC9CdWlsZGFibGVSZWZlcmVuY2U+CiAgICAgIDwvQnVpbGRhYmxlUHJvZHVjdFJ1bm5hYmxlPgogICA8L1Byb2ZpbGVBY3Rpb24+CiAgIDxBbmFseXplQWN0aW9uCiAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbiA9ICJEZWJ1ZyI+CiAgIDwvQW5hbHl6ZUFjdGlvbj4KICAgPEFyY2hpdmVBY3Rpb24KICAgICAgYnVpbGRDb25maWd1cmF0aW9uID0gIlJlbGVhc2UiCiAgICAgIHJldmVhbEFyY2hpdmVJbk9yZ2FuaXplciA9ICJZRVMiPgogICA8L0FyY2hpdmVBY3Rpb24+CjwvU2NoZW1lPgo=",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcworkspace/contents.xcworkspacedata",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFdvcmtzcGFjZQogICB2ZXJzaW9uID0gIjEuMCI+CiAgIDxGaWxlUmVmCiAgICAgIGxvY2F0aW9uID0gImdyb3VwOlJ1bm5lci54Y29kZXByb2oiPgogICA8L0ZpbGVSZWY+CiAgIDxGaWxlUmVmCiAgICAgIGxvY2F0aW9uID0gImdyb3VwOlBvZHMvUG9kcy54Y29kZXByb2oiPgogICA8L0ZpbGVSZWY+CjwvV29ya3NwYWNlPgo=",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+SURFRGlkQ29tcHV0ZU1hYzMyQml0V2FybmluZzwva2V5PgoJPHRydWUvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+UHJldmlld3NFbmFibGVkPC9rZXk+Cgk8ZmFsc2UvPgo8L2RpY3Q+CjwvcGxpc3Q+Cg==",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Runner/AppDelegate.swift",
      "data":
          "aW1wb3J0IEZsdXR0ZXIKaW1wb3J0IFVJS2l0CgpAbWFpbgpAb2JqYyBjbGFzcyBBcHBEZWxlZ2F0ZTogRmx1dHRlckFwcERlbGVnYXRlIHsKICBvdmVycmlkZSBmdW5jIGFwcGxpY2F0aW9uKAogICAgXyBhcHBsaWNhdGlvbjogVUlBcHBsaWNhdGlvbiwKICAgIGRpZEZpbmlzaExhdW5jaGluZ1dpdGhPcHRpb25zIGxhdW5jaE9wdGlvbnM6IFtVSUFwcGxpY2F0aW9uLkxhdW5jaE9wdGlvbnNLZXk6IEFueV0/CiAgKSAtPiBCb29sIHsKICAgIEdlbmVyYXRlZFBsdWdpblJlZ2lzdHJhbnQucmVnaXN0ZXIod2l0aDogc2VsZikKICAgIHJldHVybiBzdXBlci5hcHBsaWNhdGlvbihhcHBsaWNhdGlvbiwgZGlkRmluaXNoTGF1bmNoaW5nV2l0aE9wdGlvbnM6IGxhdW5jaE9wdGlvbnMpCiAgfQp9Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json",
      "data":
          "ewogICJpbWFnZXMiIDogWwogICAgewogICAgICAic2l6ZSIgOiAiMjB4MjAiLAogICAgICAiaWRpb20iIDogImlwaG9uZSIsCiAgICAgICJmaWxlbmFtZSIgOiAiSWNvbi1BcHAtMjB4MjBAMngucG5nIiwKICAgICAgInNjYWxlIiA6ICIyeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICIyMHgyMCIsCiAgICAgICJpZGlvbSIgOiAiaXBob25lIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC0yMHgyMEAzeC5wbmciLAogICAgICAic2NhbGUiIDogIjN4IgogICAgfSwKICAgIHsKICAgICAgInNpemUiIDogIjI5eDI5IiwKICAgICAgImlkaW9tIiA6ICJpcGhvbmUiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTI5eDI5QDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjl4MjkiLAogICAgICAiaWRpb20iIDogImlwaG9uZSIsCiAgICAgICJmaWxlbmFtZSIgOiAiSWNvbi1BcHAtMjl4MjlAMngucG5nIiwKICAgICAgInNjYWxlIiA6ICIyeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICIyOXgyOSIsCiAgICAgICJpZGlvbSIgOiAiaXBob25lIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC0yOXgyOUAzeC5wbmciLAogICAgICAic2NhbGUiIDogIjN4IgogICAgfSwKICAgIHsKICAgICAgInNpemUiIDogIjQweDQwIiwKICAgICAgImlkaW9tIiA6ICJpcGhvbmUiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTQweDQwQDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNDB4NDAiLAogICAgICAiaWRpb20iIDogImlwaG9uZSIsCiAgICAgICJmaWxlbmFtZSIgOiAiSWNvbi1BcHAtNDB4NDBAM3gucG5nIiwKICAgICAgInNjYWxlIiA6ICIzeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICI2MHg2MCIsCiAgICAgICJpZGlvbSIgOiAiaXBob25lIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC02MHg2MEAyeC5wbmciLAogICAgICAic2NhbGUiIDogIjJ4IgogICAgfSwKICAgIHsKICAgICAgInNpemUiIDogIjYweDYwIiwKICAgICAgImlkaW9tIiA6ICJpcGhvbmUiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTYweDYwQDN4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiM3giCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjB4MjAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTIweDIwQDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjB4MjAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTIweDIwQDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjl4MjkiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTI5eDI5QDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiMjl4MjkiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTI5eDI5QDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNDB4NDAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTQweDQwQDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNDB4NDAiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTQweDQwQDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNzZ4NzYiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTc2eDc2QDF4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMXgiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiNzZ4NzYiLAogICAgICAiaWRpb20iIDogImlwYWQiLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTc2eDc2QDJ4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiMngiCiAgICB9LAogICAgewogICAgICAic2l6ZSIgOiAiODMuNXg4My41IiwKICAgICAgImlkaW9tIiA6ICJpcGFkIiwKICAgICAgImZpbGVuYW1lIiA6ICJJY29uLUFwcC04My41eDgzLjVAMngucG5nIiwKICAgICAgInNjYWxlIiA6ICIyeCIKICAgIH0sCiAgICB7CiAgICAgICJzaXplIiA6ICIxMDI0eDEwMjQiLAogICAgICAiaWRpb20iIDogImlvcy1tYXJrZXRpbmciLAogICAgICAiZmlsZW5hbWUiIDogIkljb24tQXBwLTEwMjR4MTAyNEAxeC5wbmciLAogICAgICAic2NhbGUiIDogIjF4IgogICAgfQogIF0sCiAgImluZm8iIDogewogICAgInZlcnNpb24iIDogMSwKICAgICJhdXRob3IiIDogInhjb2RlIgogIH0KfQo=",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png",
      "data":
          "",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAbFBMVEX///9Uxfj6/v/3/P8BV5v0+/+O2frZ8v2Y3fuL2PqH1vpWj72T2/sptva/1Obv+v7g9f73+vy+6fyE1frv9fl10PlXx/g8vfcos/Po9/7R7/3G7P3x9vpozPlNwvjA1uZLm8tbmsAQbaUBUpIS2jkXAAAAdklEQVQY052QyQ6DMAwFMTFt05Cw7zv8/z8SXxAOF2COo5GebO8N4msJuPNDAPg77kOOhwF10uNQlwnekZPi7kb8s0SHlLQRDwBlek4z0YzWdewYv610BbZjFFrXc+LIqKhXVJd3LBuiyh2bKMRr20/GGEofsAP1wASFbdBGzgAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAilBMVEX///9UxfgBV5sptvbw+v5uzvnn9/7R7/100Pn3/f9hyvny+//s+f5rzfmwy+B90/re9P7z+//t9PlQxPj8/v9cyPgxufbg6/Mmr+0yd64vda2Q2fqD1fri7PQ1erAkbqgBSIHl9v7M7v3X7/ud3vtDv/dJvPEwtPHa5vDW5O8NbasJXJQLWYkLV4ZWqLjRAAAAx0lEQVQ4y+2QSRKCMBQFMwEJGokICjI4z3r/62mmckElcU3Z6673qz8YPyQx7AJeBDUR8XrTzHqx15tT6zH/nvW4f4/Yu5T81sH/Hc6OYmJg/g7WpBouBmIcfTvYEWrSxJGiO4rGeKXaG25S3TFvF8bbu7K56sjwUpmpcD9IdlCMlVkmwAdrMVam7PCRYc3lAPwIqLzqXq8CZnyS3gOhdR4yIa5eW4RQHzLF+Sm9z2boer5BmpoFzGtvzGBRZzbDRd3McAOj5A2X+gue1atu9QAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAMAAAANIilAAAAAhFBMVEX///9UxfgptvYBV5tXxvhZx/jt+f6k4Pvj9v6U2/vd8/5bk7/q+P7h9f5cyPjl9/7Y8v0JXJ5gyfkvuPYCT4ne9P7T4u4MXp/7/f9Ow/jr8vfc6PEBVJUDPWb0+//R7/3M7v1RxPji7PQlqufo7/Ynr+4mq+hnm8Nck78KV5EGS30BQnYYEX8cAAAA+UlEQVRIx+3T2Q6CMBBA0VoWsVI2QXBBBXf9//+zBkKHmJQMfSBE7iPJSdspJVNT3+w5LMNZbyYzmYblOGtB66Os27KOhvU19sw1LBvojhKc1ZnzCG37vMkI73e8bzBZgOYZ6g0G8FukOIfzO+fAU1oYV1rPJcp4+79KWuc4kI4cOGdezEAZ6YybjfUp3TTUkuuqtFVbRqnUka1EUlf2uKJSRy7BdBK20ZGPtnUFdl2xZ5lpE1SMgp5b0lvHRnhB6qDe+DXeG0a666VvL4H7aGHP+VvgPpoJm8dGVVpi1xarNoXYma8FGkyHUJcaGj/z9WMpu2dk6v/6ABOJELToA9jjAAAAAElFTkSuQmCC",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAMAAABhTZc9AAAAXVBMVEX///9UxfgptvYBV5v7/v9ly/n4/f/a8/6x5fyt4/xcyPggbKel4fud3vtuzvm35/yU2/sBVpnW8f31+ftCv/dBvvc2uveGu9l6p8t5p8ochsIVfbgWdagBVJYBSYGC2+klAAAAeElEQVQoz83O2Q6EMAhAUaZlGB33fff/P9NSExMT6KveJ5ITAvCS4j+Xo4wf7ksiRiEsTsTQZvDmMw/Rz3fD+sLcTyncShlJRC5mxFZCLkLA3hiHGUhRZ1wKQma4GUGudLhUic7rXlmVh826kkbhyXomhceTER7tAGerBEwLLLdsAAAAAElFTkSuQmCC",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAADoAAAA6CAMAAADWZboaAAAAllBMVEX///9UxfgBV5sptvae3vvC6/1ozPkEWZ3J7f215vyv5PyZ3ftJwvjW8f3P7/2V2/sBU5PG7P276Pzi9f7T8P2N2fosuPbN3uy70uTa8/645/yu4/yn4fui4PuI1/pYxvi91OW1zuJ8qMpyosgYeqwBTosAQXTq+P666PzT4u5zw+l1pMkYh8IZhb4YgbgXeKgBRHoAMVcbTd2OAAAA80lEQVRIx+3S5w6CMBSG4XrqQKXiwL1AEfe6/5tThvREIuYAEaO8P0metP0Cy/vLNmWUTpG1Aqr0GVnFskGR7dhylME7x1i2MlhIIZ2ZwUK1dBbSv32hcToLKbH/eJFwoU4RJSgLCfypzl42DcnGPEriJk+3FVhqERBZ3Xtn4Z3EFdF/O1RDt422wTsVzlWCdLbyZavHpZUyso637V0GVmOEhtxPpUrBubR1ilz3uGzHSHWlPMCAZrWHPDah0o917mnVBIAtzc4cadkuBYNsz9eLK6FiEu9s2Q70LHGrBcioW+0BRbRLfO4ggTUTvNdgeb/fDV2QDXLbhsKaAAAAAElFTkSuQmCC",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAFcAAABXCAMAAABGFileAAAAt1BMVEX///9UxfgptvYBV5v7/v/5/f9XxvhVxfh/1Pp80/rw+v70+PscaaUDWZz2/P/z+/+a3fuK1/r9/v+76Pyv5Px50vkBVpqH1vpSxPiU2vsBUI2o4vuE1vpkmcKz5vxNirkBU5Wg3/uO2fo4u/cuuPYXeasBS4UBQHK45/w6vPd6p8t1pMkZh8JflcDy+v43u/dxosdVj7wYgroBVZgAM1r0+//b8/6i4PuKwt8caaYCSH4ANF0BMFMltTBwAAABxElEQVRYw+3Ua1OCQBTGcZRdFzSuBghaqXlLsyy71/f/XIEFGxxqsD022uzzlpk/vxmGo8jJyckhra2BdYlwlZ42aoWxXlNcewyytd6VuHYGtdputIElrm1DrS6udUu0jriWlGg9cS2BWnZgWoRPBrU1D+F3QNHClWmtvdXOoFa3dnIYAwQtzNY0a2/PeIm215RnXJ7xg9Pu6oxnWkLhEA6j+6iDtV3hM06G4BkLq3EfftLa8J02Vaqty747467DQDZ0lYozB6z8jBObQS1RKo/kxFqmHTaglm51cgYMnnFqgyqzt71lmTjLEp2JaLk4f8ZNrX7RyVcbQFtVzM848Ub1+nU+bJu/uhEDxvQv2nixWESbtrpOptVHSTYRC2g5OX2DnjS5mGuFRrRYm+68w7ViM71NkIeRtTyMoSWZlodDRXymA7qXy5aCsGExG/k3GOH7oJBd+8YJuvh20vd9VT3DCJsBz75Emy6OmISf2fF0EvXXvhqHMcXju6SbZLHENEyyb6/T6KOKJqbBRptW8cTmU9TnVUzxSgVDEbfmBi9iit2V8XdilFuhLKB4iSKGYQPnbM6fj4pbUIyPR+AUOTm5f7l3AYooKpScN7UAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAilBMVEX///9UxfgBV5sptvbw+v5uzvnn9/7R7/100Pn3/f9hyvny+//s+f5rzfmwy+B90/re9P7z+//t9PlQxPj8/v9cyPgxufbg6/Mmr+0yd64vda2Q2fqD1fri7PQ1erAkbqgBSIHl9v7M7v3X7/ud3vtDv/dJvPEwtPHa5vDW5O8NbasJXJQLWYkLV4ZWqLjRAAAAx0lEQVQ4y+2QSRKCMBQFMwEJGokICjI4z3r/62mmckElcU3Z6673qz8YPyQx7AJeBDUR8XrTzHqx15tT6zH/nvW4f4/Yu5T81sH/Hc6OYmJg/g7WpBouBmIcfTvYEWrSxJGiO4rGeKXaG25S3TFvF8bbu7K56sjwUpmpcD9IdlCMlVkmwAdrMVam7PCRYc3lAPwIqLzqXq8CZnyS3gOhdR4yIa5eW4RQHzLF+Sm9z2boer5BmpoFzGtvzGBRZzbDRd3McAOj5A2X+gue1atu9QAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAqFBMVEX///9UxfgptvYBV5v9/v9Wxvi66PxYx/h90/r8/v/X8v0aaKWz5fwLXp/2/P/A6vxcyPjU8P3J7f0BV5qjwttGwPcqt/bq+P7F7P110Plyz/mwy+Co4fsgnNcBVZbw+//l9/5hyfguuPYDVZMBT4wDOF+w5PyB1Pp40floy/m81OWYutQIW50DTYWG1vokot8hls4BR34CPWv4/f/S4e2VudUjbqgBQ3fb78qRAAABXUlEQVRYw+2W2VaDMBRFU4iUVIEqg9oJS6FVO1jn//8zo6xlILcuKYeHPmR/wF7nZr+EGQyGU2fgaqzuIN9Nv1fn7IIjvkvicxjC1ZD4BOSj9zLoXrIv4KaH6WF6mB6mh+lxOj1eBzop1MN3exojH+khdrrv/pr9j9P/o0e6Ivua+BgPDvcQxHfrs2Y4h3r4O+Jr/pUL+lAPCndID7dFD1pG9Zgn8dE9aBnVY25ZVtyqh8Kp9HiwJEncqoci+O0xlLrSqHoACLmvbpQ9AFL5fnXjCPGVPRQx7dEc1aO6UfZACDKrztMjh4R8ktR809kmYhiTrLpvMQu9scA2Liv7toswtL0xulH58m+h7UUcMy6z0vfynMuTbWnspMy+kMIfnzR2UGZaFJ+51JXgZfbFVq5TwGXWpU0Bl4k2NR9eRqxtshG9mmwEy4hIE+Jl3u3Oy5xrfLwxDE5gBoOhFV/mACDrcKxbuwAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAA51BMVEX///9UxfgAV5sptvb8/v9Yxvj7/f9Jwff+/v9GwPdVxfj5/f5yz/kAVZmQ2fpMwvcGW531+/5QxPguuPfR4OwASZImtPRSjLr7/P3S8P2V2/piyfj2/P70+v4twf8qtvYcsfVvzvk2uvYBU5UasfU2eq8AS5SU2vp30fnS7/130PliyvgWg70BTIcAPnAYeaoBT40BRn4BMVnv+PwAQXgAHzuM2PoZgLYQc6UBUZAASoMAN2QAKk3U8P3P7v3K7Pyd3/yC1Plmy/hjyvg3u/cdsvUasPTV4+7R4e3F2ehahqwIX6M2bZm1KkIjAAACMklEQVRo3u3Ya1PaUBCA4TWeJCdACgHRWEWkqVpKoQpqvfV+v/z/39M9OJ1tm8VWYM+0zr4f8iEwPLPJTpgJaJqmadpdzM4MJLvx5wVpA5Bl2Xa2jf18wJPVSZVkAfcgfLvlGgy2Bu7wozeV1wQLuPeSJttK0svc5y4ZN6xwhXGtKuyucKmrrrrqqquuujBNXXXVVVddddVV98661szMCro3z20l3ezFZr+/+Vt9PPX8ZQesoFtL6mzNd6fWWjm3F89435Tcv/2ltmBO4792+e8lB2AN3Bqu1uJwMRfnNfOslnkch4u5bt555AjlhVwLMKf8KA593F9e9j0vyT72ipdZN4LOMveK3zB+3rjLu/TcWHxmbt76bvdBRWhekjm3tbqOsoxLV/sX11y7q12SS3u1LLlenhdzssC8JJtarzwvyUKuo7JOaV6SBVySGZdkKRezlnVJpr0SqOSSzP8vLPVmT92y7NklWdidJO/R5eTWK4gsCGWh09xl4fWdJ19EFoueJJWHLdY9am+41RMK5Qhlzk0bHmVyj9PAp0xukaZp4Ekm99nosCgQ9iSTezk8n8I+ZXSfjo+G1xP7lNG9GiF87mCPMronl6Pji8PCsf5k516NR8PCiR7lDztnJ8i6Yb3KeXg2vkgbDbS8yhHk3/a/BrhU/mWz16Z5Pco55Hv7jVRllSkBOfgHZQNSOblI2YL2Rk4vJSTktU9rbB8/T8TgP78oF8xGM7OgaZqmaf9T3wGGRF3tQNvrKAAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAA51BMVEX///9UxfgAV5sptvb8/v9Yxvj7/f9Jwff+/v9GwPdVxfj5/f5yz/kAVZmQ2fpMwvcGW531+/5QxPguuPfR4OwASZImtPRSjLr7/P3S8P2V2/piyfj2/P70+v4twf8qtvYcsfVvzvk2uvYBU5UasfU2eq8AS5SU2vp30fnS7/130PliyvgWg70BTIcAPnAYeaoBT40BRn4BMVnv+PwAQXgAHzuM2PoZgLYQc6UBUZAASoMAN2QAKk3U8P3P7v3K7Pyd3/yC1Plmy/hjyvg3u/cdsvUasPTV4+7R4e3F2ehahqwIX6M2bZm1KkIjAAACMklEQVRo3u3Ya1PaUBCA4TWeJCdACgHRWEWkqVpKoQpqvfV+v/z/39M9OJ1tm8VWYM+0zr4f8iEwPLPJTpgJaJqmadpdzM4MJLvx5wVpA5Bl2Xa2jf18wJPVSZVkAfcgfLvlGgy2Bu7wozeV1wQLuPeSJttK0svc5y4ZN6xwhXGtKuyucKmrrrrqqquuujBNXXXVVVddddVV98661szMCro3z20l3ezFZr+/+Vt9PPX8ZQesoFtL6mzNd6fWWjm3F89435Tcv/2ltmBO4792+e8lB2AN3Bqu1uJwMRfnNfOslnkch4u5bt555AjlhVwLMKf8KA593F9e9j0vyT72ipdZN4LOMveK3zB+3rjLu/TcWHxmbt76bvdBRWhekjm3tbqOsoxLV/sX11y7q12SS3u1LLlenhdzssC8JJtarzwvyUKuo7JOaV6SBVySGZdkKRezlnVJpr0SqOSSzP8vLPVmT92y7NklWdidJO/R5eTWK4gsCGWh09xl4fWdJ19EFoueJJWHLdY9am+41RMK5Qhlzk0bHmVyj9PAp0xukaZp4Ekm99nosCgQ9iSTezk8n8I+ZXSfjo+G1xP7lNG9GiF87mCPMronl6Pji8PCsf5k516NR8PCiR7lDztnJ8i6Yb3KeXg2vkgbDbS8yhHk3/a/BrhU/mWz16Z5Pco55Hv7jVRllSkBOfgHZQNSOblI2YL2Rk4vJSTktU9rbB8/T8TgP78oF8xGM7OgaZqmaf9T3wGGRF3tQNvrKAAAAABJRU5ErkJggg==",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAMAAAAKE/YAAAABDlBMVEX///9UxfgptvYBV5tVxfj9/v/6/f9SxPhYxvj7/v/8/f5FwPf+//+f3voAVppKwvcDWZxMwvdPw/gqtvYATJQXsPb7/P1Hhbaq4vtyz/kAUZdHwPfM7fwAU5kAVZjS8P0HW52A0/kos/IosO8qvP4st/ao4fua3Pr4+/3K7Px/qszV8f2sxt2oxNwBVJUASZKT2vott/YBUI8BTYoCSoMALlPP7vzO7vzO7fyQ2foBUpIAQnsCQXMJQWMANWKqxdwKXJEDSX0AO2wAWqCl4PsAHTrk9v6r4vt10PmO1/ipxdwKV4lqzPk4vPcut/Y+gLMAIkMvv//E6vyU2/p70fnc5vAlquaZutaHr896nr70mOsBAAAFN0lEQVR42u3beXMSMRgG8ITdkN0lXK6igsUTxatqSz3xPlrv+/r+X8Q3ySLqspu0ssMbJs8f7fRg5jfvhORpKMTHx8fHx8fHx8fHx8fHx8cHReqWIXgiYmIbRpCExeTks91jxuzuNl+QmKAIS8jFcNBtm9Ltvv3MBI5Rg/kE7YZchXJK5QcVrj/wLGGjiWV5SDPvRqExESIzI7f5oYgag2nOjNwCMzeScZlvrqmZozInVmuDR8qcEAxhMbltYaYRxWIWaq+zmjMdNAmKgxDM9f2YMTQlbaZdo5kiM18EM7XY65w1C7LqaHPo1Jxnvc6qbyDZN8AcW5oxnSlyf3bN7G4XpWvY61w0u9hFKZ4uKmy7KEfVRevOdlHqWK+Dc9C5/gy9zmavw2V2rte5aPZdtLLku6hzvc7VLrqOvc6b/ytine9FcXVRu3tRirCLutbrTtBD63ov6qIZUa9zzizc7KKJ76Jl8V3UpY6ke92a3uW6eC/qYheVfQOJ2b9GbwiK1+hFbBdGdDB0JGaNYSs1CzJPDN+wSTIeZ49b/b0ofNV8s3fcmL03e/p/TRHci8JXFxptc7qN9kX1UAT3ook00yg0JeLRZcLE8szswK/R6zmHofncP0Qvk3h5ZiHIp4N2UWZnptGSzfIJfb4RhUbywc1cm8kyw0A9oCG3MefXRmQx5264ZDMklmpedhjyYjOlFuaT+bVRvTrXRe3NPOpG2lyB+hmo93MvWreeM5jrFZiBwJSaW3ZRoc1haGlmRKUadchtep29mVdqBoaQe0iewdGaNUSpufleVJvhV23XhiBVRalhfMZep8085Cues06s1Rbm028jG3NoMFek1l00Zz5SG0TceHZrc+VhWs2Le502p2mtEdn0OoO5CvXCs1uba6DmB+2iVanLzCMwp6VqbuiilagpqMMi8w0Ay5SskAq6qFVTNZv1rKvvovadj0YF5neKWzZrXlEXNavbBXvd3Fy4rqvqouazsXnh771OaPMNsObV5l5XfTSXsQVmYJar+arMSpw3671ukZojmLNi5sz6TClQozD/k7EyjwBZoF792lDJdyQwF6vRzXluLlHrXueKOVMjNKdgNqh1r8Nhjo1mrR5wDubVv4svq09f1JliUJ+ptV+QBIeZAOPlkdSIPnPu7KOHpIdjcajlcR2ehmbzvcNXUKnvHKndMJqDYR/UGF58lkm02mAeDjsb/YdY1FA8tNpgbrU6w/4rUCN4I7BSC6UuMW9KdOvURv8qGfdQqUcF5tfTzU0wS3V/wwW1ND+5e1ejA63u9QiGZOo0XWje2pqhtRrVs/E6qHPmxw+2t3+jkamJVo/SnHkyUWipDvCp43/VYJ7u3Hv8J1qr+9hOdFDPzfd3phl6U6O1egOtWpo/PHgyBfT2Fpglea6+QhJU6jSdmZ/vAPreBMxKPFd3EKpHM7NET7aGEopeXRtl5p0nk7tBRznzamxN9cxHtTam28HTDjwBF6sxNdW6/Fvm2/0P00nr6dNAixepcTXVOCEvHz8IQDwEcmGypoqlPY0F+dkPgByUJmuqWNrTmJBL11odA1qf6FhmzciYkUuHzWpU/RrUAmYdlKrRtSdQE6kOHFP3pLrjllrsQ91/hedsTExqlE21XI21qUp1fg/B3vkWqfF3PqVuWaiHmGbdI/JsPAWlulOW4FQL1AyV2ibXrn3HskJUe/rx/qhF3h/9SnBUPlDbj2+M5I11BBxJT8w04u+fZJ+EkD9gWN4MmLESq6DZPXx8fHx8fHx8fHx8fHx8fPL5Bfrqzbn3nimqAAAAAElFTkSuQmCC",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAEwAAABMCAMAAADwSaEZAAAA3lBMVEX///9Uxfj8/v9YxvgptvYBV5v7/f6B1Pn5/f/4+/1Pw/hhyfjo9/1WxvhGwPcGWp1LwvdKwfdFv/fq+P7y+v7V8v5cx/ioxdwAVplrzPkut/YATpVUxPdckr4CWJ0ASJLc8/0XsPUAUZX+/v/R7/05u/Yrv/920PkwuPYhs/YktPUosvLK3OoBUI4CR37u+P0kntcstfMjot4ASZMBO2gBMFP1+/7Y8f0ku/180vlmy/gBTYnj9f3M7fzH6/zh6/LV4+44r+clpODI1N6gv9mZu9ZelL9gkbtOibgAQIwqVJv8AAAB10lEQVRYw+3XaVPiQBCA4WZiZnM4CYnIIpvNuonXHlwi3vft//9DtvHoHIrFDJZTJW/BF6p4qruBD8CsWVrFSvFUwYJK0hqH3spivp2jHjBZa34/cHJF4Z6NmKTlBqJGGd43ULGMvBUqWfWC5WlqhVrcy9L4XoGG93plR01vr/adCDT9Tuh4L/7h9+Ia7vgBvyFWLlWwoFIqeS98sPmFQoeNdzT21r042Huimct11hvAxlvLriOqO6JlrYeRQ9XC/QWy3sB2IsKKlmcIqllfornGjCbqonovtArLB2hZ73+YqDlG6V5yFmbBsoEa7YivcBmLNEFzWbDtek0pC+PZ3ciyo9+rZYuPJ8qzeTlr4++qmNwiLcpbc3OoTb4jbbr9YPEnK9PkLIzRXG2kHjVJC6kUn2RlWi3yyJp4uobIdiRtqSdpQQouWtRg96wHtvRfkuONP+0X69/aeecGgEtrK23Unq3NTjL8Ka9ZpKF10PH9X+paZnUPWi1zChpa/a1uJ5mKNljrjxBDS10b7PZHo27SMrMUtUXc0YxjhNQ1Gy7M2Mcdp6T99xO/ZX4VzYzNOAtvOLwGYAra8Eeu5O6WK2inl98LXZ1IL1p9I60po9mlGMya9RndAwL/PbOqVh2hAAAAAElFTkSuQmCC",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAABCFBMVEX///9UxfgptvYBV5tTxfj6/f9Yxvj8/v/9/v7+//8AVppWxfhLwvfn9v1hyfhJwfee3fr8/f5Fv/f7/P0HW50ASZIEWpzk9v4otfYAS5Sy5fy35vxGwPdXj7z5+/07fLEtt/Zdx/gXsPYltPUBVZd+0/kjtPYotPRPw/dAgLPR7/wrvPwyufYBUpMBUI8uuPYBSYIAQ3rG6/zG6vwzufYRbKIAPnQBNWAQWYEALlIrvP7G6/sBTosAOmrc8/296PxlyvgBTIj3+fv9+Pdil8EQZZcQX4wAHTsAGzZZzv/u+f7I6/yo4fuN2Pp50fno7/WUt9RTjbo4i7oqcao/c58AP4wAVYcAIUP7SkpYAAADfUlEQVR42u2X61IaQRCFe2FhdgRjFlAxEkUxBqMgxETEeNck5n5P3v9NMiNUWtnMEIo402p/Vf6xoPiqz6G3AYZhGIZhGIZhiCIzwxDgAylhKBLcIwAOH1iZf78F7hES7hembOQLuQNwHqaIlFfOQpDNH01CBI6JpPYKzITZ/L1JyIBL0Csk56VyrGQJeul5EfQSVHMk6iW4X9eRYwzOwN5XCPaL6v4SEc3vI9U9EVHt183eE+z1x4vonqDaL6CbI0kvos8hqvuL72i+owfgO5r3F9/RfEfbuUM5UvUiuSeo9ovv6FvxHKK6v/iOvrN3tBiKnztagANENPKdI+DtrJXJ2YPIQ78y8CQb5gIz2SA/D8LdnkCvMB+EZoJwSnlJGAcJI3vFyques7wj95+8pkafVz1r8wrG9wIB8cdKdkSv4Dq90AweJcysXvYcsV/jm0XKjFS/+mSSZvYcc9eQo8Us/Mcc3XhhmoVsSKhfV83G3xMGr7HTpLC/DD2zer2rO+iXYWvYvJ7WqrkgdNOvpJnZa6u8mtpQH++mX8k0jfMqr1ZTtWfKzFGOyZ4ZvcqpVA1n5soLtwbe0QkvNHPQr0TPlv7WL+2lwTQd9GsgzcLRoNcL9EIzRznizDIfDoxeaOYsRzTTf2Yv7Jk7L/wla+pXcmaYowOk1Qtn5swLSe4Jgxnm6BScl8EM94QDzL1P9izwkqMUKscaeiVnFtQrPuYl4DDVm5fR7M2hBy8p4Wh5w+L1uLr69RROwDkCMveWN81eqfXn24sLsADOERAtLVfLZq/2zPRi0YdZfGFm9pqYKGmzIjgno802TV4rE8rM08zQLNmvFSXm10z3LOnVUGL+zQa9Xu43mz0zQj3TXp3jvb5YOk2lZ8rrVad1SSxNo2faq9tutXpi2sx3mtW+1+7Or/3tduv40sQIbA3t9bqjxfYavXkpvKe52fPqdjvbraZWQrxvjd2d8253v9XQLlfUPPdsfee8026mZ9I6RMR3z+TSz46y0lpohHgzK8Lp97kSNl5BpGdFkGvTpataNHpWhEiZpSdMYv7SXLgw62dJqmc9MyVGsGe2mfl7bkoo0k/zxpl53BpEzaSaWazMZiyU5tbAsRmmOWej8ePbJ4jBGWh2cvbloY2ztc8QgXviEV7jlrgYDwE8ISONjOQA6l99gGEYhmEYhmFuG78B9YuimOp6mGQAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAKcAAACnCAMAAABDyLzeAAAA81BMVEX///9UxfgptvYBV5tTxPj9/v/8/f76/f9Yxvj7/v9XxvhOw/dEv/cASpMBVpmK1/pQw/gEWp3Q7vwDWJz+///u+f7F6/xKwfdeyPgYsPVyocfn9v1iyviGrc5GwPcuuPby+v7R7/yJ1vqu4/s/vfcrvv8nsvKa3PoltPUBRn50z/kBVJZOw/iIr88BUpMCTokDNFcBUI8ko94DS4T1+/0BQnYBPm8lp+MCOWRxocYBLU/h9P0AIUD0+/7q+P4asfYlqOYATJW+6Px41fye3fpcyPiZ2PVuzfhOwvjc5vATm9ycvdeKsNCErc9pnMNmmcIAPYujd3zFAAAEUklEQVR42u3ca1MTMRQG4BM22d1ssdp2tV4BC15WkBZrawVF8X7X//9rTLcrh5mUZHE6exImr6Mjw5dnkryHBGaAkJCQkJCQkJCQkJCQkJAqMqmRHKgjoVYEkEZIOHp3w5p3x7TQPIFu2m/9y15rb54v6m/5UZVrO4OE1CkkdFmLcXOy9QGQM3krZcZk6cZVYmYM93kr4yYlZ+m6Ykqgi0jsTOYEs1uTGUPtUDIToIuI501PLcxssZo5NB9k8hrMAd3ZxKan1qYPqM4mMv2oUBhIq2XaK+TLQKJuutSbriclZ3oykBJfBlL3cg0k0qYnNZrOs5JJffXYS5k5GfnZrNF05kDTvbl6+PM13ZeBxC7PQKKtUK2LHPmme3L1uHQDyYGm+7GaXryFajDdqJAvbyHm+g0pvIUgvIXOuXoMvBlI8sJPtvAWcrbpnjD9uXpYmNyPgeTPDemqN98tdn0gcScqdJl/LpTLGhHNvoW43vSaAtFo0/UfVEsQ163ZurMF+aqa3v2ft1ACW+/Tm5bcZZ+PQVJ+cyaB10/W+TVjWnzj49GKmOKCFcLVfLJhfen1795ZDRME3Gd1mNqmP1dMbt6FkpmshCnhGDe97lsob5wJeQ7bfc74xQZSxWTGrIiJw217Q0GtbyGdaXZmq2JikRQ04+YK6UxmZHJkrgyanw/l5ze9ibOpr2ifLYVqzLxk1quQBGgAikxJ1XQdKtXWM8Z1pt7012XTCZhYJsbNVw8cSM003Q5FptRWM+MNN12Hsoyb3kKqQtc2PzIapg7Vm47MW2s7GcHZ1FrPFVRvOjI31x7vZJwTMfUV1edmxVxDKAkToYwvuXogcwGlZGLrM6yQxkRoAwPJCMW3kMZEaONN1y8lfb3pyEQop9l0hH4wryZCG7h6GKDVP3rTMdj65lcTYSIX5tVEKAETY2cilICJsTD11mcuM0/nKHecWbXe7U0/hTrAlDpTh6br1EwBR1wxzXm48/4IJFAmgW0788G32yBjII2AD7dszLfD4icIWqgAeHRrbdPMHLev3COHCiNUMcfjdhS5AX1zCtWYL8ZFu72AxvjOp4iUakVNzF0F7VVQyiBUZxbF7pwZuQydMyf7+6VTQR04o7Isk86cTA8OFk5HoCLH1iNzOh0OldMpqKigyHw2mxXjU6czUFmNJ2SOJmecJTRyrUyKOTqclk4FrZiRI62PFRSZr2bKWaj1LJXuQHNsfckcjWbTYrh/BunOGV2UqWQeHo4mw905zVnog2eHr0azYr/XiyJ3oZ/eqAoVB51OTx1Md6ExfJpOOp1Oe6nSnfEUS7h3Ei1DOtb6OId7V6KeB9AYnp6BuntGY+EVtOMBVG39iftndAH1oEzeQL1pfe5d6yM7NHcC2usYoj558gNAAFGwTPb8eQmCGCrg+6/bS/IS/6P+/P4KRDuPrffh1wEqqEhiewQ5VFFFjdAzQ0JCQkJCQkJCQkJCvMpfMAOukZpcr2YAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json",
      "data":
          "ewogICJpbWFnZXMiIDogWwogICAgewogICAgICAiaWRpb20iIDogInVuaXZlcnNhbCIsCiAgICAgICJmaWxlbmFtZSIgOiAiTGF1bmNoSW1hZ2UucG5nIiwKICAgICAgInNjYWxlIiA6ICIxeCIKICAgIH0sCiAgICB7CiAgICAgICJpZGlvbSIgOiAidW5pdmVyc2FsIiwKICAgICAgImZpbGVuYW1lIiA6ICJMYXVuY2hJbWFnZUAyeC5wbmciLAogICAgICAic2NhbGUiIDogIjJ4IgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJ1bml2ZXJzYWwiLAogICAgICAiZmlsZW5hbWUiIDogIkxhdW5jaEltYWdlQDN4LnBuZyIsCiAgICAgICJzY2FsZSIgOiAiM3giCiAgICB9CiAgXSwKICAiaW5mbyIgOiB7CiAgICAidmVyc2lvbiIgOiAxLAogICAgImF1dGhvciIgOiAieGNvZGUiCiAgfQp9Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@2x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@3x.png",
      "data":
          "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=",
      "type": "binary",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md",
      "data":
          "IyBMYXVuY2ggU2NyZWVuIEFzc2V0cwoKWW91IGNhbiBjdXN0b21pemUgdGhlIGxhdW5jaCBzY3JlZW4gd2l0aCB5b3VyIG93biBkZXNpcmVkIGFzc2V0cyBieSByZXBsYWNpbmcgdGhlIGltYWdlIGZpbGVzIGluIHRoaXMgZGlyZWN0b3J5LgoKWW91IGNhbiBhbHNvIGRvIGl0IGJ5IG9wZW5pbmcgeW91ciBGbHV0dGVyIHByb2plY3QncyBYY29kZSBwcm9qZWN0IHdpdGggYG9wZW4gaW9zL1J1bm5lci54Y3dvcmtzcGFjZWAsIHNlbGVjdGluZyBgUnVubmVyL0Fzc2V0cy54Y2Fzc2V0c2AgaW4gdGhlIFByb2plY3QgTmF2aWdhdG9yIGFuZCBkcm9wcGluZyBpbiB0aGUgZGVzaXJlZCBpbWFnZXMu",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Base.lproj/LaunchScreen.storyboard",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+Cjxkb2N1bWVudCB0eXBlPSJjb20uYXBwbGUuSW50ZXJmYWNlQnVpbGRlcjMuQ29jb2FUb3VjaC5TdG9yeWJvYXJkLlhJQiIgdmVyc2lvbj0iMy4wIiB0b29sc1ZlcnNpb249IjEyMTIxIiBzeXN0ZW1WZXJzaW9uPSIxNkcyOSIgdGFyZ2V0UnVudGltZT0iaU9TLkNvY29hVG91Y2giIHByb3BlcnR5QWNjZXNzQ29udHJvbD0ibm9uZSIgdXNlQXV0b2xheW91dD0iWUVTIiBsYXVuY2hTY3JlZW49IllFUyIgY29sb3JNYXRjaGVkPSJZRVMiIGluaXRpYWxWaWV3Q29udHJvbGxlcj0iMDFKLWxwLW9WTSI+CiAgICA8ZGVwZW5kZW5jaWVzPgogICAgICAgIDxkZXBsb3ltZW50IGlkZW50aWZpZXI9ImlPUyIvPgogICAgICAgIDxwbHVnSW4gaWRlbnRpZmllcj0iY29tLmFwcGxlLkludGVyZmFjZUJ1aWxkZXIuSUJDb2NvYVRvdWNoUGx1Z2luIiB2ZXJzaW9uPSIxMjA4OSIvPgogICAgPC9kZXBlbmRlbmNpZXM+CiAgICA8c2NlbmVzPgogICAgICAgIDwhLS1WaWV3IENvbnRyb2xsZXItLT4KICAgICAgICA8c2NlbmUgc2NlbmVJRD0iRUhmLUlXLUEyRSI+CiAgICAgICAgICAgIDxvYmplY3RzPgogICAgICAgICAgICAgICAgPHZpZXdDb250cm9sbGVyIGlkPSIwMUotbHAtb1ZNIiBzY2VuZU1lbWJlcklEPSJ2aWV3Q29udHJvbGxlciI+CiAgICAgICAgICAgICAgICAgICAgPGxheW91dEd1aWRlcz4KICAgICAgICAgICAgICAgICAgICAgICAgPHZpZXdDb250cm9sbGVyTGF5b3V0R3VpZGUgdHlwZT0idG9wIiBpZD0iWWRnLWZELXlReSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8dmlld0NvbnRyb2xsZXJMYXlvdXRHdWlkZSB0eXBlPSJib3R0b20iIGlkPSJ4YmMtMmstYzhaIi8+CiAgICAgICAgICAgICAgICAgICAgPC9sYXlvdXRHdWlkZXM+CiAgICAgICAgICAgICAgICAgICAgPHZpZXcga2V5PSJ2aWV3IiBjb250ZW50TW9kZT0ic2NhbGVUb0ZpbGwiIGlkPSJaZTUtNmItMnQzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGF1dG9yZXNpemluZ01hc2sga2V5PSJhdXRvcmVzaXppbmdNYXNrIiB3aWR0aFNpemFibGU9IllFUyIgaGVpZ2h0U2l6YWJsZT0iWUVTIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdWJ2aWV3cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWFnZVZpZXcgb3BhcXVlPSJOTyIgY2xpcHNTdWJ2aWV3cz0iWUVTIiBtdWx0aXBsZVRvdWNoRW5hYmxlZD0iWUVTIiBjb250ZW50TW9kZT0iY2VudGVyIiBpbWFnZT0iTGF1bmNoSW1hZ2UiIHRyYW5zbGF0ZXNBdXRvcmVzaXppbmdNYXNrSW50b0NvbnN0cmFpbnRzPSJOTyIgaWQ9IllSTy1rMC1FeTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pbWFnZVZpZXc+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Vidmlld3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xvciBrZXk9ImJhY2tncm91bmRDb2xvciIgcmVkPSIxIiBncmVlbj0iMSIgYmx1ZT0iMSIgYWxwaGE9IjEiIGNvbG9yU3BhY2U9ImN1c3RvbSIgY3VzdG9tQ29sb3JTcGFjZT0ic1JHQiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8Y29uc3RyYWludHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29uc3RyYWludCBmaXJzdEl0ZW09IllSTy1rMC1FeTQiIGZpcnN0QXR0cmlidXRlPSJjZW50ZXJYIiBzZWNvbmRJdGVtPSJaZTUtNmItMnQzIiBzZWNvbmRBdHRyaWJ1dGU9ImNlbnRlclgiIGlkPSIxYTItNnMtdlRDIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29uc3RyYWludCBmaXJzdEl0ZW09IllSTy1rMC1FeTQiIGZpcnN0QXR0cmlidXRlPSJjZW50ZXJZIiBzZWNvbmRJdGVtPSJaZTUtNmItMnQzIiBzZWNvbmRBdHRyaWJ1dGU9ImNlbnRlclkiIGlkPSI0WDItSEItUjdhIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvY29uc3RyYWludHM+CiAgICAgICAgICAgICAgICAgICAgPC92aWV3PgogICAgICAgICAgICAgICAgPC92aWV3Q29udHJvbGxlcj4KICAgICAgICAgICAgICAgIDxwbGFjZWhvbGRlciBwbGFjZWhvbGRlcklkZW50aWZpZXI9IklCRmlyc3RSZXNwb25kZXIiIGlkPSJpWWotS3EtRWExIiB1c2VyTGFiZWw9IkZpcnN0IFJlc3BvbmRlciIgc2NlbmVNZW1iZXJJRD0iZmlyc3RSZXNwb25kZXIiLz4KICAgICAgICAgICAgPC9vYmplY3RzPgogICAgICAgICAgICA8cG9pbnQga2V5PSJjYW52YXNMb2NhdGlvbiIgeD0iNTMiIHk9IjM3NSIvPgogICAgICAgIDwvc2NlbmU+CiAgICA8L3NjZW5lcz4KICAgIDxyZXNvdXJjZXM+CiAgICAgICAgPGltYWdlIG5hbWU9IkxhdW5jaEltYWdlIiB3aWR0aD0iMTY4IiBoZWlnaHQ9IjE4NSIvPgogICAgPC9yZXNvdXJjZXM+CjwvZG9jdW1lbnQ+Cg==",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Base.lproj/Main.storyboard",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+Cjxkb2N1bWVudCB0eXBlPSJjb20uYXBwbGUuSW50ZXJmYWNlQnVpbGRlcjMuQ29jb2FUb3VjaC5TdG9yeWJvYXJkLlhJQiIgdmVyc2lvbj0iMy4wIiB0b29sc1ZlcnNpb249IjEwMTE3IiBzeXN0ZW1WZXJzaW9uPSIxNUYzNCIgdGFyZ2V0UnVudGltZT0iaU9TLkNvY29hVG91Y2giIHByb3BlcnR5QWNjZXNzQ29udHJvbD0ibm9uZSIgdXNlQXV0b2xheW91dD0iWUVTIiB1c2VUcmFpdENvbGxlY3Rpb25zPSJZRVMiIGluaXRpYWxWaWV3Q29udHJvbGxlcj0iQllaLTM4LXQwciI+CiAgICA8ZGVwZW5kZW5jaWVzPgogICAgICAgIDxkZXBsb3ltZW50IGlkZW50aWZpZXI9ImlPUyIvPgogICAgICAgIDxwbHVnSW4gaWRlbnRpZmllcj0iY29tLmFwcGxlLkludGVyZmFjZUJ1aWxkZXIuSUJDb2NvYVRvdWNoUGx1Z2luIiB2ZXJzaW9uPSIxMDA4NSIvPgogICAgPC9kZXBlbmRlbmNpZXM+CiAgICA8c2NlbmVzPgogICAgICAgIDwhLS1GbHV0dGVyIFZpZXcgQ29udHJvbGxlci0tPgogICAgICAgIDxzY2VuZSBzY2VuZUlEPSJ0bmUtUVQtaWZ1Ij4KICAgICAgICAgICAgPG9iamVjdHM+CiAgICAgICAgICAgICAgICA8dmlld0NvbnRyb2xsZXIgaWQ9IkJZWi0zOC10MHIiIGN1c3RvbUNsYXNzPSJGbHV0dGVyVmlld0NvbnRyb2xsZXIiIHNjZW5lTWVtYmVySUQ9InZpZXdDb250cm9sbGVyIj4KICAgICAgICAgICAgICAgICAgICA8bGF5b3V0R3VpZGVzPgogICAgICAgICAgICAgICAgICAgICAgICA8dmlld0NvbnRyb2xsZXJMYXlvdXRHdWlkZSB0eXBlPSJ0b3AiIGlkPSJ5M2MtanktYURKIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2aWV3Q29udHJvbGxlckxheW91dEd1aWRlIHR5cGU9ImJvdHRvbSIgaWQ9IndmeS1kYi1ldUUiLz4KICAgICAgICAgICAgICAgICAgICA8L2xheW91dEd1aWRlcz4KICAgICAgICAgICAgICAgICAgICA8dmlldyBrZXk9InZpZXciIGNvbnRlbnRNb2RlPSJzY2FsZVRvRmlsbCIgaWQ9IjhiQy1YZi12ZEMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCBrZXk9ImZyYW1lIiB4PSIwLjAiIHk9IjAuMCIgd2lkdGg9IjYwMCIgaGVpZ2h0PSI2MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGF1dG9yZXNpemluZ01hc2sga2V5PSJhdXRvcmVzaXppbmdNYXNrIiB3aWR0aFNpemFibGU9IllFUyIgaGVpZ2h0U2l6YWJsZT0iWUVTIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xvciBrZXk9ImJhY2tncm91bmRDb2xvciIgd2hpdGU9IjEiIGFscGhhPSIxIiBjb2xvclNwYWNlPSJjdXN0b20iIGN1c3RvbUNvbG9yU3BhY2U9ImNhbGlicmF0ZWRXaGl0ZSIvPgogICAgICAgICAgICAgICAgICAgIDwvdmlldz4KICAgICAgICAgICAgICAgIDwvdmlld0NvbnRyb2xsZXI+CiAgICAgICAgICAgICAgICA8cGxhY2Vob2xkZXIgcGxhY2Vob2xkZXJJZGVudGlmaWVyPSJJQkZpcnN0UmVzcG9uZGVyIiBpZD0iZGt4LXowLW56ciIgc2NlbmVNZW1iZXJJRD0iZmlyc3RSZXNwb25kZXIiLz4KICAgICAgICAgICAgPC9vYmplY3RzPgogICAgICAgIDwvc2NlbmU+CiAgICA8L3NjZW5lcz4KPC9kb2N1bWVudD4K",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/Runner/Info.plist",
      "data":
          "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+Q0ZCdW5kbGVEZXZlbG9wbWVudFJlZ2lvbjwva2V5PgoJPHN0cmluZz4kKERFVkVMT1BNRU5UX0xBTkdVQUdFKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZURpc3BsYXlOYW1lPC9rZXk+Cgk8c3RyaW5nPnt7cHJvamVjdF9uYW1lLnRpdGxlQ2FzZSgpfX08L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVFeGVjdXRhYmxlPC9rZXk+Cgk8c3RyaW5nPiQoRVhFQ1VUQUJMRV9OQU1FKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZUlkZW50aWZpZXI8L2tleT4KCTxzdHJpbmc+JChQUk9EVUNUX0JVTkRMRV9JREVOVElGSUVSKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvbjwva2V5PgoJPHN0cmluZz42LjA8L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVOYW1lPC9rZXk+Cgk8c3RyaW5nPnt7cHJvamVjdF9uYW1lLnNuYWtlQ2FzZSgpfX08L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVQYWNrYWdlVHlwZTwva2V5PgoJPHN0cmluZz5BUFBMPC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nPC9rZXk+Cgk8c3RyaW5nPiQoRkxVVFRFUl9CVUlMRF9OQU1FKTwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZVNpZ25hdHVyZTwva2V5PgoJPHN0cmluZz4/Pz8/PC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlVmVyc2lvbjwva2V5PgoJPHN0cmluZz4kKEZMVVRURVJfQlVJTERfTlVNQkVSKTwvc3RyaW5nPgoJPGtleT5MU1JlcXVpcmVzSVBob25lT1M8L2tleT4KCTx0cnVlLz4KCTxrZXk+VUlMYXVuY2hTdG9yeWJvYXJkTmFtZTwva2V5PgoJPHN0cmluZz5MYXVuY2hTY3JlZW48L3N0cmluZz4KCTxrZXk+VUlNYWluU3Rvcnlib2FyZEZpbGU8L2tleT4KCTxzdHJpbmc+TWFpbjwvc3RyaW5nPgoJPGtleT5VSVN1cHBvcnRlZEludGVyZmFjZU9yaWVudGF0aW9uczwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+VUlJbnRlcmZhY2VPcmllbnRhdGlvblBvcnRyYWl0PC9zdHJpbmc+CgkJPHN0cmluZz5VSUludGVyZmFjZU9yaWVudGF0aW9uTGFuZHNjYXBlTGVmdDwvc3RyaW5nPgoJCTxzdHJpbmc+VUlJbnRlcmZhY2VPcmllbnRhdGlvbkxhbmRzY2FwZVJpZ2h0PC9zdHJpbmc+Cgk8L2FycmF5PgoJPGtleT5VSVN1cHBvcnRlZEludGVyZmFjZU9yaWVudGF0aW9uc35pcGFkPC9rZXk+Cgk8YXJyYXk+CgkJPHN0cmluZz5VSUludGVyZmFjZU9yaWVudGF0aW9uUG9ydHJhaXQ8L3N0cmluZz4KCQk8c3RyaW5nPlVJSW50ZXJmYWNlT3JpZW50YXRpb25Qb3J0cmFpdFVwc2lkZURvd248L3N0cmluZz4KCQk8c3RyaW5nPlVJSW50ZXJmYWNlT3JpZW50YXRpb25MYW5kc2NhcGVMZWZ0PC9zdHJpbmc+CgkJPHN0cmluZz5VSUludGVyZmFjZU9yaWVudGF0aW9uTGFuZHNjYXBlUmlnaHQ8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PkNBRGlzYWJsZU1pbmltdW1GcmFtZUR1cmF0aW9uT25QaG9uZTwva2V5PgoJPHRydWUvPgoJPGtleT5VSUFwcGxpY2F0aW9uU3VwcG9ydHNJbmRpcmVjdElucHV0RXZlbnRzPC9rZXk+Cgk8dHJ1ZS8+CjwvZGljdD4KPC9wbGlzdD4K",
      "type": "text",
    },
    {
      "path":
          "{{project_name.snakeCase()}}/ios/Runner/Runner-Bridging-Header.h",
      "data": "I2ltcG9ydCAiR2VuZXJhdGVkUGx1Z2luUmVnaXN0cmFudC5oIgo=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/ios/RunnerTests/RunnerTests.swift",
      "data":
          "aW1wb3J0IEZsdXR0ZXIKaW1wb3J0IFVJS2l0CmltcG9ydCBYQ1Rlc3QKCmNsYXNzIFJ1bm5lclRlc3RzOiBYQ1Rlc3RDYXNlIHsKCiAgZnVuYyB0ZXN0RXhhbXBsZSgpIHsKICAgIC8vIElmIHlvdSBhZGQgY29kZSB0byB0aGUgUnVubmVyIGFwcGxpY2F0aW9uLCBjb25zaWRlciBhZGRpbmcgdGVzdHMgaGVyZS4KICAgIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdXNpbmcgWENUZXN0LgogIH0KCn0K",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/README.md",
      "data":
          "IyB7e3Byb2plY3RfbmFtZX19CgpkZXNjcmlwdGlvbjogQSBGbHV0dGVyIHByb2plY3Qgd2FzIGdlbmVyYXRlZCBieSBCdW5ueSBDTEkuCgojIyBQcm9qZWN0IENvbmZpZ3VyYXRpb24KCiMjIyBCYXNpYyBJbmZvCgotIFByb2plY3QgTmFtZToge3twcm9qZWN0X25hbWV9fQotIE9yZ2FuaXphdGlvbjoge3tidW5kbGVfaWRlbnRpZmllcn19CgojIyMgQXJjaGl0ZWN0dXJlCgpTZWxlY3RlZCBBcmNoaXRlY3R1cmU6IHt7YXJjaGl0ZWN0dXJlfX0KCkFyY2hpdGVjdHVyZSBEZXRhaWxzOgp7e2FyY2hpdGVjdHVyZURldGFpbHN9fQoKIyMjIFN0YXRlIE1hbmFnZW1lbnQKClNlbGVjdGVkIFN0YXRlIE1hbmFnZW1lbnQ6IHt7c3RhdGVfbWFuYWdlbWVudH19CgpTdGF0ZSBNYW5hZ2VtZW50IERldGFpbHM6Cnt7c3RhdGVNYW5hZ2VtZW50RGV0YWlsc319CgojIyMgU2VsZWN0ZWQgRmVhdHVyZXMKCkZlYXR1cmVzIGluY2x1ZGVkIGluIHRoaXMgcHJvamVjdDoKe3sjZmVhdHVyZXN9fQoKLSB7ey59fQogIHt7L2ZlYXR1cmVzfX0KCiMjIyBTZWxlY3RlZCBNb2R1bGVzCgpNb2R1bGVzIGluY2x1ZGVkIGluIHRoaXMgcHJvamVjdDoKe3sjbW9kdWxlc319CgotIHt7Ln19CiAge3svbW9kdWxlc319CgojIyBQcm9qZWN0IFN0cnVjdHVyZQoKYGBgCmxpYi8K4pSc4pSA4pSAIGNvcmUvCuKUgiAgIOKUnOKUgOKUgCBjb25maWcvCuKUgiAgIOKUnOKUgOKUgCB0aGVtZS8K4pSCICAg4pSU4pSA4pSAIHV0aWxzLwrilJzilIDilIAgZmVhdHVyZXMvCnt7I2ZlYXR1cmVzfX0K4pSCICAg4pSc4pSA4pSAIHt7Ln19Lwp7ey9mZWF0dXJlc319CuKUlOKUgOKUgCBtb2R1bGVzLwp7eyNtb2R1bGVzfX0KICAgIOKUnOKUgOKUgCB7ey59fS8Ke3svbW9kdWxlc319CmBgYAoKIyMgR2V0dGluZyBTdGFydGVkCgoxLiBDbG9uZSB0aGUgcmVwb3NpdG9yeQoyLiBJbnN0YWxsIGRlcGVuZGVuY2llczoKICAgYGBgYmFzaAogICBmbHV0dGVyIHB1YiBnZXQKICAgYGBgCjMuIFJ1biB0aGUgZGV2ZWxvcG1lbnQgc2VydmVyOgogICBgYGBiYXNoCiAgIGZsdXR0ZXIgcnVuCiAgIGBgYAoKIyMgRGV2ZWxvcG1lbnQgR3VpZGVsaW5lcwoKIyMjIENvZGUgU3R5bGUKCi0gRm9sbG93IEZsdXR0ZXIncyBvZmZpY2lhbCBzdHlsZSBndWlkZQotIFVzZSBtZWFuaW5nZnVsIHZhcmlhYmxlIGFuZCBmdW5jdGlvbiBuYW1lcwotIFdyaXRlIGNvbW1lbnRzIGZvciBjb21wbGV4IGxvZ2ljCi0gS2VlcCBmaWxlcyBhbmQgY2xhc3NlcyBmb2N1c2VkIGFuZCBzbWFsbAoKIyMjIEFyY2hpdGVjdHVyZSBHdWlkZWxpbmVzCgotIEZvbGxvdyB0aGUge3thcmNoaXRlY3R1cmV9fSBwYXR0ZXJuCi0gTWFpbnRhaW4gc2VwYXJhdGlvbiBvZiBjb25jZXJucwotIFdyaXRlIHVuaXQgdGVzdHMgZm9yIGJ1c2luZXNzIGxvZ2ljCi0gRG9jdW1lbnQgY29tcGxleCBpbXBsZW1lbnRhdGlvbnMKCiMjIyBTdGF0ZSBNYW5hZ2VtZW50CgotIFVzZSB7e3N0YXRlX21hbmFnZW1lbnR9fSBmb3Igc3RhdGUgbWFuYWdlbWVudAotIEZvbGxvdyBiZXN0IHByYWN0aWNlcyBmb3IgY2hvc2VuIHNvbHV0aW9uCi0gTWFpbnRhaW4gY2xlYXIgc3RhdGUgdXBkYXRlIHBhdHRlcm5zCi0gRG9jdW1lbnQgc3RhdGUgZmxvdyBmb3IgY29tcGxleCBmZWF0dXJlcwoKIyMgVGVzdGluZwoKYGBgYmFzaAojIFJ1biBhbGwgdGVzdHMKZmx1dHRlciB0ZXN0CgojIFJ1biB0ZXN0cyB3aXRoIGNvdmVyYWdlCmZsdXR0ZXIgdGVzdCAtLWNvdmVyYWdlCmBgYAoKIyMgQnVpbGRpbmcgZm9yIFByb2R1Y3Rpb24KCmBgYGJhc2gKIyBCdWlsZCBBUEsKZmx1dHRlciBidWlsZCBhcGsKCiMgQnVpbGQgaU9TCmZsdXR0ZXIgYnVpbGQgaW9zCmBgYAoKIyMgTGljZW5zZQoKVGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAtIHNlZSB0aGUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLgo=",
      "type": "text",
    },
    {
      "path": "{{project_name.snakeCase()}}/test/widget_test.dart",
      "data":
          "Ly8gVGhpcyBpcyBhIGJhc2ljIEZsdXR0ZXIgd2lkZ2V0IHRlc3QuCi8vCi8vIFRvIHBlcmZvcm0gYW4gaW50ZXJhY3Rpb24gd2l0aCBhIHdpZGdldCBpbiB5b3VyIHRlc3QsIHVzZSB0aGUgV2lkZ2V0VGVzdGVyCi8vIHV0aWxpdHkgaW4gdGhlIGZsdXR0ZXJfdGVzdCBwYWNrYWdlLiBGb3IgZXhhbXBsZSwgeW91IGNhbiBzZW5kIHRhcCBhbmQgc2Nyb2xsCi8vIGdlc3R1cmVzLiBZb3UgY2FuIGFsc28gdXNlIFdpZGdldFRlc3RlciB0byBmaW5kIGNoaWxkIHdpZGdldHMgaW4gdGhlIHdpZGdldAovLyB0cmVlLCByZWFkIHRleHQsIGFuZCB2ZXJpZnkgdGhhdCB0aGUgdmFsdWVzIG9mIHdpZGdldCBwcm9wZXJ0aWVzIGFyZSBjb3JyZWN0LgoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fS9hcHAvYXBwLmRhcnQnOwoKdm9pZCBtYWluKCkgewogIHRlc3RXaWRnZXRzKCdDb3VudGVyIGluY3JlbWVudHMgc21va2UgdGVzdCcsIChXaWRnZXRUZXN0ZXIgdGVzdGVyKSBhc3luYyB7CiAgICAvLyBCdWlsZCBvdXIgYXBwIGFuZCB0cmlnZ2VyIGEgZnJhbWUuCiAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChjb25zdCBBcHAoKSk7CgogICAgLy8gVmVyaWZ5IHRoYXQgb3VyIGNvdW50ZXIgc3RhcnRzIGF0IDAuCiAgICBleHBlY3QoZmluZC50ZXh0KCcwJyksIGZpbmRzT25lV2lkZ2V0KTsKICAgIGV4cGVjdChmaW5kLnRleHQoJzEnKSwgZmluZHNOb3RoaW5nKTsKCiAgICAvLyBUYXAgdGhlICcrJyBpY29uIGFuZCB0cmlnZ2VyIGEgZnJhbWUuCiAgICBhd2FpdCB0ZXN0ZXIudGFwKGZpbmQuYnlJY29uKEljb25zLmFkZCkpOwogICAgYXdhaXQgdGVzdGVyLnB1bXAoKTsKCiAgICAvLyBWZXJpZnkgdGhhdCBvdXIgY291bnRlciBoYXMgaW5jcmVtZW50ZWQuCiAgICBleHBlY3QoZmluZC50ZXh0KCcwJyksIGZpbmRzTm90aGluZyk7CiAgICBleHBlY3QoZmluZC50ZXh0KCcxJyksIGZpbmRzT25lV2lkZ2V0KTsKICB9KTsKfQo=",
      "type": "text",
    },
  ],
  "hooks": [
    {
      "path": "lib/app_bunny_screen_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/app_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/architecture_handler.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCmltcG9ydCAndXRpbHMuZGFydCc7Cgp2b2lkIGNyZWF0ZUFyY2hpdGVjdHVyZVN0cnVjdHVyZSgKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwgU3RyaW5nIGFyY2hpdGVjdHVyZSkgewogIExpc3Q8U3RyaW5nPiBkaXJlY3RvcmllcyA9IFtdOwoKICBzd2l0Y2ggKGFyY2hpdGVjdHVyZSkgewogICAgY2FzZSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvZXJyb3InLAogICAgICAgICdsaWIvY29yZS91dGlscycsCiAgICAgICAgJ2xpYi9pbmZyYXN0cnVjdHVyZS9pbmplY3RvcicsCiAgICAgICAgJ2xpYi9pbmZyYXN0cnVjdHVyZS9uYXZpZ2F0aW9uJywKICAgICAgXTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVlZNJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvc2VydmljZXMnLAogICAgICAgICdsaWIvY29yZS91dGlscycsCiAgICAgICAgJ2xpYi9zaGFyZWQnLAogICAgICAgICdsaWIvc2hhcmVkL3dpZGdldHMnLAogICAgICAgICdsaWIvc2hhcmVkL3V0aWxzJywKICAgICAgXTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVkMnOgogICAgICBkaXJlY3RvcmllcyA9IFsKICAgICAgICAnbGliL2NvcmUnLAogICAgICAgICdsaWIvY29yZS9zZXJ2aWNlcycsCiAgICAgICAgJ2xpYi9jb3JlL3V0aWxzJywKICAgICAgICAnbGliL3NoYXJlZCcsCiAgICAgICAgJ2xpYi9zaGFyZWQvd2lkZ2V0cycsCiAgICAgICAgJ2xpYi9zaGFyZWQvdXRpbHMnLAogICAgICBdOwogICAgICBicmVhazsKICAgIGNhc2UgJ0ZlYXR1cmUtRHJpdmVuJzoKICAgICAgZGlyZWN0b3JpZXMgPSBbCiAgICAgICAgJ2xpYi9jb3JlJywKICAgICAgICAnbGliL2NvcmUvdXRpbHMnLAogICAgICAgICdsaWIvY29yZS9zZXJ2aWNlcycsCiAgICAgICAgJ2xpYi9zaGFyZWQvd2lkZ2V0cycsCiAgICAgIF07CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgY29udGV4dC5sb2dnZXIud2FybignVW5rbm93biBhcmNoaXRlY3R1cmU6ICRhcmNoaXRlY3R1cmUnKTsKICAgICAgcmV0dXJuOwogIH0KCiAgZm9yIChmaW5hbCBkaXIgaW4gZGlyZWN0b3JpZXMpIHsKICAgIGZpbmFsIGRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lLyRkaXInKTsKICAgIGlmICghZGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgICBkaXJlY3RvcnkuY3JlYXRlU3luYyhyZWN1cnNpdmU6IHRydWUpOwogICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIGFyY2hpdGVjdHVyZSBkaXJlY3Rvcnk6ICRkaXInKTsKICAgIH0KICB9CgogIC8vIENyZWF0ZSBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgZmlsZXMKICBjcmVhdGVBcmNoaXRlY3R1cmVGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSwgYXJjaGl0ZWN0dXJlKTsKfQoKdm9pZCBjcmVhdGVBcmNoaXRlY3R1cmVGaWxlcygKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwgU3RyaW5nIGFyY2hpdGVjdHVyZSkgewogIHN3aXRjaCAoYXJjaGl0ZWN0dXJlKSB7CiAgICBjYXNlICdDbGVhbiBBcmNoaXRlY3R1cmUnOgogICAgICBjcmVhdGVDbGVhbkFyY2hpdGVjdHVyZUZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVlZNJzoKICAgICAgY3JlYXRlTVZWTUFyY2hpdGVjdHVyZUZpbGVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdNVkMnOgogICAgICBjcmVhdGVNVkNBcmNoaXRlY3R1cmVGaWxlcyhjb250ZXh0LCBwcm9qZWN0TmFtZSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnRmVhdHVyZS1Ecml2ZW4nOgogICAgICBjcmVhdGVGZWF0dXJlRHJpdmVuQXJjaGl0ZWN0dXJlRmlsZXMoY29udGV4dCwgcHJvamVjdE5hbWUpOwogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAvLyBObyBzcGVjaWZpYyBmaWxlcyB0byBjcmVhdGUKICB9Cn0KCnZvaWQgY3JlYXRlQ2xlYW5BcmNoaXRlY3R1cmVGaWxlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBDb3JlIGVycm9yIGhhbmRsaW5nCiAgY3JlYXRlRmlsZSgKICAgICAgJyRwcm9qZWN0TmFtZS9saWIvY29yZS9lcnJvci9mYWlsdXJlcy5kYXJ0JywKICAgICAgJycnCi8vIEZhaWx1cmUgYmFzZSBjbGFzcyBhbmQgaW1wbGVtZW50YXRpb25zCi8vIEdlbmVyYXRlZCBieSBGbHV0dGVyIEJ1bm55IENsafCfkLAKCmFic3RyYWN0IGNsYXNzIEZhaWx1cmUgewogIGZpbmFsIFN0cmluZyBtZXNzYWdlOwogIAogIGNvbnN0IEZhaWx1cmUoe3JlcXVpcmVkIHRoaXMubWVzc2FnZX0pOwp9CgpjbGFzcyBTZXJ2ZXJGYWlsdXJlIGV4dGVuZHMgRmFpbHVyZSB7CiAgY29uc3QgU2VydmVyRmFpbHVyZSh7cmVxdWlyZWQgU3RyaW5nIG1lc3NhZ2V9KSA6IHN1cGVyKG1lc3NhZ2U6IG1lc3NhZ2UpOwp9CgpjbGFzcyBDYWNoZUZhaWx1cmUgZXh0ZW5kcyBGYWlsdXJlIHsKICBjb25zdCBDYWNoZUZhaWx1cmUoe3JlcXVpcmVkIFN0cmluZyBtZXNzYWdlfSkgOiBzdXBlcihtZXNzYWdlOiBtZXNzYWdlKTsKfQoKY2xhc3MgTmV0d29ya0ZhaWx1cmUgZXh0ZW5kcyBGYWlsdXJlIHsKICBjb25zdCBOZXR3b3JrRmFpbHVyZSh7cmVxdWlyZWQgU3RyaW5nIG1lc3NhZ2V9KSA6IHN1cGVyKG1lc3NhZ2U6IG1lc3NhZ2UpOwp9CicnJywKICAgICAgY29udGV4dCk7CgogIC8vIERJIHNldHVwIGZpbGUKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9pbmZyYXN0cnVjdHVyZS9pbmplY3Rvci9pbmplY3Rvci5kYXJ0JywKICAgICAgJycnCi8vIERlcGVuZGVuY3kgaW5qZWN0aW9uIHNldHVwCi8vIEdlbmVyYXRlZCBieSBGbHV0dGVyIEJ1bm55IENsafCfkLAKCi8vIFRoaXMgZmlsZSB3aWxsIGJlIHVzZWQgdG8gc2V0dXAgZGVwZW5kZW5jeSBpbmplY3Rpb24KLy8gd2l0aCBhIHBhY2thZ2UgbGlrZSBnZXRfaXQsIGluamVjdGFibGUsIGV0Yy4KCnZvaWQgc2V0dXBJbmplY3RvcigpIHsKICAvLyBUT0RPOiBSZWdpc3RlciBkZXBlbmRlbmNpZXMKfQonJycsCiAgICAgIGNvbnRleHQpOwp9Cgp2b2lkIGNyZWF0ZU1WVk1BcmNoaXRlY3R1cmVGaWxlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBCYXNlIHZpZXcgbW9kZWwKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL2Jhc2Vfdmlld19tb2RlbC5kYXJ0JywKICAgICAgJycnCi8vIEJhc2UgdmlldyBtb2RlbAovLyBHZW5lcmF0ZWQgYnkgRmx1dHRlciBCdW5ueSBDbGnwn5CwCgphYnN0cmFjdCBjbGFzcyBCYXNlVmlld01vZGVsIHsKICAvLyBCYXNlIHZpZXcgbW9kZWwgZnVuY3Rpb25hbGl0eQogIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGluY2x1ZGUgY29tbW9uIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMKICAvLyBmb3IgYWxsIHZpZXcgbW9kZWxzIGluIHRoZSBhcHBsaWNhdGlvbgogIAogIGJvb2wgaXNMb2FkaW5nID0gZmFsc2U7CiAgU3RyaW5nPyBlcnJvck1lc3NhZ2U7CiAgCiAgdm9pZCBzZXRMb2FkaW5nKGJvb2wgbG9hZGluZykgewogICAgaXNMb2FkaW5nID0gbG9hZGluZzsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9CiAgCiAgdm9pZCBzZXRFcnJvcihTdHJpbmc/IGVycm9yKSB7CiAgICBlcnJvck1lc3NhZ2UgPSBlcnJvcjsKICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgLSBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHN0YXRlIG1hbmFnZW1lbnQKICB9Cn0KJycnLAogICAgICBjb250ZXh0KTsKfQoKdm9pZCBjcmVhdGVNVkNBcmNoaXRlY3R1cmVGaWxlcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBCYXNlIGNvbnRyb2xsZXIKICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL2Jhc2VfY29udHJvbGxlci5kYXJ0JywKICAgICAgJycnCi8vIEJhc2UgY29udHJvbGxlcgovLyBHZW5lcmF0ZWQgYnkgRmx1dHRlciBCdW5ueSBDbGnwn5CwCgphYnN0cmFjdCBjbGFzcyBCYXNlQ29udHJvbGxlciB7CiAgLy8gQmFzZSBjb250cm9sbGVyIGZ1bmN0aW9uYWxpdHkKICAvLyBUaGlzIHdvdWxkIHR5cGljYWxseSBpbmNsdWRlIGNvbW1vbiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzCiAgLy8gZm9yIGFsbCBjb250cm9sbGVycyBpbiB0aGUgYXBwbGljYXRpb24KICAKICBib29sIGlzTG9hZGluZyA9IGZhbHNlOwogIFN0cmluZz8gZXJyb3JNZXNzYWdlOwogIAogIHZvaWQgc2V0TG9hZGluZyhib29sIGxvYWRpbmcpIHsKICAgIGlzTG9hZGluZyA9IGxvYWRpbmc7CiAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIC0gaW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiBzdGF0ZSBtYW5hZ2VtZW50CiAgfQogIAogIHZvaWQgc2V0RXJyb3IoU3RyaW5nPyBlcnJvcikgewogICAgZXJyb3JNZXNzYWdlID0gZXJyb3I7CiAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIC0gaW1wbGVtZW50YXRpb24gZGVwZW5kcyBvbiBzdGF0ZSBtYW5hZ2VtZW50CiAgfQp9CicnJywKICAgICAgY29udGV4dCk7Cn0KCnZvaWQgY3JlYXRlRmVhdHVyZURyaXZlbkFyY2hpdGVjdHVyZUZpbGVzKAogICAgSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgLy8gQXBwIG5hdmlnYXRpb24KICBjcmVhdGVGaWxlKAogICAgICAnJHByb2plY3ROYW1lL2xpYi9jb3JlL25hdmlnYXRpb24vYXBwX3JvdXRlci5kYXJ0JywKICAgICAgJycnCi8vIEFwcCByb3V0ZXIKLy8gR2VuZXJhdGVkIGJ5IEZsdXR0ZXIgQnVubnkgQ2xp8J+QsAoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgpjbGFzcyBBcHBSb3V0ZXIgewogIHN0YXRpYyBSb3V0ZTxkeW5hbWljPiBnZW5lcmF0ZVJvdXRlKFJvdXRlU2V0dGluZ3Mgc2V0dGluZ3MpIHsKICAgIC8vIFRPRE86IEltcGxlbWVudCByb3V0ZSBnZW5lcmF0aW9uIGJhc2VkIG9uIHlvdXIgZmVhdHVyZXMKICAgIHN3aXRjaCAoc2V0dGluZ3MubmFtZSkgewogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBNYXRlcmlhbFBhZ2VSb3V0ZSgKICAgICAgICAgIGJ1aWxkZXI6IChfKSA9PiBTY2FmZm9sZCgKICAgICAgICAgICAgYm9keTogQ2VudGVyKAogICAgICAgICAgICAgIGNoaWxkOiBUZXh0KCdObyByb3V0ZSBkZWZpbmVkIGZvciBcJHtzZXR0aW5ncy5uYW1lfScpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgfQogIH0KfQonJycsCiAgICAgIGNvbnRleHQpOwp9Cg==",
      "type": "text",
    },
    {
      "path": "lib/error_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/feature_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/integrate_network_generator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCi8vLyBJbnRlZ3JhdGUgdGhlIG5ldHdvcmsgbGF5ZXIgd2l0aCB0aGUgbWFpbiBydW4gZnVuY3Rpb24gYW5kIHVwZGF0ZSBwdWJzcGVjLnlhbWwKdm9pZCBpbnRlZ3JhdGVOZXR3b3JrTGF5ZXIoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgLy8gVXBkYXRlIHRoZSBydW4gZnVuY3Rpb24gaW4gbWFpbi5kYXJ0IHRvIGltcG9ydCBhbmQgaW5jbHVkZSB0aGUgbmV0d29yayBsYXllcgogIGZpbmFsIG1haW5EYXJ0RmlsZSA9IEZpbGUoJyRwcm9qZWN0TmFtZS9saWIvbWFpbi5kYXJ0Jyk7CiAgCiAgaWYgKG1haW5EYXJ0RmlsZS5leGlzdHNTeW5jKCkpIHsKICAgIFN0cmluZyBjb250ZW50ID0gbWFpbkRhcnRGaWxlLnJlYWRBc1N0cmluZ1N5bmMoKTsKICAgIAogICAgLy8gQWRkIGltcG9ydHMgaWYgbm90IGFscmVhZHkgcHJlc2VudAogICAgaWYgKCFjb250ZW50LmNvbnRhaW5zKCdjb25uZWN0aXZpdHlfc2VydmljZS5kYXJ0JykpIHsKICAgICAgZmluYWwgaW1wb3J0UGF0dGVybiA9IFJlZ0V4cChyJ2ltcG9ydCAuKjtcbicpOwogICAgICBmaW5hbCBsYXN0SW1wb3J0TWF0Y2ggPSBpbXBvcnRQYXR0ZXJuLmFsbE1hdGNoZXMoY29udGVudCkubGFzdE9yTnVsbDsKICAgICAgCiAgICAgIGlmIChsYXN0SW1wb3J0TWF0Y2ggIT0gbnVsbCkgewogICAgICAgIGZpbmFsIGluc2VydFBvc2l0aW9uID0gbGFzdEltcG9ydE1hdGNoLmVuZDsKICAgICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgaW5zZXJ0UG9zaXRpb24pICsKICAgICAgICAgICAgICAgICJpbXBvcnQgJ3BhY2thZ2U6JHByb2plY3ROYW1lL2NvcmUvbmV0d29yay9zZXJ2aWNlcy9jb25uZWN0aXZpdHlfc2VydmljZS5kYXJ0JztcbiIgKwogICAgICAgICAgICAgICAgImltcG9ydCAncGFja2FnZTokcHJvamVjdE5hbWUvY29yZS9uZXR3b3JrL25ldHdvcmtfaW5mby5kYXJ0JztcbiIgKwogICAgICAgICAgICAgICAgImltcG9ydCAncGFja2FnZTppbnRlcm5ldF9jb25uZWN0aW9uX2NoZWNrZXIvaW50ZXJuZXRfY29ubmVjdGlvbl9jaGVja2VyLmRhcnQnO1xuIiArCiAgICAgICAgICAgICAgICBjb250ZW50LnN1YnN0cmluZyhpbnNlcnRQb3NpdGlvbik7CiAgICAgIH0KICAgIH0KICAgIAogICAgLy8gQWRkIG5ldHdvcmsgaW5pdGlhbGl6YXRpb24gaWYgbm90IGFscmVhZHkgcHJlc2VudAogICAgaWYgKCFjb250ZW50LmNvbnRhaW5zKCdDb25uZWN0aXZpdHlTZXJ2aWNlKCknKSkgewogICAgICAvLyBGaW5kIGEgZ29vZCBwb3NpdGlvbiB0byBpbnNlcnQgdGhlIGluaXRpYWxpemF0aW9uCiAgICAgIGZpbmFsIHNldHVwUG9zaXRpb24gPSBjb250ZW50LmluZGV4T2YoJ3ZvaWQgbWFpbigpIGFzeW5jIHsnKSArICd2b2lkIG1haW4oKSBhc3luYyB7Jy5sZW5ndGg7CiAgICAgIAogICAgICBpZiAoc2V0dXBQb3NpdGlvbiA+IDApIHsKICAgICAgICAvLyBJbnNlcnQgbmV0d29yayBpbml0aWFsaXphdGlvbgogICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBzZXR1cFBvc2l0aW9uKSArIAogICAgICAgICAgICAgICJcbiAgLy8gSW5pdGlhbGl6ZSBuZXR3b3JrIHNlcnZpY2VzXG4iICsKICAgICAgICAgICAgICAiICBmaW5hbCBjb25uZWN0aXZpdHlTZXJ2aWNlID0gQ29ubmVjdGl2aXR5U2VydmljZSgpO1xuIiArCiAgICAgICAgICAgICAgIiAgZmluYWwgbmV0d29ya0luZm8gPSBOZXR3b3JrSW5mb0ltcGwoSW50ZXJuZXRDb25uZWN0aW9uQ2hlY2tlcigpKTtcblxuIiArCiAgICAgICAgICAgICAgY29udGVudC5zdWJzdHJpbmcoc2V0dXBQb3NpdGlvbik7CiAgICAgIH0KICAgIH0KICAgIAogICAgLy8gV3JpdGUgdXBkYXRlZCBjb250ZW50IGJhY2sgdG8gZmlsZQogICAgbWFpbkRhcnRGaWxlLndyaXRlQXNTdHJpbmdTeW5jKGNvbnRlbnQpOwogICAgY29udGV4dC5sb2dnZXIuc3VjY2VzcygnVXBkYXRlZCBtYWluLmRhcnQgd2l0aCBuZXR3b3JrIGxheWVyIGluaXRpYWxpemF0aW9uJyk7CiAgfQp9CgovLy8gVXBkYXRlIHB1YnNwZWMueWFtbCB0byBhZGQgbmV0d29yay1yZWxhdGVkIGRlcGVuZGVuY2llcwp2b2lkIHVwZGF0ZVB1YnNwZWNGb3JOZXR3b3JrKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIHB1YnNwZWNGaWxlID0gRmlsZSgnJHByb2plY3ROYW1lL3B1YnNwZWMueWFtbCcpOwogIGlmICghcHVic3BlY0ZpbGUuZXhpc3RzU3luYygpKSB7CiAgICBjb250ZXh0LmxvZ2dlci53YXJuKCdwdWJzcGVjLnlhbWwgbm90IGZvdW5kLCBza2lwcGluZyBhZGRpbmcgbmV0d29yayBkZXBlbmRlbmNpZXMnKTsKICAgIHJldHVybjsKICB9CgogIFN0cmluZyBjb250ZW50ID0gcHVic3BlY0ZpbGUucmVhZEFzU3RyaW5nU3luYygpOwogIAogIC8vIENoZWNrIGlmIHRoZSBkZXBlbmRlbmNpZXMgYXJlIGFscmVhZHkgYWRkZWQKICBpZiAoIWNvbnRlbnQuY29udGFpbnMoJ2RpbzonKSB8fCAhY29udGVudC5jb250YWlucygnY29ubmVjdGl2aXR5X3BsdXM6JykpIHsKICAgIC8vIEZpbmQgdGhlIGVuZCBvZiB0aGUgZGVwZW5kZW5jaWVzIHNlY3Rpb24KICAgIGZpbmFsIGRlcGVuZGVuY2llc01hdGNoID0gUmVnRXhwKHInZGVwZW5kZW5jaWVzOlxzKlxuKChcc3syfVtcd19dKzouKlxuKSspJykuZmlyc3RNYXRjaChjb250ZW50KTsKICAgIAogICAgaWYgKGRlcGVuZGVuY2llc01hdGNoICE9IG51bGwpIHsKICAgICAgZmluYWwgZW5kT2ZEZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXNNYXRjaC5lbmQ7CiAgICAgIAogICAgICAvLyBOZXR3b3JrIGRlcGVuZGVuY2llcyB0byBhZGQKICAgICAgZmluYWwgbmV0d29ya0RlcGVuZGVuY2llcyA9ICcnJwoKICAjIE5ldHdvcmsgZGVwZW5kZW5jaWVzCiAgZGlvOiBeNS4zLjMKICBjb25uZWN0aXZpdHlfcGx1czogXjYuMC4wCiAgaW50ZXJuZXRfY29ubmVjdGlvbl9jaGVja2VyOiBeMy4wLjEKJycnOwogICAgICAKICAgICAgLy8gSW5zZXJ0IGRlcGVuZGVuY2llcwogICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgZW5kT2ZEZXBlbmRlbmNpZXMpICsgCiAgICAgICAgICAgICAgIG5ldHdvcmtEZXBlbmRlbmNpZXMgKyAKICAgICAgICAgICAgICAgY29udGVudC5zdWJzdHJpbmcoZW5kT2ZEZXBlbmRlbmNpZXMpOwogICAgICAKICAgICAgLy8gV3JpdGUgdXBkYXRlZCBjb250ZW50IGJhY2sgdG8gZmlsZQogICAgICBwdWJzcGVjRmlsZS53cml0ZUFzU3RyaW5nU3luYyhjb250ZW50KTsKICAgICAgY29udGV4dC5sb2dnZXIuc3VjY2VzcygnQWRkZWQgbmV0d29yayBkZXBlbmRlbmNpZXMgdG8gcHVic3BlYy55YW1sJyk7CiAgICB9IGVsc2UgewogICAgICBjb250ZXh0LmxvZ2dlci53YXJuKCdDb3VsZCBub3QgZmluZCBkZXBlbmRlbmNpZXMgc2VjdGlvbiBpbiBwdWJzcGVjLnlhbWwnKTsKICAgIH0KICB9IGVsc2UgewogICAgY29udGV4dC5sb2dnZXIuaW5mbygnTmV0d29yayBkZXBlbmRlbmNpZXMgYWxyZWFkeSBleGlzdCBpbiBwdWJzcGVjLnlhbWwnKTsKICB9Cn0KCi8vLyBDcmVhdGUgYSBzYW1wbGUgbW9kZWwgdG8gZGVtb25zdHJhdGUgQVBJIHVzYWdlIHdpdGggbmV0d29yayBsYXllcgp2b2lkIGNyZWF0ZVNhbXBsZU1vZGVsKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIGRpcmVjdG9yeSA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lL2xpYi9jb3JlL25ldHdvcmsvbW9kZWxzJyk7CiAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICBkaXJlY3RvcnkuY3JlYXRlU3luYyhyZWN1cnNpdmU6IHRydWUpOwogIH0KICAKICBmaW5hbCBmaWxlUGF0aCA9ICckcHJvamVjdE5hbWUvbGliL2NvcmUvbmV0d29yay9tb2RlbHMvdXNlcl9tb2RlbC5kYXJ0JzsKICBmaW5hbCBjb250ZW50ID0gJycnCmltcG9ydCAncGFja2FnZTpqc29uX2Fubm90YXRpb24vanNvbl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAndXNlcl9tb2RlbC5nLmRhcnQnOwoKLy8vIFNhbXBsZSB1c2VyIG1vZGVsIHRvIGRlbW9uc3RyYXRlIEFQSSBpbnRlZ3JhdGlvbgpASnNvblNlcmlhbGl6YWJsZSgpCmNsYXNzIFVzZXJNb2RlbCB7CiAgZmluYWwgaW50IGlkOwogIGZpbmFsIFN0cmluZyBuYW1lOwogIGZpbmFsIFN0cmluZyBlbWFpbDsKICAKICBASnNvbktleShuYW1lOiAncHJvZmlsZV9pbWFnZScpCiAgZmluYWwgU3RyaW5nPyBwcm9maWxlSW1hZ2U7CiAgCiAgQEpzb25LZXkoZGVmYXVsdFZhbHVlOiBmYWxzZSkKICBmaW5hbCBib29sIGlzQWN0aXZlOwoKICBVc2VyTW9kZWwoewogICAgcmVxdWlyZWQgdGhpcy5pZCwKICAgIHJlcXVpcmVkIHRoaXMubmFtZSwKICAgIHJlcXVpcmVkIHRoaXMuZW1haWwsCiAgICB0aGlzLnByb2ZpbGVJbWFnZSwKICAgIHJlcXVpcmVkIHRoaXMuaXNBY3RpdmUsCiAgfSk7CgogIGZhY3RvcnkgVXNlck1vZGVsLmZyb21Kc29uKE1hcDxTdHJpbmcsIGR5bmFtaWM+IGpzb24pID0+IAogICAgICBfXCRVc2VyTW9kZWxGcm9tSnNvbihqc29uKTsKICAgICAgCiAgTWFwPFN0cmluZywgZHluYW1pYz4gdG9Kc29uKCkgPT4gX1wkVXNlck1vZGVsVG9Kc29uKHRoaXMpOwp9CicnJzsKCiAgZmluYWwgZmlsZSA9IEZpbGUoZmlsZVBhdGgpOwogIGZpbGUud3JpdGVBc1N0cmluZ1N5bmMoY29udGVudCk7CiAgCiAgLy8gQ3JlYXRlIHRoZSBhc3NvY2lhdGVkIC5nLmRhcnQgZmlsZQogIGZpbmFsIGdlbmVyYXRlZEZpbGVQYXRoID0gJyRwcm9qZWN0TmFtZS9saWIvY29yZS9uZXR3b3JrL21vZGVscy91c2VyX21vZGVsLmcuZGFydCc7CiAgZmluYWwgZ2VuZXJhdGVkQ29udGVudCA9ICcnJwovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAoKcGFydCBvZiAndXNlcl9tb2RlbC5kYXJ0JzsKCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi8vIEpzb25TZXJpYWxpemFibGVHZW5lcmF0b3IKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKClVzZXJNb2RlbCBfXCRVc2VyTW9kZWxGcm9tSnNvbihNYXA8U3RyaW5nLCBkeW5hbWljPiBqc29uKSA9PiBVc2VyTW9kZWwoCiAgICAgIGlkOiBqc29uWydpZCddIGFzIGludCwKICAgICAgbmFtZToganNvblsnbmFtZSddIGFzIFN0cmluZywKICAgICAgZW1haWw6IGpzb25bJ2VtYWlsJ10gYXMgU3RyaW5nLAogICAgICBwcm9maWxlSW1hZ2U6IGpzb25bJ3Byb2ZpbGVfaW1hZ2UnXSBhcyBTdHJpbmc/LAogICAgICBpc0FjdGl2ZToganNvblsnaXNBY3RpdmUnXSBhcyBib29sPyA/PyBmYWxzZSwKICAgICk7CgpNYXA8U3RyaW5nLCBkeW5hbWljPiBfXCRVc2VyTW9kZWxUb0pzb24oVXNlck1vZGVsIGluc3RhbmNlKSA9PiA8U3RyaW5nLCBkeW5hbWljPnsKICAgICAgJ2lkJzogaW5zdGFuY2UuaWQsCiAgICAgICduYW1lJzogaW5zdGFuY2UubmFtZSwKICAgICAgJ2VtYWlsJzogaW5zdGFuY2UuZW1haWwsCiAgICAgICdwcm9maWxlX2ltYWdlJzogaW5zdGFuY2UucHJvZmlsZUltYWdlLAogICAgICAnaXNBY3RpdmUnOiBpbnN0YW5jZS5pc0FjdGl2ZSwKICAgIH07CicnJzsKCiAgZmluYWwgZ2VuZXJhdGVkRmlsZSA9IEZpbGUoZ2VuZXJhdGVkRmlsZVBhdGgpOwogIGdlbmVyYXRlZEZpbGUud3JpdGVBc1N0cmluZ1N5bmMoZ2VuZXJhdGVkQ29udGVudCk7CiAgCiAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBzYW1wbGUgbW9kZWwgZmlsZXMgdG8gZGVtb25zdHJhdGUgQVBJIHVzYWdlJyk7Cn0KCi8vLyBTZXR1cCBOZXR3b3JrTW9kdWxlIHdpdGggZGVwZW5kZW5jeSBpbmplY3Rpb24gKGV4YW1wbGUgZm9yIEdldEl0IGlmIHVzZWQpCnZvaWQgc2V0dXBOZXR3b3JrTW9kdWxlRm9yREkoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lLCBTdHJpbmcgYXJjaGl0ZWN0dXJlKSB7CiAgLy8gT25seSBwcm9jZWVkIHdpdGggdGhpcyBmb3IgQ2xlYW4gQXJjaGl0ZWN0dXJlIHdoaWNoIGxpa2VseSB1c2VzIGRlcGVuZGVuY3kgaW5qZWN0aW9uCiAgaWYgKGFyY2hpdGVjdHVyZSAhPSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgcmV0dXJuOwogIH0KICAKICBmaW5hbCBkaXJlY3RvcnkgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS9saWIvY29yZS9kaScpOwogIGlmICghZGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICB9CiAgCiAgZmluYWwgZmlsZVBhdGggPSAnJHByb2plY3ROYW1lL2xpYi9jb3JlL2RpL25ldHdvcmtfbW9kdWxlLmRhcnQnOwogIGZpbmFsIGNvbnRlbnQgPSAnJycKaW1wb3J0ICdwYWNrYWdlOmRpby9kaW8uZGFydCc7CmltcG9ydCAncGFja2FnZTpnZXRfaXQvZ2V0X2l0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6aW50ZXJuZXRfY29ubmVjdGlvbl9jaGVja2VyL2ludGVybmV0X2Nvbm5lY3Rpb25fY2hlY2tlci5kYXJ0JzsKCmltcG9ydCAnLi4vbmV0d29yay9hcGlfY2xpZW50LmRhcnQnOwppbXBvcnQgJy4uL25ldHdvcmsvYXBpX2NvbnN0YW50cy5kYXJ0JzsKaW1wb3J0ICcuLi9uZXR3b3JrL25ldHdvcmtfaW5mby5kYXJ0JzsKaW1wb3J0ICcuLi9uZXR3b3JrL3NlcnZpY2VzL2Nvbm5lY3Rpdml0eV9zZXJ2aWNlLmRhcnQnOwoKLy8vIFJlZ2lzdGVyIG5ldHdvcmstcmVsYXRlZCBkZXBlbmRlbmNpZXMKdm9pZCByZWdpc3Rlck5ldHdvcmtEZXBlbmRlbmNpZXMoR2V0SXQgc2wpIHsKICAvLyBDb3JlIG5ldHdvcmsgY29tcG9uZW50cwogIHNsLnJlZ2lzdGVyTGF6eVNpbmdsZXRvbjxJbnRlcm5ldENvbm5lY3Rpb25DaGVja2VyPigKICAgICgpID0+IEludGVybmV0Q29ubmVjdGlvbkNoZWNrZXIoKSwKICApOwogIAogIHNsLnJlZ2lzdGVyTGF6eVNpbmdsZXRvbjxOZXR3b3JrSW5mbz4oCiAgICAoKSA9PiBOZXR3b3JrSW5mb0ltcGwoc2w8SW50ZXJuZXRDb25uZWN0aW9uQ2hlY2tlcj4oKSksCiAgKTsKICAKICBzbC5yZWdpc3RlckxhenlTaW5nbGV0b248Q29ubmVjdGl2aXR5U2VydmljZT4oCiAgICAoKSA9PiBDb25uZWN0aXZpdHlTZXJ2aWNlKCksCiAgKTsKICAKICAvLyBBUEkgY2xpZW50CiAgc2wucmVnaXN0ZXJMYXp5U2luZ2xldG9uPEFwaUNsaWVudD4oCiAgICAoKSA9PiBBcGlDbGllbnQoCiAgICAgIGJhc2VVcmw6IEFwaUNvbnN0YW50cy5iYXNlVXJsLAogICAgICB0aW1lb3V0OiBBcGlDb25zdGFudHMudGltZW91dCwKICAgICAgdXNlQXV0aDogdHJ1ZSwKICAgICksCiAgKTsKICAKICAvLyBSZWdpc3RlciBpbmRpdmlkdWFsIEFQSSBzZXJ2aWNlcwogIC8vIFRPRE86IEFkZCB5b3VyIEFQSSBzZXJ2aWNlcyBoZXJlCiAgLy8gRXhhbXBsZToKICAvLyBzbC5yZWdpc3RlckxhenlTaW5nbGV0b248VXNlckFwaVNlcnZpY2U+KAogIC8vICAgKCkgPT4gVXNlckFwaVNlcnZpY2UoKSwKICAvLyApOwp9CicnJzsKCiAgZmluYWwgZmlsZSA9IEZpbGUoZmlsZVBhdGgpOwogIGZpbGUud3JpdGVBc1N0cmluZ1N5bmMoY29udGVudCk7CiAgCiAgLy8gVXBkYXRlIHRoZSBtYWluIERJIGZpbGUgaWYgaXQgZXhpc3RzCiAgZmluYWwgZGlGaWxlUGF0aCA9ICckcHJvamVjdE5hbWUvbGliL2NvcmUvZGkvaW5qZWN0aW9uLmRhcnQnOwogIGZpbmFsIGRpRmlsZSA9IEZpbGUoZGlGaWxlUGF0aCk7CiAgCiAgaWYgKGRpRmlsZS5leGlzdHNTeW5jKCkpIHsKICAgIFN0cmluZyBkaUNvbnRlbnQgPSBkaUZpbGUucmVhZEFzU3RyaW5nU3luYygpOwogICAgCiAgICAvLyBBZGQgaW1wb3J0IGlmIG5vdCBwcmVzZW50CiAgICBpZiAoIWRpQ29udGVudC5jb250YWlucygnbmV0d29ya19tb2R1bGUuZGFydCcpKSB7CiAgICAgIGZpbmFsIGltcG9ydFBhdHRlcm4gPSBSZWdFeHAocidpbXBvcnQgLio7XG4nKTsKICAgICAgZmluYWwgbGFzdEltcG9ydE1hdGNoID0gaW1wb3J0UGF0dGVybi5hbGxNYXRjaGVzKGRpQ29udGVudCkubGFzdE9yTnVsbDsKICAgICAgCiAgICAgIGlmIChsYXN0SW1wb3J0TWF0Y2ggIT0gbnVsbCkgewogICAgICAgIGZpbmFsIGluc2VydFBvc2l0aW9uID0gbGFzdEltcG9ydE1hdGNoLmVuZDsKICAgICAgICBkaUNvbnRlbnQgPSBkaUNvbnRlbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvc2l0aW9uKSArCiAgICAgICAgICAgICAgICAgImltcG9ydCAnbmV0d29ya19tb2R1bGUuZGFydCc7XG4iICsKICAgICAgICAgICAgICAgICBkaUNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvc2l0aW9uKTsKICAgICAgfQogICAgfQogICAgCiAgICAvLyBBZGQgbmV0d29yayByZWdpc3RyYXRpb24gZnVuY3Rpb24gY2FsbCBpZiBub3QgcHJlc2VudAogICAgaWYgKCFkaUNvbnRlbnQuY29udGFpbnMoJ3JlZ2lzdGVyTmV0d29ya0RlcGVuZGVuY2llcycpKSB7CiAgICAgIGZpbmFsIGNvbmZpZ1BhdHRlcm4gPSBSZWdFeHAocid2b2lkIGNvbmZpZ3VyZURlcGVuZGVuY2llc1woXCkgYXN5bmMgXHsnKTsKICAgICAgZmluYWwgY29uZmlnTWF0Y2ggPSBjb25maWdQYXR0ZXJuLmZpcnN0TWF0Y2goZGlDb250ZW50KTsKICAgICAgCiAgICAgIGlmIChjb25maWdNYXRjaCAhPSBudWxsKSB7CiAgICAgICAgZmluYWwgaW5zZXJ0UG9zaXRpb24gPSBjb25maWdNYXRjaC5lbmQ7CiAgICAgICAgZGlDb250ZW50ID0gZGlDb250ZW50LnN1YnN0cmluZygwLCBpbnNlcnRQb3NpdGlvbikgKwogICAgICAgICAgICAgICAgICJcbiAgLy8gUmVnaXN0ZXIgbmV0d29yayBkZXBlbmRlbmNpZXNcbiIgKwogICAgICAgICAgICAgICAgICIgIHJlZ2lzdGVyTmV0d29ya0RlcGVuZGVuY2llcyhzbCk7XG4iICsKICAgICAgICAgICAgICAgICBkaUNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvc2l0aW9uKTsKICAgICAgfQogICAgfQogICAgCiAgICAvLyBXcml0ZSB1cGRhdGVkIGNvbnRlbnQgYmFjayB0byBmaWxlCiAgICBkaUZpbGUud3JpdGVBc1N0cmluZ1N5bmMoZGlDb250ZW50KTsKICB9CiAgCiAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBuZXR3b3JrIG1vZHVsZSBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24nKTsKfQo=",
      "type": "text",
    },
    {
      "path": "lib/integrate_theme_manager.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/localization_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/main_configurator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/network_layer_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/pubsec_configurator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCi8vLyBDb25maWd1cmVzIHRoZSBwdWJzcGVjLnlhbWwgZmlsZSBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgYXJjaGl0ZWN0dXJlLCBzdGF0ZSBtYW5hZ2VtZW50LAovLy8gZmVhdHVyZXMsIGFuZCBtb2R1bGVzCnZvaWQgY29uZmlndXJlUHVic3BlYygKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsCiAgICBTdHJpbmcgcHJvamVjdE5hbWUsCiAgICBTdHJpbmcgb3JnYW5pemF0aW9uLAogICAgU3RyaW5nIGFyY2hpdGVjdHVyZSwKICAgIFN0cmluZyBzdGF0ZU1hbmFnZW1lbnQsCiAgICBMaXN0PGR5bmFtaWM+IGZlYXR1cmVzLAogICAgTGlzdDxkeW5hbWljPiBtb2R1bGVzKSB7CiAgZmluYWwgcHVic3BlY0ZpbGUgPSBGaWxlKCckcHJvamVjdE5hbWUvcHVic3BlYy55YW1sJyk7CiAgU3RyaW5nIHB1YnNwZWNDb250ZW50ID0gJyc7CgogIC8vIENyZWF0ZSBwdWJzcGVjIHRlbXBsYXRlIGNvbnRlbnQKICBwdWJzcGVjQ29udGVudCA9ICcnJwpuYW1lOiAkcHJvamVjdE5hbWUKZGVzY3JpcHRpb246IEEgRmx1dHRlciBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgYnkgQnVubnkgQ0xJLgpwdWJsaXNoX3RvOiAnbm9uZScgIyBSZW1vdmUgdGhpcyBsaW5lIGlmIHlvdSB3aXNoIHRvIHB1Ymxpc2ggdG8gcHViLmRldgp2ZXJzaW9uOiAxLjAuMCsxCgplbnZpcm9ubWVudDoKICBzZGs6IF4zLjYuMAoKZGVwZW5kZW5jaWVzOgogIGZsdXR0ZXI6CiAgICBzZGs6IGZsdXR0ZXIKCiAgIyBDb3JlIHBhY2thZ2VzCiAgY3VwZXJ0aW5vX2ljb25zOiBeMS4wLjYKICBpbnRsOiBhbnkKICBlcXVhdGFibGU6IF4yLjAuNQogIHBhdGhfcHJvdmlkZXI6IF4yLjEuMQogIHNoYXJlZF9wcmVmZXJlbmNlczogXjIuNS4yCiAgZmx1dHRlcl9zZWN1cmVfc3RvcmFnZTogXjkuMC4wCiAgY2FjaGVkX25ldHdvcmtfaW1hZ2U6IF4zLjMuMAogIHVybF9sYXVuY2hlcjogXjYuMS4xNAogIGNvbm5lY3Rpdml0eV9wbHVzOiBeNi4wLjAKICBmbHV0dGVyX3N2ZzogXjIuMC45CiAgZmx1dHRlcl9kb3RlbnY6IF41LjEuMAogIGpzb25fYW5ub3RhdGlvbjogXjQuOC4xCiAgZnJlZXplZF9hbm5vdGF0aW9uOiBeMi40LjEKICBzaGltbWVyOiBeMy4wLjAKICBkaW86IF41LjMuMwogIGxvZ2dlcjogXjIuMC4yCicnJzsKCiAgLy8gQWRkIHN0YXRlIG1hbmFnZW1lbnQgZGVwZW5kZW5jaWVzCiAgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnQmxvYycgfHwgc3RhdGVNYW5hZ2VtZW50ID09ICdCTG9DJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBCTG9DIHN0YXRlIG1hbmFnZW1lbnQKICBmbHV0dGVyX2Jsb2M6IF44LjEuMwogIGJsb2M6IF44LjEuMgogIGh5ZHJhdGVkX2Jsb2M6IF44LjAuMAonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1Byb3ZpZGVyJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBQcm92aWRlciBzdGF0ZSBtYW5hZ2VtZW50CiAgcHJvdmlkZXI6IF42LjAuNQonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1JpdmVycG9kJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBSaXZlcnBvZCBzdGF0ZSBtYW5hZ2VtZW50CiAgZmx1dHRlcl9yaXZlcnBvZDogXjIuNi4xCicnJzsKICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnR2V0WCcpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogICMgR2V0WCBzdGF0ZSBtYW5hZ2VtZW50CiAgZ2V0OiBeNC43LjIKJycnOwogIH0gZWxzZSBpZiAoc3RhdGVNYW5hZ2VtZW50ID09ICdNb2JYJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBNb2JYIHN0YXRlIG1hbmFnZW1lbnQKICBtb2J4OiBeMi41LjAKICBmbHV0dGVyX21vYng6IF4yLjEuMAonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ1JlZHV4JykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBSZWR1eCBzdGF0ZSBtYW5hZ2VtZW50CiAgcmVkdXg6IF41LjAuMAogIGZsdXR0ZXJfcmVkdXg6IF4wLjEwLjAKICByZWR1eF90aHVuazogXjAuNC4wCicnJzsKICB9CgogIC8vIEFkZCBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgZGVwZW5kZW5jaWVzCiAgaWYgKGFyY2hpdGVjdHVyZSA9PSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBDbGVhbiBBcmNoaXRlY3R1cmUgZGVwZW5kZW5jaWVzCiAgZGFydHo6IF4wLjEwLjEKICBpbmplY3RhYmxlOiBeMi4zLjAKICBnZXRfaXQ6IF43LjYuNAonJyc7CiAgfSBlbHNlIGlmIChhcmNoaXRlY3R1cmUgPT0gJ01WVk0nKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICAjIE1WVk0gQXJjaGl0ZWN0dXJlIGRlcGVuZGVuY2llcwogIHN0YWNrZWQ6IF4zLjQuMQogIHN0YWNrZWRfc2VydmljZXM6IF4xLjMuMAonJyc7CiAgfSBlbHNlIGlmIChhcmNoaXRlY3R1cmUgPT0gJ0ZlYXR1cmUtRHJpdmVuJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBGZWF0dXJlLURyaXZlbiBBcmNoaXRlY3R1cmUgZGVwZW5kZW5jaWVzCiAgZ29fcm91dGVyOiBeMTIuMS4xCiAgZmx1dHRlcl9tb2R1bGFyOiBeNi4zLjIKJycnOwogIH0KCiAgaWYgKGZlYXR1cmVzLmNvbnRhaW5zKCdVc2VyIFByb2ZpbGUnKSkgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgIyBVc2VyIFByb2ZpbGUgZGVwZW5kZW5jaWVzCiAgaW1hZ2VfcGlja2VyOiBeMS4wLjQKICBpbWFnZV9jcm9wcGVyOiBeNS4wLjEKJycnOwogIH0KCiAgaWYgKGZlYXR1cmVzLmNvbnRhaW5zKCdQcm9kdWN0cycpKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICAjIFByb2R1Y3RzIGZlYXR1cmUgZGVwZW5kZW5jaWVzCiAgY2Fyb3VzZWxfc2xpZGVyOiBeNC4yLjEKICBpbmZpbml0ZV9zY3JvbGxfcGFnaW5hdGlvbjogXjQuMC4wCicnJzsKICB9CgogIC8vIEFkZCBkZXYgZGVwZW5kZW5jaWVzCiAgcHVic3BlY0NvbnRlbnQgKz0gJycnCgpkZXZfZGVwZW5kZW5jaWVzOgogIGZsdXR0ZXJfdGVzdDoKICAgIHNkazogZmx1dHRlcgogIGZsdXR0ZXJfbGludHM6IF4zLjAuMAogIGJ1aWxkX3J1bm5lcjogXjIuNC42CiAgZmx1dHRlcl9nZW5fcnVubmVyOiBeNS4zLjIKICBmbHV0dGVyX2xhdW5jaGVyX2ljb25zOiBeMC4xMy4xCiAgc291cmNlX2dlbjogXjEuNC4wCicnJzsKCiAgLy8gQWRkIHN0YXRlIG1hbmFnZW1lbnQtc3BlY2lmaWMgZGV2IGRlcGVuZGVuY2llcwogIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ0Jsb2MnIHx8IHN0YXRlTWFuYWdlbWVudCA9PSAnQkxvQycpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogIGJsb2NfdGVzdDogXjkuMS40CicnJzsKICB9IGVsc2UgaWYgKHN0YXRlTWFuYWdlbWVudCA9PSAnUml2ZXJwb2QnKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICByaXZlcnBvZF9nZW5lcmF0b3I6IF4yLjMuNQonJyc7CiAgfSBlbHNlIGlmIChzdGF0ZU1hbmFnZW1lbnQgPT0gJ01vYlgnKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKICBtb2J4X2NvZGVnZW46IF4yLjcuMAonJyc7CiAgfQoKICAvLyBBZGQgZmVhdHVyZS1zcGVjaWZpYyBkZXYgZGVwZW5kZW5jaWVzCiAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAganNvbl9zZXJpYWxpemFibGU6IF42LjcuMQogIGZyZWV6ZWQ6IF4yLjQuNQonJyc7CgogIGlmIChtb2R1bGVzLmNvbnRhaW5zKCdOZXR3b3JrIExheWVyJykpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogIGludGVybmV0X2Nvbm5lY3Rpb25fY2hlY2tlcjogXjMuMC4xCicnJzsKICB9CgogIGlmIChtb2R1bGVzLmNvbnRhaW5zKCdMb2NhbCBTdG9yYWdlJykpIHsKICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwogIGhpdmVfZ2VuZXJhdG9yOiBeMi4wLjEKJycnOwogIH0KCiAgaWYgKGFyY2hpdGVjdHVyZSA9PSAnQ2xlYW4gQXJjaGl0ZWN0dXJlJykgewogICAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgaW5qZWN0YWJsZV9nZW5lcmF0b3I6IF4yLjQuMAonJyc7CiAgfQovLyAgIGVsc2UgaWYgKGFyY2hpdGVjdHVyZSA9PSAnTVZWTScpIHsKLy8gICAgIHB1YnNwZWNDb250ZW50ICs9ICcnJwovLyAgIHN0YWNrZWRfZ2VuZXJhdG9yOiBeMS41LjEKLy8gJycnOwovLyAgIH0KCiAgLy8gQWRkIEZsdXR0ZXIgY29uZmlndXJhdGlvbgogIHB1YnNwZWNDb250ZW50ICs9ICcnJwoKIyBGbHV0dGVyIGNvbmZpZ3VyYXRpb24KZmx1dHRlcjoKICB1c2VzLW1hdGVyaWFsLWRlc2lnbjogdHJ1ZQogIGdlbmVyYXRlOiB0cnVlCgogIGFzc2V0czoKICAgIC0gYXNzZXRzL2ltYWdlcy8KJycnOwoKLy8gICAvLyBBZGQgY29uZGl0aW9uYWwgYXNzZXRzIGJhc2VkIG9uIGZlYXR1cmVzIGFuZCBtb2R1bGVzCi8vICAgaWYgKG1vZHVsZXMuY29udGFpbnMoJ0xvY2FsaXphdGlvbicpKSB7Ci8vICAgICBwdWJzcGVjQ29udGVudCArPSAnJycKLy8gICAgIC0gYXNzZXRzL3RyYW5zbGF0aW9ucy8KLy8gJycnOwovLyAgIH0KCiAgcHVic3BlY0NvbnRlbnQgKz0gJycnCiAgICAtIC5lbnYKCiAgCicnJzsKCiAgLy8gRmx1dHRlciBuYXRpdmUgc3BsYXNoIGNvbmZpZ3VyYXRpb24gaWYgZGFzaGJvYXJkIGZlYXR1cmUgaXMgaW5jbHVkZWQKICBpZiAoZmVhdHVyZXMuY29udGFpbnMoJ0Rhc2hib2FyZCcpKSB7CiAgICBwdWJzcGVjQ29udGVudCArPSAnJycKCiMgRmx1dHRlciBuYXRpdmUgc3BsYXNoIGNvbmZpZ3VyYXRpb24KZmx1dHRlcl9uYXRpdmVfc3BsYXNoOgogIGNvbG9yOiAiI0ZGRkZGRiIKICBpbWFnZTogYXNzZXRzL2ltYWdlcy9zcGxhc2gucG5nCiAgYW5kcm9pZF8xMjoKICAgIGltYWdlOiBhc3NldHMvaW1hZ2VzL3NwbGFzaF9hbmRyb2lkMTIucG5nCiAgICBpY29uX2JhY2tncm91bmRfY29sb3I6ICIjRkZGRkZGIgogIHdlYjogZmFsc2UKJycnOwogIH0KCiAgLy8gQ3JlYXRlIGRpcmVjdG9yeSBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KHByb2plY3ROYW1lKTsKICBpZiAoIWRpcmVjdG9yeS5leGlzdHNTeW5jKCkpIHsKICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIHByb2plY3QgZGlyZWN0b3J5OiAkcHJvamVjdE5hbWUnKTsKICB9CgogIC8vIFdyaXRlIHRoZSBwdWJzcGVjLnlhbWwgZmlsZQogIHB1YnNwZWNGaWxlLndyaXRlQXNTdHJpbmdTeW5jKHB1YnNwZWNDb250ZW50KTsKICBjb250ZXh0LmxvZ2dlcgogICAgICAuc3VjY2VzcygnR2VuZXJhdGVkIHB1YnNwZWMueWFtbCB3aXRoIGFwcHJvcHJpYXRlIGRlcGVuZGVuY2llcycpOwp9Cg==",
      "type": "text",
    },
    {
      "path": "lib/push_notification_generator.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCi8vLyBHZW5lcmF0ZXMgYSBwdXNoIG5vdGlmaWNhdGlvbiBzeXN0ZW0gd2l0aCBGaXJlYmFzZSBDbG91ZCBNZXNzYWdpbmcKLy8vIGlmIHRoZSBOb3RpZmljYXRpb25zIG1vZHVsZSBpcyBzZWxlY3RlZAp2b2lkIGdlbmVyYXRlUHVzaE5vdGlmaWNhdGlvblN5c3RlbSgKICAgIEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSwgTGlzdDxkeW5hbWljPiBtb2R1bGVzKSB7CiAgLy8gQ2hlY2sgaWYgTm90aWZpY2F0aW9ucyBpcyBpbiB0aGUgc2VsZWN0ZWQgbW9kdWxlcwogIGlmICghbW9kdWxlcy5jb250YWlucygnUHVzaCBOb3RpZmljYXRpb24nKSkgewogICAgY29udGV4dC5sb2dnZXIuaW5mbygKICAgICAgICAnTm90aWZpY2F0aW9ucyBtb2R1bGUgbm90IHNlbGVjdGVkLCBza2lwcGluZyBwdXNoIG5vdGlmaWNhdGlvbiBzeXN0ZW0gZ2VuZXJhdGlvbicpOwogICAgcmV0dXJuOwogIH0KCiAgY29udGV4dC5sb2dnZXIuaW5mbygnR2VuZXJhdGluZyBwdXNoIG5vdGlmaWNhdGlvbiBzeXN0ZW0gZm9yICRwcm9qZWN0TmFtZScpOwoKICAvLyBDcmVhdGUgZGlyZWN0b3J5IHN0cnVjdHVyZQogIGZpbmFsIGRpcmVjdG9yaWVzID0gWwogICAgJ2xpYi9jb3JlL25vdGlmaWNhdGlvbnMnLAogICAgJ2xpYi9jb3JlL25vdGlmaWNhdGlvbnMvc2VydmljZXMnLAogICAgJ2xpYi9jb3JlL25vdGlmaWNhdGlvbnMvbW9kZWxzJywKICBdOwoKICBmb3IgKGZpbmFsIGRpciBpbiBkaXJlY3RvcmllcykgewogICAgZmluYWwgZGlyZWN0b3J5ID0gRGlyZWN0b3J5KCckcHJvamVjdE5hbWUvJGRpcicpOwogICAgaWYgKCFkaXJlY3RvcnkuZXhpc3RzU3luYygpKSB7CiAgICAgIGRpcmVjdG9yeS5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgZGlyZWN0b3J5OiAkZGlyJyk7CiAgICB9CiAgfQoKICAvLyBHZW5lcmF0ZSBpT1MgSW5mby5wbGlzdCB3aXRoIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9ucwogIC8vIGdlbmVyYXRlSW5mb1BsaXN0RmlsZShjb250ZXh0LCBwcm9qZWN0TmFtZSk7CgogIC8vIFVwZGF0ZSBpT1MgYW5kIEFuZHJvaWQgcGxhdGZvcm0gY29uZmlndXJhdGlvbnMKICBfY29uZmlndXJlTm90aWZpY2F0aW9uc0ZvclBsYXRmb3Jtcyhjb250ZXh0LCBwcm9qZWN0TmFtZSk7CgogIC8vIEdlbmVyYXRlIG5vdGlmaWNhdGlvbiBmaWxlcwogIF9nZW5lcmF0ZUZjbVNlcnZpY2VGaWxlKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICBfZ2VuZXJhdGVOb3RpZmljYXRpb25IYW5kbGVyRmlsZShjb250ZXh0LCBwcm9qZWN0TmFtZSk7CiAgX2dlbmVyYXRlTm90aWZpY2F0aW9uTW9kZWxGaWxlKGNvbnRleHQsIHByb2plY3ROYW1lKTsKICBfZ2VuZXJhdGVMb2NhbE5vdGlmaWNhdGlvblNlcnZpY2VGaWxlKGNvbnRleHQsIHByb2plY3ROYW1lKTsKCiAgLy8gVXBkYXRlIHB1YnNwZWMueWFtbCB0byBhZGQgRmlyZWJhc2UgZGVwZW5kZW5jaWVzCiAgX2FkZEZpcmViYXNlRGVwZW5kZW5jaWVzKGNvbnRleHQsIHByb2plY3ROYW1lKTsKCiAgLy8gVXBkYXRlIG1haW4uZGFydCB0byBpbml0aWFsaXplIEZpcmViYXNlIGFuZCBGQ00KICBfdXBkYXRlTWFpbkZvck5vdGlmaWNhdGlvbnMoY29udGV4dCwgcHJvamVjdE5hbWUpOwoKICAvLyBDcmVhdGUgYSBzYW1wbGUgbm90aWZpY2F0aW9uIHNjcmVlbgogIF9nZW5lcmF0ZU5vdGlmaWNhdGlvblNjcmVlbkZpbGUoY29udGV4dCwgcHJvamVjdE5hbWUpOwoKICBjb250ZXh0LmxvZ2dlci5zdWNjZXNzKCdQdXNoIG5vdGlmaWNhdGlvbiBzeXN0ZW0gZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSEnKTsKfQoKLy8vIEdlbmVyYXRlcyB0aGUgRkNNIHNlcnZpY2UgZmlsZQp2b2lkIF9nZW5lcmF0ZUZjbVNlcnZpY2VGaWxlKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIGZpbGVQYXRoID0KICAgICAgJyRwcm9qZWN0TmFtZS9saWIvY29yZS9ub3RpZmljYXRpb25zL3NlcnZpY2VzL2ZjbV9zZXJ2aWNlLmRhcnQnOwogIGZpbmFsIGNvbnRlbnQgPSAnJycKaW1wb3J0ICdkYXJ0OmNvbnZlcnQnOwppbXBvcnQgJ3BhY2thZ2U6ZmlyZWJhc2VfY29yZS9maXJlYmFzZV9jb3JlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6ZmlyZWJhc2VfbWVzc2FnaW5nL2ZpcmViYXNlX21lc3NhZ2luZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvZm91bmRhdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfbG9jYWxfbm90aWZpY2F0aW9ucy9mbHV0dGVyX2xvY2FsX25vdGlmaWNhdGlvbnMuZGFydCc7CmltcG9ydCAnZGFydDppbyc7CgppbXBvcnQgJy4uL21vZGVscy9wdXNoX25vdGlmaWNhdGlvbl9tb2RlbC5kYXJ0JzsKaW1wb3J0ICdsb2NhbF9ub3RpZmljYXRpb25fc2VydmljZS5kYXJ0JzsKCgovLy8gU2VydmljZSB0byBoYW5kbGUgRmlyZWJhc2UgQ2xvdWQgTWVzc2FnaW5nIChGQ00pIG9wZXJhdGlvbnMKY2xhc3MgRkNNU2VydmljZSB7CiAgZmluYWwgRmlyZWJhc2VNZXNzYWdpbmcgX2ZpcmViYXNlTWVzc2FnaW5nID0gRmlyZWJhc2VNZXNzYWdpbmcuaW5zdGFuY2U7CiAgZmluYWwgTG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlIF9sb2NhbE5vdGlmaWNhdGlvblNlcnZpY2U7CiAgZmluYWwgTGlzdDxGdW5jdGlvbihQdXNoTm90aWZpY2F0aW9uTW9kZWwpPiBfb25Ob3RpZmljYXRpb25SZWNlaXZlZExpc3RlbmVycyA9CiAgICAgIFtdOwoKICBGQ01TZXJ2aWNlKHRoaXMuX2xvY2FsTm90aWZpY2F0aW9uU2VydmljZSk7CgogIC8vLyBJbml0aWFsaXplIEZDTSBzZXJ2aWNlCiAgLy8vIEluaXRpYWxpemUgRkNNIHNlcnZpY2Ugd2l0aCBpbXByb3ZlZCBlcnJvciBoYW5kbGluZwogIEZ1dHVyZTx2b2lkPiBpbml0aWFsaXplKCkgYXN5bmMgewogICAgYXdhaXQgX3JlcXVlc3RQZXJtaXNzaW9ucygpOwogICAgYXdhaXQgX3NldHVwRm9yZWdyb3VuZE5vdGlmaWNhdGlvbnMoKTsKICAgIGF3YWl0IF9zZXR1cEJhY2tncm91bmRBbmRUZXJtaW5hdGVkTm90aWZpY2F0aW9ucygpOwogICAgYXdhaXQgX3NldHVwT25NZXNzYWdlT3BlbmVkQXBwKCk7CgogICAgdHJ5IHsKICAgICAgLy8gR2V0IEZDTSB0b2tlbiB3aXRoIGVycm9yIGhhbmRsaW5nCiAgICAgIFN0cmluZz8gdG9rZW4gPSBhd2FpdCBnZXRUb2tlbigpOwogICAgICBpZiAodG9rZW4gIT0gbnVsbCkgewogICAgICAgIGRlYnVnUHJpbnQoJ0ZDTSBUb2tlbjogXCR0b2tlbicpOwogICAgICB9IGVsc2UgewogICAgICAgIGRlYnVnUHJpbnQoJ0ZhaWxlZCB0byBnZXQgRkNNIHRva2VuIC0gbm90aWZpY2F0aW9ucyBtYXkgYmUgbGltaXRlZCcpOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGRlYnVnUHJpbnQoJ0Vycm9yIGR1cmluZyBGQ00gaW5pdGlhbGl6YXRpb246IFwkZScpOwogICAgICAvLyBDb250aW51ZSBleGVjdXRpb24gZXZlbiBpZiB0b2tlbiByZXRyaWV2YWwgZmFpbHMKICAgIH0KCiAgICAvLyBMaXN0ZW4gZm9yIHRva2VuIHJlZnJlc2hlcwogICAgX2ZpcmViYXNlTWVzc2FnaW5nLm9uVG9rZW5SZWZyZXNoLmxpc3RlbigobmV3VG9rZW4pIHsKICAgICAgZGVidWdQcmludCgnRkNNIFRva2VuIHJlZnJlc2hlZDogXCRuZXdUb2tlbicpOwogICAgICAvLyBUT0RPOiBTZW5kIHRoaXMgdG9rZW4gdG8geW91ciBzZXJ2ZXIKICAgIH0pOwogIH0KCiAgLy8vIFJlcXVlc3Qgbm90aWZpY2F0aW9uIHBlcm1pc3Npb25zCiAgRnV0dXJlPHZvaWQ+IF9yZXF1ZXN0UGVybWlzc2lvbnMoKSBhc3luYyB7CiAgICBOb3RpZmljYXRpb25TZXR0aW5ncyBzZXR0aW5ncyA9IGF3YWl0IF9maXJlYmFzZU1lc3NhZ2luZy5yZXF1ZXN0UGVybWlzc2lvbigKICAgICAgYWxlcnQ6IHRydWUsCiAgICAgIGFubm91bmNlbWVudDogZmFsc2UsCiAgICAgIGJhZGdlOiB0cnVlLAogICAgICBjYXJQbGF5OiBmYWxzZSwKICAgICAgY3JpdGljYWxBbGVydDogZmFsc2UsCiAgICAgIHByb3Zpc2lvbmFsOiBmYWxzZSwKICAgICAgc291bmQ6IHRydWUsCiAgICApOwoKICAgIGRlYnVnUHJpbnQoJ0ZDTSBwZXJtaXNzaW9uIHN0YXR1czogXCR7c2V0dGluZ3MuYXV0aG9yaXphdGlvblN0YXR1c30nKTsKICB9CgogIC8vLyBTZXR1cCBoYW5kbGluZyBvZiBmb3JlZ3JvdW5kIG5vdGlmaWNhdGlvbnMKICBGdXR1cmU8dm9pZD4gX3NldHVwRm9yZWdyb3VuZE5vdGlmaWNhdGlvbnMoKSBhc3luYyB7CiAgICAvLyBIYW5kbGUgZm9yZWdyb3VuZCBtZXNzYWdlcwogICAgRmlyZWJhc2VNZXNzYWdpbmcub25NZXNzYWdlLmxpc3RlbigoUmVtb3RlTWVzc2FnZSBtZXNzYWdlKSB7CiAgICAgIGRlYnVnUHJpbnQoJ0dvdCBhIG1lc3NhZ2Ugd2hpbHN0IGluIHRoZSBmb3JlZ3JvdW5kIScpOwogICAgICBkZWJ1Z1ByaW50KCdNZXNzYWdlIGRhdGE6IFwke21lc3NhZ2UuZGF0YX0nKTsKCiAgICAgIGlmIChtZXNzYWdlLm5vdGlmaWNhdGlvbiAhPSBudWxsKSB7CiAgICAgICAgZGVidWdQcmludCgKICAgICAgICAgICAgJ01lc3NhZ2UgYWxzbyBjb250YWluZWQgYSBub3RpZmljYXRpb246IFwke21lc3NhZ2Uubm90aWZpY2F0aW9ufScpOwoKICAgICAgICBmaW5hbCBub3RpZmljYXRpb24gPSBQdXNoTm90aWZpY2F0aW9uTW9kZWwoCiAgICAgICAgICB0aXRsZTogbWVzc2FnZS5ub3RpZmljYXRpb24/LnRpdGxlID8/ICdOZXcgTm90aWZpY2F0aW9uJywKICAgICAgICAgIGJvZHk6IG1lc3NhZ2Uubm90aWZpY2F0aW9uPy5ib2R5ID8/ICcnLAogICAgICAgICAgcGF5bG9hZDoganNvbi5lbmNvZGUobWVzc2FnZS5kYXRhKSwKICAgICAgICApOwoKICAgICAgICAvLyBTaG93IGxvY2FsIG5vdGlmaWNhdGlvbgogICAgICAgIF9sb2NhbE5vdGlmaWNhdGlvblNlcnZpY2Uuc2hvd05vdGlmaWNhdGlvbihub3RpZmljYXRpb24pOwoKICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzCiAgICAgICAgX25vdGlmeUxpc3RlbmVycyhub3RpZmljYXRpb24pOwogICAgICB9CiAgICB9KTsKICB9CgogIC8vLyBTZXR1cCBoYW5kbGluZyBvZiBiYWNrZ3JvdW5kIGFuZCB0ZXJtaW5hdGVkIG5vdGlmaWNhdGlvbnMKICBGdXR1cmU8dm9pZD4gX3NldHVwQmFja2dyb3VuZEFuZFRlcm1pbmF0ZWROb3RpZmljYXRpb25zKCkgYXN5bmMgewogICAgLy8gQ2hlY2sgaWYgYXBwIHdhcyBvcGVuZWQgZnJvbSBhIHRlcm1pbmF0ZWQgc3RhdGUKICAgIFJlbW90ZU1lc3NhZ2U/IGluaXRpYWxNZXNzYWdlID0KICAgICAgICBhd2FpdCBfZmlyZWJhc2VNZXNzYWdpbmcuZ2V0SW5pdGlhbE1lc3NhZ2UoKTsKICAgIGlmIChpbml0aWFsTWVzc2FnZSAhPSBudWxsKSB7CiAgICAgIF9oYW5kbGVNZXNzYWdlKGluaXRpYWxNZXNzYWdlKTsKICAgIH0KICB9CgogIC8vLyBTZXR1cCBoYW5kbGluZyBvZiBub3RpZmljYXRpb25zIHdoZW4gYXBwIGlzIG9wZW5lZAogIEZ1dHVyZTx2b2lkPiBfc2V0dXBPbk1lc3NhZ2VPcGVuZWRBcHAoKSBhc3luYyB7CiAgICAvLyBIYW5kbGUgd2hlbiB0aGUgYXBwIGlzIG9wZW5lZCBmcm9tIGEgYmFja2dyb3VuZCBzdGF0ZQogICAgRmlyZWJhc2VNZXNzYWdpbmcub25NZXNzYWdlT3BlbmVkQXBwLmxpc3RlbihfaGFuZGxlTWVzc2FnZSk7CiAgfQoKICAvLy8gSGFuZGxlIHJlY2VpdmVkIG1lc3NhZ2UKICB2b2lkIF9oYW5kbGVNZXNzYWdlKFJlbW90ZU1lc3NhZ2UgbWVzc2FnZSkgewogICAgZGVidWdQcmludCgnSGFuZGxpbmcgRkNNIG1lc3NhZ2U6IFwke21lc3NhZ2UubWVzc2FnZUlkfScpOwoKICAgIGlmIChtZXNzYWdlLm5vdGlmaWNhdGlvbiAhPSBudWxsKSB7CiAgICAgIGZpbmFsIG5vdGlmaWNhdGlvbiA9IFB1c2hOb3RpZmljYXRpb25Nb2RlbCgKICAgICAgICB0aXRsZTogbWVzc2FnZS5ub3RpZmljYXRpb24/LnRpdGxlID8/ICdOZXcgTm90aWZpY2F0aW9uJywKICAgICAgICBib2R5OiBtZXNzYWdlLm5vdGlmaWNhdGlvbj8uYm9keSA/PyAnJywKICAgICAgICBwYXlsb2FkOiBqc29uLmVuY29kZShtZXNzYWdlLmRhdGEpLAogICAgICApOwoKICAgICAgLy8gTm90aWZ5IGxpc3RlbmVycwogICAgICBfbm90aWZ5TGlzdGVuZXJzKG5vdGlmaWNhdGlvbik7CgogICAgICAvLyBUT0RPOiBOYXZpZ2F0ZSB0byBzcGVjaWZpYyBzY3JlZW4gYmFzZWQgb24gZGF0YSBpZiBuZWVkZWQKICAgICAgLy8gRXhhbXBsZToKICAgICAgLy8gaWYgKG1lc3NhZ2UuZGF0YS5jb250YWluc0tleSgndHlwZScpKSB7CiAgICAgIC8vICAgaWYgKG1lc3NhZ2UuZGF0YVsndHlwZSddID09ICdjaGF0JykgewogICAgICAvLyAgICAgLy8gTmF2aWdhdGUgdG8gY2hhdCBzY3JlZW4KICAgICAgLy8gICB9CiAgICAgIC8vIH0KICAgIH0KICB9CgogIC8vLyBTdWJzY3JpYmUgdG8gYSB0b3BpYwogIEZ1dHVyZTx2b2lkPiBzdWJzY3JpYmVUb1RvcGljKFN0cmluZyB0b3BpYykgYXN5bmMgewogICAgYXdhaXQgX2ZpcmViYXNlTWVzc2FnaW5nLnN1YnNjcmliZVRvVG9waWModG9waWMpOwogIH0KCiAgLy8vIFVuc3Vic2NyaWJlIGZyb20gYSB0b3BpYwogIEZ1dHVyZTx2b2lkPiB1bnN1YnNjcmliZUZyb21Ub3BpYyhTdHJpbmcgdG9waWMpIGFzeW5jIHsKICAgIGF3YWl0IF9maXJlYmFzZU1lc3NhZ2luZy51bnN1YnNjcmliZUZyb21Ub3BpYyh0b3BpYyk7CiAgfQoKICAvLy8gR2V0IHRoZSBGQ00gdG9rZW4KICAvLy8gR2V0IHRoZSBGQ00gdG9rZW4gd2l0aCBpbXByb3ZlZCBpT1Mgc3VwcG9ydAogIEZ1dHVyZTxTdHJpbmc/PiBnZXRUb2tlbigpIGFzeW5jIHsKICAgIHRyeSB7CiAgICAgIGlmIChQbGF0Zm9ybS5pc0lPUykgewogICAgICAgIC8vIEZvciBpT1MsIGZpcnN0IGNoZWNrIEFQTlMgdG9rZW4gZXhwbGljaXRseQogICAgICAgIGZpbmFsIGFwbnNUb2tlbiA9IGF3YWl0IF9maXJlYmFzZU1lc3NhZ2luZy5nZXRBUE5TVG9rZW4oKTsKCiAgICAgICAgaWYgKGFwbnNUb2tlbiA9PSBudWxsKSB7CiAgICAgICAgICBkZWJ1Z1ByaW50KCdBUE5TIHRva2VuIGlzIG51bGwsIGlPUyBwdXNoIG5vdGlmaWNhdGlvbnMgbWF5IG5vdCB3b3JrJyk7CgogICAgICAgICAgLy8gaU9TIHNpbXVsYXRvciBkb2Vzbid0IHN1cHBvcnQgcHVzaCBub3RpZmljYXRpb25zCiAgICAgICAgICBpZiAoUGxhdGZvcm0uaXNJT1MgJiYgIWF3YWl0IF9pc1BoeXNpY2FsRGV2aWNlKCkpIHsKICAgICAgICAgICAgZGVidWdQcmludCgKICAgICAgICAgICAgICAgICdSdW5uaW5nIG9uIGlPUyBzaW11bGF0b3IgLSBwdXNoIG5vdGlmaWNhdGlvbnMgYXJlIG5vdCBmdWxseSBzdXBwb3J0ZWQnKTsKICAgICAgICAgICAgcmV0dXJuICdzaW11bGF0b3ItdG9rZW4tbm90LWF2YWlsYWJsZSc7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gT24gcGh5c2ljYWwgZGV2aWNlcywgd2FpdCBhIGJpdCBhbmQgdHJ5IGFnYWluCiAgICAgICAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihzZWNvbmRzOiAxKSk7CiAgICAgICAgICBmaW5hbCByZXRyeUFwbnNUb2tlbiA9IGF3YWl0IF9maXJlYmFzZU1lc3NhZ2luZy5nZXRBUE5TVG9rZW4oKTsKCiAgICAgICAgICBpZiAocmV0cnlBcG5zVG9rZW4gPT0gbnVsbCkgewogICAgICAgICAgICBkZWJ1Z1ByaW50KCdBUE5TIHRva2VuIHN0aWxsIG51bGwgYWZ0ZXIgcmV0cnknKTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBOb3cgdHJ5IHRvIGdldCBGQ00gdG9rZW4KICAgICAgcmV0dXJuIGF3YWl0IF9maXJlYmFzZU1lc3NhZ2luZy5nZXRUb2tlbigpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBkZWJ1Z1ByaW50KCdFcnJvciBnZXR0aW5nIEZDTSB0b2tlbjogXCRlJyk7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0KCgogIC8vLyBDaGVjayBpZiB0aGUgYXBwIGlzIHJ1bm5pbmcgb24gYSBwaHlzaWNhbCBkZXZpY2UKICBGdXR1cmU8Ym9vbD4gX2lzUGh5c2ljYWxEZXZpY2UoKSBhc3luYyB7CiAgICB0cnkgewogICAgICAvLyBUaGlzIGlzIGEgc2ltcGxpZmllZCBjaGVjayAtIGluIHByb2R1Y3Rpb24sIHVzZSBhIHBhY2thZ2UgbGlrZSAnZGV2aWNlX2luZm9fcGx1cycKICAgICAgLy8gdG8gbW9yZSBhY2N1cmF0ZWx5IGRldGVybWluZSBpZiB0aGUgZGV2aWNlIGlzIHBoeXNpY2FsCiAgICAgIHJldHVybiAhYm9vbC5mcm9tRW52aXJvbm1lbnQoJ2RhcnQudm0ucHJvZHVjdCcpOwogICAgfSBjYXRjaCAoZSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQoKICAvLy8gQWRkIGEgbm90aWZpY2F0aW9uIHJlY2VpdmVkIGxpc3RlbmVyCiAgdm9pZCBhZGRPbk5vdGlmaWNhdGlvblJlY2VpdmVkTGlzdGVuZXIoCiAgICAgIEZ1bmN0aW9uKFB1c2hOb3RpZmljYXRpb25Nb2RlbCkgbGlzdGVuZXIpIHsKICAgIF9vbk5vdGlmaWNhdGlvblJlY2VpdmVkTGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7CiAgfQoKICAvLy8gUmVtb3ZlIGEgbm90aWZpY2F0aW9uIHJlY2VpdmVkIGxpc3RlbmVyCiAgdm9pZCByZW1vdmVPbk5vdGlmaWNhdGlvblJlY2VpdmVkTGlzdGVuZXIoCiAgICAgIEZ1bmN0aW9uKFB1c2hOb3RpZmljYXRpb25Nb2RlbCkgbGlzdGVuZXIpIHsKICAgIF9vbk5vdGlmaWNhdGlvblJlY2VpdmVkTGlzdGVuZXJzLnJlbW92ZShsaXN0ZW5lcik7CiAgfQoKICAvLy8gTm90aWZ5IGxpc3RlbmVycyBvZiBhIG5ldyBub3RpZmljYXRpb24KICB2b2lkIF9ub3RpZnlMaXN0ZW5lcnMoUHVzaE5vdGlmaWNhdGlvbk1vZGVsIG5vdGlmaWNhdGlvbikgewogICAgZm9yICh2YXIgbGlzdGVuZXIgaW4gX29uTm90aWZpY2F0aW9uUmVjZWl2ZWRMaXN0ZW5lcnMpIHsKICAgICAgbGlzdGVuZXIobm90aWZpY2F0aW9uKTsKICAgIH0KICB9Cn0KCi8vLyBGaXJlYmFzZSBtZXNzYWdlIGhhbmRsZXIgZm9yIGJhY2tncm91bmQgbWVzc2FnZXMKQHByYWdtYSgndm06ZW50cnktcG9pbnQnKQpGdXR1cmU8dm9pZD4gZmlyZWJhc2VNZXNzYWdpbmdCYWNrZ3JvdW5kSGFuZGxlcihSZW1vdGVNZXNzYWdlIG1lc3NhZ2UpIGFzeW5jIHsKICAvLyBOZWVkIHRvIGluaXRpYWxpemUgRmlyZWJhc2UgYmVmb3JlIHVzaW5nIGl0CiAgYXdhaXQgRmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCgpOwoKICBkZWJ1Z1ByaW50KCdIYW5kbGluZyBiYWNrZ3JvdW5kIG1lc3NhZ2U6IFwke21lc3NhZ2UubWVzc2FnZUlkfScpOwoKICAvLyBJbml0aWFsaXplIEZsdXR0ZXJMb2NhbE5vdGlmaWNhdGlvbnNQbHVnaW4KICBmaW5hbCBGbHV0dGVyTG9jYWxOb3RpZmljYXRpb25zUGx1Z2luIGZsdXR0ZXJMb2NhbE5vdGlmaWNhdGlvbnNQbHVnaW4gPQogICAgICBGbHV0dGVyTG9jYWxOb3RpZmljYXRpb25zUGx1Z2luKCk7CgogIGNvbnN0IEFuZHJvaWRJbml0aWFsaXphdGlvblNldHRpbmdzIGluaXRpYWxpemF0aW9uU2V0dGluZ3NBbmRyb2lkID0KICAgICAgQW5kcm9pZEluaXRpYWxpemF0aW9uU2V0dGluZ3MoJ0BtaXBtYXAvaWNfbGF1bmNoZXInKTsKCiAgY29uc3QgSW5pdGlhbGl6YXRpb25TZXR0aW5ncyBpbml0aWFsaXphdGlvblNldHRpbmdzID0KICAgICAgSW5pdGlhbGl6YXRpb25TZXR0aW5ncyhhbmRyb2lkOiBpbml0aWFsaXphdGlvblNldHRpbmdzQW5kcm9pZCk7CgogIGF3YWl0IGZsdXR0ZXJMb2NhbE5vdGlmaWNhdGlvbnNQbHVnaW4uaW5pdGlhbGl6ZShpbml0aWFsaXphdGlvblNldHRpbmdzKTsKCiAgLy8gU2hvdyBub3RpZmljYXRpb24gaWYgdGhlcmUgaXMgYSBub3RpZmljYXRpb24gcGF5bG9hZAogIGlmIChtZXNzYWdlLm5vdGlmaWNhdGlvbiAhPSBudWxsKSB7CiAgICBjb25zdCBBbmRyb2lkTm90aWZpY2F0aW9uRGV0YWlscyBhbmRyb2lkUGxhdGZvcm1DaGFubmVsU3BlY2lmaWNzID0KICAgICAgICBBbmRyb2lkTm90aWZpY2F0aW9uRGV0YWlscygKICAgICAgJ2hpZ2hfaW1wb3J0YW5jZV9jaGFubmVsJywKICAgICAgJ0hpZ2ggSW1wb3J0YW5jZSBOb3RpZmljYXRpb25zJywKICAgICAgaW1wb3J0YW5jZTogSW1wb3J0YW5jZS5tYXgsCiAgICAgIHByaW9yaXR5OiBQcmlvcml0eS5oaWdoLAogICAgKTsKCiAgICBjb25zdCBOb3RpZmljYXRpb25EZXRhaWxzIHBsYXRmb3JtQ2hhbm5lbFNwZWNpZmljcyA9CiAgICAgICAgTm90aWZpY2F0aW9uRGV0YWlscyhhbmRyb2lkOiBhbmRyb2lkUGxhdGZvcm1DaGFubmVsU3BlY2lmaWNzKTsKCiAgICBhd2FpdCBmbHV0dGVyTG9jYWxOb3RpZmljYXRpb25zUGx1Z2luLnNob3coCiAgICAgIG1lc3NhZ2UuaGFzaENvZGUsCiAgICAgIG1lc3NhZ2Uubm90aWZpY2F0aW9uPy50aXRsZSwKICAgICAgbWVzc2FnZS5ub3RpZmljYXRpb24/LmJvZHksCiAgICAgIHBsYXRmb3JtQ2hhbm5lbFNwZWNpZmljcywKICAgICAgcGF5bG9hZDoganNvbi5lbmNvZGUobWVzc2FnZS5kYXRhKSwKICAgICk7CiAgfQp9CicnJzsKCiAgZmluYWwgZmlsZSA9IEZpbGUoZmlsZVBhdGgpOwogIGZpbGUud3JpdGVBc1N0cmluZ1N5bmMoY29udGVudCk7CiAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmaWxlOiAkZmlsZVBhdGgnKTsKfQoKLy8vIEdlbmVyYXRlcyB0aGUgbm90aWZpY2F0aW9uIGhhbmRsZXIgZmlsZQp2b2lkIF9nZW5lcmF0ZU5vdGlmaWNhdGlvbkhhbmRsZXJGaWxlKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIGZpbGVQYXRoID0KICAgICAgJyRwcm9qZWN0TmFtZS9saWIvY29yZS9ub3RpZmljYXRpb25zL25vdGlmaWNhdGlvbl9oYW5kbGVyLmRhcnQnOwogIGZpbmFsIGNvbnRlbnQgPSAnJycKaW1wb3J0ICdwYWNrYWdlOmZpcmViYXNlX21lc3NhZ2luZy9maXJlYmFzZV9tZXNzYWdpbmcuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2xvY2FsX25vdGlmaWNhdGlvbnMvZmx1dHRlcl9sb2NhbF9ub3RpZmljYXRpb25zLmRhcnQnOwoKaW1wb3J0ICdtb2RlbHMvcHVzaF9ub3RpZmljYXRpb25fbW9kZWwuZGFydCc7CmltcG9ydCAnc2VydmljZXMvZmNtX3NlcnZpY2UuZGFydCc7CmltcG9ydCAnc2VydmljZXMvbG9jYWxfbm90aWZpY2F0aW9uX3NlcnZpY2UuZGFydCc7CgovLy8gTWFpbiBjbGFzcyB0byBoYW5kbGUgYWxsIG5vdGlmaWNhdGlvbiBvcGVyYXRpb25zCmNsYXNzIE5vdGlmaWNhdGlvbkhhbmRsZXIgewogIGxhdGUgZmluYWwgRkNNU2VydmljZSBfZmNtU2VydmljZTsKICBsYXRlIGZpbmFsIExvY2FsTm90aWZpY2F0aW9uU2VydmljZSBfbG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlOwogIAogIC8vLyBJbml0aWFsaXplIG5vdGlmaWNhdGlvbiBzZXJ2aWNlcwpGdXR1cmU8Ym9vbD4gaW5pdGlhbGl6ZSgpIGFzeW5jIHsKICAgIHRyeSB7CiAgICAgIC8vIFNldHVwIGxvY2FsIG5vdGlmaWNhdGlvbnMgZmlyc3QKICAgICAgX2xvY2FsTm90aWZpY2F0aW9uU2VydmljZSA9IExvY2FsTm90aWZpY2F0aW9uU2VydmljZSgpOwogICAgICBhd2FpdCBfbG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoKTsKCiAgICAgIC8vIFNldHVwIEZDTSBzZXJ2aWNlCiAgICAgIF9mY21TZXJ2aWNlID0gRkNNU2VydmljZShfbG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlKTsKICAgICAgYXdhaXQgX2ZjbVNlcnZpY2UuaW5pdGlhbGl6ZSgpOwoKICAgICAgLy8gUmVnaXN0ZXIgYmFja2dyb3VuZCBtZXNzYWdlIGhhbmRsZXIKICAgICAgRmlyZWJhc2VNZXNzYWdpbmcub25CYWNrZ3JvdW5kTWVzc2FnZShmaXJlYmFzZU1lc3NhZ2luZ0JhY2tncm91bmRIYW5kbGVyKTsKCiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaCAoZSkgewogICAgICBkZWJ1Z1ByaW50KCdFcnJvciBpbml0aWFsaXppbmcgbm90aWZpY2F0aW9uIHNlcnZpY2VzOiBcJGUnKTsKICAgICAgLy8gQ29udGludWUgd2l0aCBhcHAgaW5pdGlhbGl6YXRpb24gZXZlbiBpZiBub3RpZmljYXRpb25zIGZhaWwKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgLy8vIEdldCBGQ00gdG9rZW4gd2l0aCBlcnJvciBoYW5kbGluZwogIEZ1dHVyZTxTdHJpbmc/PiBnZXRGQ01Ub2tlbigpIGFzeW5jIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBfZmNtU2VydmljZS5nZXRUb2tlbigpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBkZWJ1Z1ByaW50KCdFcnJvciBpbiBnZXRGQ01Ub2tlbjogXCRlJyk7CiAgICAgIHJldHVybiAnRXJyb3I6IFwkZSc7CiAgICB9CiAgfQogIAogIC8vLyBTaG93IGEgbG9jYWwgbm90aWZpY2F0aW9uCiAgRnV0dXJlPHZvaWQ+IHNob3dMb2NhbE5vdGlmaWNhdGlvbihQdXNoTm90aWZpY2F0aW9uTW9kZWwgbm90aWZpY2F0aW9uKSBhc3luYyB7CiAgICBhd2FpdCBfbG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlLnNob3dOb3RpZmljYXRpb24obm90aWZpY2F0aW9uKTsKICB9CiAgCiAgLy8vIFN1YnNjcmliZSB0byBhIEZDTSB0b3BpYwogIEZ1dHVyZTx2b2lkPiBzdWJzY3JpYmVUb1RvcGljKFN0cmluZyB0b3BpYykgYXN5bmMgewogICAgYXdhaXQgX2ZjbVNlcnZpY2Uuc3Vic2NyaWJlVG9Ub3BpYyh0b3BpYyk7CiAgfQogIAogIC8vLyBVbnN1YnNjcmliZSBmcm9tIGEgRkNNIHRvcGljCiAgRnV0dXJlPHZvaWQ+IHVuc3Vic2NyaWJlRnJvbVRvcGljKFN0cmluZyB0b3BpYykgYXN5bmMgewogICAgYXdhaXQgX2ZjbVNlcnZpY2UudW5zdWJzY3JpYmVGcm9tVG9waWModG9waWMpOwogIH0KICAKICAKICAvLy8gQWRkIGxpc3RlbmVyIGZvciBub3RpZmljYXRpb24gcmVjZWl2ZWQKICB2b2lkIGFkZE9uTm90aWZpY2F0aW9uUmVjZWl2ZWRMaXN0ZW5lcihGdW5jdGlvbihQdXNoTm90aWZpY2F0aW9uTW9kZWwpIGxpc3RlbmVyKSB7CiAgICBfZmNtU2VydmljZS5hZGRPbk5vdGlmaWNhdGlvblJlY2VpdmVkTGlzdGVuZXIobGlzdGVuZXIpOwogIH0KICAKICAvLy8gUmVtb3ZlIGxpc3RlbmVyIGZvciBub3RpZmljYXRpb24gcmVjZWl2ZWQKICB2b2lkIHJlbW92ZU9uTm90aWZpY2F0aW9uUmVjZWl2ZWRMaXN0ZW5lcihGdW5jdGlvbihQdXNoTm90aWZpY2F0aW9uTW9kZWwpIGxpc3RlbmVyKSB7CiAgICBfZmNtU2VydmljZS5yZW1vdmVPbk5vdGlmaWNhdGlvblJlY2VpdmVkTGlzdGVuZXIobGlzdGVuZXIpOwogIH0KICAKICAvLy8gQWRkIGxpc3RlbmVyIGZvciBub3RpZmljYXRpb24gdGFwCiAgdm9pZCBhZGRPbk5vdGlmaWNhdGlvblRhcExpc3RlbmVyKEZ1bmN0aW9uKFN0cmluZz8pIGxpc3RlbmVyKSB7CiAgICBfbG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlLmFkZE9uTm90aWZpY2F0aW9uVGFwTGlzdGVuZXIobGlzdGVuZXIpOwogIH0KICAKICAvLy8gUmVtb3ZlIGxpc3RlbmVyIGZvciBub3RpZmljYXRpb24gdGFwCiAgdm9pZCByZW1vdmVPbk5vdGlmaWNhdGlvblRhcExpc3RlbmVyKEZ1bmN0aW9uKFN0cmluZz8pIGxpc3RlbmVyKSB7CiAgICBfbG9jYWxOb3RpZmljYXRpb25TZXJ2aWNlLnJlbW92ZU9uTm90aWZpY2F0aW9uVGFwTGlzdGVuZXIobGlzdGVuZXIpOwogIH0KfQoKLy8vIEdsb2JhbCBub3RpZmljYXRpb24gaGFuZGxlciBpbnN0YW5jZQpmaW5hbCBub3RpZmljYXRpb25IYW5kbGVyID0gTm90aWZpY2F0aW9uSGFuZGxlcigpOwonJyc7CgogIGZpbmFsIGZpbGUgPSBGaWxlKGZpbGVQYXRoKTsKICBmaWxlLndyaXRlQXNTdHJpbmdTeW5jKGNvbnRlbnQpOwogIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgZmlsZTogJGZpbGVQYXRoJyk7Cn0KCi8vLyBHZW5lcmF0ZXMgdGhlIG5vdGlmaWNhdGlvbiBtb2RlbCBmaWxlCnZvaWQgX2dlbmVyYXRlTm90aWZpY2F0aW9uTW9kZWxGaWxlKEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIGZpbGVQYXRoID0KICAgICAgJyRwcm9qZWN0TmFtZS9saWIvY29yZS9ub3RpZmljYXRpb25zL21vZGVscy9wdXNoX25vdGlmaWNhdGlvbl9tb2RlbC5kYXJ0JzsKICBmaW5hbCBjb250ZW50ID0gJycnCi8vLyBNb2RlbCBjbGFzcyBmb3IgcHVzaCBub3RpZmljYXRpb25zCmNsYXNzIFB1c2hOb3RpZmljYXRpb25Nb2RlbCB7CiAgZmluYWwgU3RyaW5nIHRpdGxlOwogIGZpbmFsIFN0cmluZyBib2R5OwogIGZpbmFsIFN0cmluZz8gaW1hZ2VVcmw7CiAgZmluYWwgU3RyaW5nPyBwYXlsb2FkOwogIAogIFB1c2hOb3RpZmljYXRpb25Nb2RlbCh7CiAgICByZXF1aXJlZCB0aGlzLnRpdGxlLAogICAgcmVxdWlyZWQgdGhpcy5ib2R5LAogICAgdGhpcy5pbWFnZVVybCwKICAgIHRoaXMucGF5bG9hZCwKICB9KTsKICAKICBmYWN0b3J5IFB1c2hOb3RpZmljYXRpb25Nb2RlbC5mcm9tSnNvbihNYXA8U3RyaW5nLCBkeW5hbWljPiBqc29uKSB7CiAgICByZXR1cm4gUHVzaE5vdGlmaWNhdGlvbk1vZGVsKAogICAgICB0aXRsZToganNvblsndGl0bGUnXSA/PyAnJywKICAgICAgYm9keToganNvblsnYm9keSddID8/ICcnLAogICAgICBpbWFnZVVybDoganNvblsnaW1hZ2VVcmwnXSwKICAgICAgcGF5bG9hZDoganNvblsncGF5bG9hZCddLAogICAgKTsKICB9CiAgCiAgTWFwPFN0cmluZywgZHluYW1pYz4gdG9Kc29uKCkgewogICAgcmV0dXJuIHsKICAgICAgJ3RpdGxlJzogdGl0bGUsCiAgICAgICdib2R5JzogYm9keSwKICAgICAgJ2ltYWdlVXJsJzogaW1hZ2VVcmwsCiAgICAgICdwYXlsb2FkJzogcGF5bG9hZCwKICAgIH07CiAgfQp9CicnJzsKCiAgZmluYWwgZmlsZSA9IEZpbGUoZmlsZVBhdGgpOwogIGZpbGUud3JpdGVBc1N0cmluZ1N5bmMoY29udGVudCk7CiAgY29udGV4dC5sb2dnZXIuaW5mbygnQ3JlYXRlZCBmaWxlOiAkZmlsZVBhdGgnKTsKfQoKLy8vIEdlbmVyYXRlcyB0aGUgbG9jYWwgbm90aWZpY2F0aW9uIHNlcnZpY2UgZmlsZQp2b2lkIF9nZW5lcmF0ZUxvY2FsTm90aWZpY2F0aW9uU2VydmljZUZpbGUoCiAgICBIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICBmaW5hbCBmaWxlUGF0aCA9CiAgICAgICckcHJvamVjdE5hbWUvbGliL2NvcmUvbm90aWZpY2F0aW9ucy9zZXJ2aWNlcy9sb2NhbF9ub3RpZmljYXRpb25fc2VydmljZS5kYXJ0JzsKICBmaW5hbCBjb250ZW50ID0gJycnCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2xvY2FsX25vdGlmaWNhdGlvbnMvZmx1dHRlcl9sb2NhbF9ub3RpZmljYXRpb25zLmRhcnQnOwoKaW1wb3J0ICcuLi9tb2RlbHMvcHVzaF9ub3RpZmljYXRpb25fbW9kZWwuZGFydCc7CgovLy8gU2VydmljZSB0byBoYW5kbGUgbG9jYWwgbm90aWZpY2F0aW9ucyB1c2luZyBmbHV0dGVyX2xvY2FsX25vdGlmaWNhdGlvbnMgcGx1Z2luCmNsYXNzIExvY2FsTm90aWZpY2F0aW9uU2VydmljZSB7CiAgZmluYWwgRmx1dHRlckxvY2FsTm90aWZpY2F0aW9uc1BsdWdpbiBfZmx1dHRlckxvY2FsTm90aWZpY2F0aW9uc1BsdWdpbiA9CiAgICAgIEZsdXR0ZXJMb2NhbE5vdGlmaWNhdGlvbnNQbHVnaW4oKTsKCiAgZmluYWwgTGlzdDxGdW5jdGlvbihTdHJpbmc/KT4gX29uTm90aWZpY2F0aW9uVGFwTGlzdGVuZXJzID0gW107CgogIC8vLyBJbml0aWFsaXplIGxvY2FsIG5vdGlmaWNhdGlvbiBzZXJ2aWNlCiAgRnV0dXJlPHZvaWQ+IGluaXRpYWxpemUoKSBhc3luYyB7CiAgICBjb25zdCBBbmRyb2lkSW5pdGlhbGl6YXRpb25TZXR0aW5ncyBpbml0aWFsaXphdGlvblNldHRpbmdzQW5kcm9pZCA9CiAgICAgICAgQW5kcm9pZEluaXRpYWxpemF0aW9uU2V0dGluZ3MoJ0BtaXBtYXAvaWNfbGF1bmNoZXInKTsKCiAgICBmaW5hbCBEYXJ3aW5Jbml0aWFsaXphdGlvblNldHRpbmdzIGluaXRpYWxpemF0aW9uU2V0dGluZ3NJT1MgPQogICAgICAgIERhcndpbkluaXRpYWxpemF0aW9uU2V0dGluZ3MoCiAgICAgIHJlcXVlc3RBbGVydFBlcm1pc3Npb246IHRydWUsCiAgICAgIHJlcXVlc3RCYWRnZVBlcm1pc3Npb246IHRydWUsCiAgICAgIHJlcXVlc3RTb3VuZFBlcm1pc3Npb246IHRydWUsCiAgICApOwoKICAgIGZpbmFsIEluaXRpYWxpemF0aW9uU2V0dGluZ3MgaW5pdGlhbGl6YXRpb25TZXR0aW5ncyA9CiAgICAgICAgSW5pdGlhbGl6YXRpb25TZXR0aW5ncygKICAgICAgYW5kcm9pZDogaW5pdGlhbGl6YXRpb25TZXR0aW5nc0FuZHJvaWQsCiAgICAgIGlPUzogaW5pdGlhbGl6YXRpb25TZXR0aW5nc0lPUywKICAgICk7CgogICAgYXdhaXQgX2ZsdXR0ZXJMb2NhbE5vdGlmaWNhdGlvbnNQbHVnaW4uaW5pdGlhbGl6ZSgKICAgICAgaW5pdGlhbGl6YXRpb25TZXR0aW5ncywKICAgICAgb25EaWRSZWNlaXZlTm90aWZpY2F0aW9uUmVzcG9uc2U6IF9vbkRpZFJlY2VpdmVOb3RpZmljYXRpb25SZXNwb25zZSwKICAgICk7CiAgfQoKICAvLy8gU2hvdyBhIG5vdGlmaWNhdGlvbgogIEZ1dHVyZTx2b2lkPiBzaG93Tm90aWZpY2F0aW9uKFB1c2hOb3RpZmljYXRpb25Nb2RlbCBub3RpZmljYXRpb24pIGFzeW5jIHsKICAgIGNvbnN0IEFuZHJvaWROb3RpZmljYXRpb25EZXRhaWxzIGFuZHJvaWRQbGF0Zm9ybUNoYW5uZWxTcGVjaWZpY3MgPQogICAgICAgIEFuZHJvaWROb3RpZmljYXRpb25EZXRhaWxzKAogICAgICAnaGlnaF9pbXBvcnRhbmNlX2NoYW5uZWwnLAogICAgICAnSGlnaCBJbXBvcnRhbmNlIE5vdGlmaWNhdGlvbnMnLAogICAgICBpbXBvcnRhbmNlOiBJbXBvcnRhbmNlLm1heCwKICAgICAgcHJpb3JpdHk6IFByaW9yaXR5LmhpZ2gsCiAgICApOwoKICAgIGNvbnN0IERhcndpbk5vdGlmaWNhdGlvbkRldGFpbHMgaU9TUGxhdGZvcm1DaGFubmVsU3BlY2lmaWNzID0KICAgICAgICBEYXJ3aW5Ob3RpZmljYXRpb25EZXRhaWxzKAogICAgICBwcmVzZW50QWxlcnQ6IHRydWUsCiAgICAgIHByZXNlbnRCYWRnZTogdHJ1ZSwKICAgICAgcHJlc2VudFNvdW5kOiB0cnVlLAogICAgKTsKCiAgICBjb25zdCBOb3RpZmljYXRpb25EZXRhaWxzIHBsYXRmb3JtQ2hhbm5lbFNwZWNpZmljcyA9IE5vdGlmaWNhdGlvbkRldGFpbHMoCiAgICAgIGFuZHJvaWQ6IGFuZHJvaWRQbGF0Zm9ybUNoYW5uZWxTcGVjaWZpY3MsCiAgICAgIGlPUzogaU9TUGxhdGZvcm1DaGFubmVsU3BlY2lmaWNzLAogICAgKTsKCiAgICBhd2FpdCBfZmx1dHRlckxvY2FsTm90aWZpY2F0aW9uc1BsdWdpbi5zaG93KAogICAgICBub3RpZmljYXRpb24uaGFzaENvZGUsCiAgICAgIG5vdGlmaWNhdGlvbi50aXRsZSwKICAgICAgbm90aWZpY2F0aW9uLmJvZHksCiAgICAgIHBsYXRmb3JtQ2hhbm5lbFNwZWNpZmljcywKICAgICAgcGF5bG9hZDogbm90aWZpY2F0aW9uLnBheWxvYWQsCiAgICApOwogIH0KCiAgLy8vIEhhbmRsZSBub3RpZmljYXRpb24gcmVzcG9uc2Ugd2hlbiB0YXBwZWQKICB2b2lkIF9vbkRpZFJlY2VpdmVOb3RpZmljYXRpb25SZXNwb25zZShOb3RpZmljYXRpb25SZXNwb25zZSByZXNwb25zZSkgewogICAgZmluYWwgU3RyaW5nPyBwYXlsb2FkID0gcmVzcG9uc2UucGF5bG9hZDsKCiAgICAvLyBOb3RpZnkgbGlzdGVuZXJzCiAgICBmb3IgKHZhciBsaXN0ZW5lciBpbiBfb25Ob3RpZmljYXRpb25UYXBMaXN0ZW5lcnMpIHsKICAgICAgbGlzdGVuZXIocGF5bG9hZCk7CiAgICB9CiAgfQoKICAvLy8gQWRkIG5vdGlmaWNhdGlvbiB0YXAgbGlzdGVuZXIKICB2b2lkIGFkZE9uTm90aWZpY2F0aW9uVGFwTGlzdGVuZXIoRnVuY3Rpb24oU3RyaW5nPykgbGlzdGVuZXIpIHsKICAgIF9vbk5vdGlmaWNhdGlvblRhcExpc3RlbmVycy5hZGQobGlzdGVuZXIpOwogIH0KCiAgLy8vIFJlbW92ZSBub3RpZmljYXRpb24gdGFwIGxpc3RlbmVyCiAgdm9pZCByZW1vdmVPbk5vdGlmaWNhdGlvblRhcExpc3RlbmVyKEZ1bmN0aW9uKFN0cmluZz8pIGxpc3RlbmVyKSB7CiAgICBfb25Ob3RpZmljYXRpb25UYXBMaXN0ZW5lcnMucmVtb3ZlKGxpc3RlbmVyKTsKICB9CgogIC8vLyBHZXQgcGVuZGluZyBub3RpZmljYXRpb24gcmVxdWVzdHMKICBGdXR1cmU8TGlzdDxQZW5kaW5nTm90aWZpY2F0aW9uUmVxdWVzdD4+CiAgICAgIGdldFBlbmRpbmdOb3RpZmljYXRpb25SZXF1ZXN0cygpIGFzeW5jIHsKICAgIHJldHVybiBhd2FpdCBfZmx1dHRlckxvY2FsTm90aWZpY2F0aW9uc1BsdWdpbi5wZW5kaW5nTm90aWZpY2F0aW9uUmVxdWVzdHMoKTsKICB9CgogIC8vLyBDYW5jZWwgYSBzcGVjaWZpYyBub3RpZmljYXRpb24KICBGdXR1cmU8dm9pZD4gY2FuY2VsTm90aWZpY2F0aW9uKGludCBpZCkgYXN5bmMgewogICAgYXdhaXQgX2ZsdXR0ZXJMb2NhbE5vdGlmaWNhdGlvbnNQbHVnaW4uY2FuY2VsKGlkKTsKICB9CgogIC8vLyBDYW5jZWwgYWxsIG5vdGlmaWNhdGlvbnMKICBGdXR1cmU8dm9pZD4gY2FuY2VsQWxsTm90aWZpY2F0aW9ucygpIGFzeW5jIHsKICAgIGF3YWl0IF9mbHV0dGVyTG9jYWxOb3RpZmljYXRpb25zUGx1Z2luLmNhbmNlbEFsbCgpOwogIH0KfQoKJycnOwoKICBmaW5hbCBmaWxlID0gRmlsZShmaWxlUGF0aCk7CiAgZmlsZS53cml0ZUFzU3RyaW5nU3luYyhjb250ZW50KTsKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIGZpbGU6ICRmaWxlUGF0aCcpOwp9CgovLy8gR2VuZXJhdGVzIGEgbm90aWZpY2F0aW9uIHNjcmVlbgp2b2lkIF9nZW5lcmF0ZU5vdGlmaWNhdGlvblNjcmVlbkZpbGUoSG9va0NvbnRleHQgY29udGV4dCwgU3RyaW5nIHByb2plY3ROYW1lKSB7CiAgZmluYWwgZmlsZVBhdGggPQogICAgICAnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy9ub3RpZmljYXRpb25zL3ByZXNlbnRhdGlvbi9wYWdlcy9ub3RpZmljYXRpb25fc2NyZWVuLmRhcnQnOwoKICAvLyBDcmVhdGUgZGlyZWN0b3JpZXMgaWYgdGhleSBkb24ndCBleGlzdAogIGZpbmFsIGRpcmVjdG9yeSA9CiAgICAgIERpcmVjdG9yeSgnJHByb2plY3ROYW1lL2xpYi9mZWF0dXJlcy9ub3RpZmljYXRpb25zL3ByZXNlbnRhdGlvbi9wYWdlcycpOwogIGlmICghZGlyZWN0b3J5LmV4aXN0c1N5bmMoKSkgewogICAgZGlyZWN0b3J5LmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICB9CgogIGZpbmFsIGNvbnRlbnQgPSAnJycKaW1wb3J0ICdkYXJ0OmNvbnZlcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKCmltcG9ydCAnLi4vLi4vLi4vLi4vY29yZS9ub3RpZmljYXRpb25zL25vdGlmaWNhdGlvbl9oYW5kbGVyLmRhcnQnOwppbXBvcnQgJy4uLy4uLy4uLy4uL2NvcmUvbm90aWZpY2F0aW9ucy9tb2RlbHMvcHVzaF9ub3RpZmljYXRpb25fbW9kZWwuZGFydCc7CgpjbGFzcyBOb3RpZmljYXRpb25TY3JlZW4gZXh0ZW5kcyBTdGF0ZWZ1bFdpZGdldCB7CiAgY29uc3QgTm90aWZpY2F0aW9uU2NyZWVuKHtLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwoKICBAb3ZlcnJpZGUKICBfTm90aWZpY2F0aW9uU2NyZWVuU3RhdGUgY3JlYXRlU3RhdGUoKSA9PiBfTm90aWZpY2F0aW9uU2NyZWVuU3RhdGUoKTsKfQoKY2xhc3MgX05vdGlmaWNhdGlvblNjcmVlblN0YXRlIGV4dGVuZHMgU3RhdGU8Tm90aWZpY2F0aW9uU2NyZWVuPiB7CiAgZmluYWwgTGlzdDxQdXNoTm90aWZpY2F0aW9uTW9kZWw+IF9ub3RpZmljYXRpb25zID0gW107CiAgU3RyaW5nPyBfZmNtVG9rZW47CgogIEBvdmVycmlkZQogIHZvaWQgaW5pdFN0YXRlKCkgewogICAgc3VwZXIuaW5pdFN0YXRlKCk7CiAgICBfbG9hZEZDTVRva2VuKCk7CiAgICAKICAgIC8vIExpc3RlbiBmb3IgbmV3IG5vdGlmaWNhdGlvbnMKICAgIG5vdGlmaWNhdGlvbkhhbmRsZXIuYWRkT25Ob3RpZmljYXRpb25SZWNlaXZlZExpc3RlbmVyKF9vbk5vdGlmaWNhdGlvblJlY2VpdmVkKTsKICAgIAogICAgLy8gTGlzdGVuIGZvciBub3RpZmljYXRpb24gdGFwcwogICAgbm90aWZpY2F0aW9uSGFuZGxlci5hZGRPbk5vdGlmaWNhdGlvblRhcExpc3RlbmVyKF9vbk5vdGlmaWNhdGlvblRhcCk7CiAgfQoKICBAb3ZlcnJpZGUKICB2b2lkIGRpc3Bvc2UoKSB7CiAgICAvLyBSZW1vdmUgbGlzdGVuZXJzIHdoZW4gc2NyZWVuIGlzIGRpc3Bvc2VkCiAgICBub3RpZmljYXRpb25IYW5kbGVyLnJlbW92ZU9uTm90aWZpY2F0aW9uUmVjZWl2ZWRMaXN0ZW5lcihfb25Ob3RpZmljYXRpb25SZWNlaXZlZCk7CiAgICBub3RpZmljYXRpb25IYW5kbGVyLnJlbW92ZU9uTm90aWZpY2F0aW9uVGFwTGlzdGVuZXIoX29uTm90aWZpY2F0aW9uVGFwKTsKICAgIHN1cGVyLmRpc3Bvc2UoKTsKICB9CiAgCiAgRnV0dXJlPHZvaWQ+IF9sb2FkRkNNVG9rZW4oKSBhc3luYyB7CiAgICBmaW5hbCB0b2tlbiA9IGF3YWl0IG5vdGlmaWNhdGlvbkhhbmRsZXIuZ2V0RkNNVG9rZW4oKTsKICAgIHNldFN0YXRlKCgpIHsKICAgICAgX2ZjbVRva2VuID0gdG9rZW47CiAgICB9KTsKICB9CiAgCiAgdm9pZCBfb25Ob3RpZmljYXRpb25SZWNlaXZlZChQdXNoTm90aWZpY2F0aW9uTW9kZWwgbm90aWZpY2F0aW9uKSB7CiAgICBzZXRTdGF0ZSgoKSB7CiAgICAgIF9ub3RpZmljYXRpb25zLmFkZChub3RpZmljYXRpb24pOwogICAgfSk7CiAgfQogIAogIHZvaWQgX29uTm90aWZpY2F0aW9uVGFwKFN0cmluZz8gcGF5bG9hZCkgewogICAgaWYgKHBheWxvYWQgIT0gbnVsbCkgewogICAgICB0cnkgewogICAgICAgIGZpbmFsIGRhdGEgPSBqc29uLmRlY29kZShwYXlsb2FkKTsKICAgICAgICBzaG93RGlhbG9nKAogICAgICAgICAgY29udGV4dDogY29udGV4dCwKICAgICAgICAgIGJ1aWxkZXI6IChjb250ZXh0KSA9PiBBbGVydERpYWxvZygKICAgICAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ05vdGlmaWNhdGlvbiBQYXlsb2FkJyksCiAgICAgICAgICAgIGNvbnRlbnQ6IFRleHQoanNvbi5lbmNvZGUoZGF0YSkpLAogICAgICAgICAgICBhY3Rpb25zOiBbCiAgICAgICAgICAgICAgVGV4dEJ1dHRvbigKICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgPT4gTmF2aWdhdG9yLnBvcChjb250ZXh0KSwKICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdDbG9zZScpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0sCiAgICAgICAgICApLAogICAgICAgICk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBkZWJ1Z1ByaW50KCdFcnJvciBwYXJzaW5nIHBheWxvYWQ6IFwkZScpOwogICAgICB9CiAgICB9CiAgfQogIAogIEZ1dHVyZTx2b2lkPiBfc2hvd0xvY2FsTm90aWZpY2F0aW9uKCkgYXN5bmMgewogICAgZmluYWwgbm90aWZpY2F0aW9uID0gUHVzaE5vdGlmaWNhdGlvbk1vZGVsKAogICAgICB0aXRsZTogJ1Rlc3QgTm90aWZpY2F0aW9uJywKICAgICAgYm9keTogJ1RoaXMgaXMgYSB0ZXN0IGxvY2FsIG5vdGlmaWNhdGlvbiBmcm9tIHRoZSBhcHAnLAogICAgICBwYXlsb2FkOiBqc29uLmVuY29kZSh7J3R5cGUnOiAndGVzdCcsICd0aW1lJzogRGF0ZVRpbWUubm93KCkudG9TdHJpbmcoKX0pLAogICAgKTsKICAgIAogICAgYXdhaXQgbm90aWZpY2F0aW9uSGFuZGxlci5zaG93TG9jYWxOb3RpZmljYXRpb24obm90aWZpY2F0aW9uKTsKICB9CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICBhcHBCYXI6IEFwcEJhcigKICAgICAgICB0aXRsZTogY29uc3QgVGV4dCgnTm90aWZpY2F0aW9ucycpLAogICAgICApLAogICAgICBib2R5OiBDb2x1bW4oCiAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgIC8vIEZDTSBUb2tlbiBkaXNwbGF5CiAgICAgICAgICBQYWRkaW5nKAogICAgICAgICAgICBwYWRkaW5nOiBjb25zdCBFZGdlSW5zZXRzLmFsbCgxNi4wKSwKICAgICAgICAgICAgY2hpbGQ6IENvbHVtbigKICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5zdGFydCwKICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgY29uc3QgVGV4dCgKICAgICAgICAgICAgICAgICAgJ0ZDTSBUb2tlbjonLAogICAgICAgICAgICAgICAgICBzdHlsZTogVGV4dFN0eWxlKGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goaGVpZ2h0OiA4KSwKICAgICAgICAgICAgICAgIENvbnRhaW5lcigKICAgICAgICAgICAgICAgICAgcGFkZGluZzogY29uc3QgRWRnZUluc2V0cy5hbGwoOCksCiAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IEJveERlY29yYXRpb24oCiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5WzIwMF0sCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuY2lyY3VsYXIoNCksCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIGNoaWxkOiBUZXh0KAogICAgICAgICAgICAgICAgICAgIF9mY21Ub2tlbiA/PyAnTG9hZGluZyB0b2tlbi4uLicsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGNvbnN0IFRleHRTdHlsZShmb250U2l6ZTogMTIpLAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGlmIChfZmNtVG9rZW4gIT0gbnVsbCkKICAgICAgICAgICAgICAgICAgQWxpZ24oCiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyUmlnaHQsCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IFRleHRCdXR0b24oCiAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29weSB0byBjbGlwYm9hcmQgZnVuY3Rpb25hbGl0eSB3b3VsZCBnbyBoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigKICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBTbmFja0Jhcihjb250ZW50OiBUZXh0KCdUb2tlbiBjb3BpZWQgdG8gY2xpcGJvYXJkJykpLAogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdDb3B5JyksCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIAogICAgICAgICAgY29uc3QgRGl2aWRlcigpLAogICAgICAgICAgCiAgICAgICAgICAvLyBOb3RpZmljYXRpb24gbGlzdAogICAgICAgICAgRXhwYW5kZWQoCiAgICAgICAgICAgIGNoaWxkOiBfbm90aWZpY2F0aW9ucy5pc0VtcHR5CiAgICAgICAgICAgICAgICA/IGNvbnN0IENlbnRlcigKICAgICAgICAgICAgICAgICAgICBjaGlsZDogVGV4dCgnTm8gbm90aWZpY2F0aW9ucyB5ZXQnKSwKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgOiBMaXN0Vmlldy5idWlsZGVyKAogICAgICAgICAgICAgICAgICAgIGl0ZW1Db3VudDogX25vdGlmaWNhdGlvbnMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIGl0ZW1CdWlsZGVyOiAoY29udGV4dCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgIGZpbmFsIG5vdGlmaWNhdGlvbiA9IF9ub3RpZmljYXRpb25zW19ub3RpZmljYXRpb25zLmxlbmd0aCAtIDEgLSBpbmRleF07CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGlzdFRpbGUoCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBUZXh0KG5vdGlmaWNhdGlvbi50aXRsZSksCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiBUZXh0KG5vdGlmaWNhdGlvbi5ib2R5KSwKICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IGNvbnN0IEljb24oSWNvbnMuYXJyb3dfZm9yd2FyZF9pb3MsIHNpemU6IDE2KSwKICAgICAgICAgICAgICAgICAgICAgICAgb25UYXA6ICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLnBheWxvYWQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX29uTm90aWZpY2F0aW9uVGFwKG5vdGlmaWNhdGlvbi5wYXlsb2FkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgIF0sCiAgICAgICksCiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBGbG9hdGluZ0FjdGlvbkJ1dHRvbigKICAgICAgICBvblByZXNzZWQ6IF9zaG93TG9jYWxOb3RpZmljYXRpb24sCiAgICAgICAgdG9vbHRpcDogJ1NlbmQgdGVzdCBub3RpZmljYXRpb24nLAogICAgICAgIGNoaWxkOiBjb25zdCBJY29uKEljb25zLm5vdGlmaWNhdGlvbl9hZGQpLAogICAgICApLAogICAgKTsKICB9Cn0KJycnOwoKICBmaW5hbCBmaWxlID0gRmlsZShmaWxlUGF0aCk7CiAgZmlsZS53cml0ZUFzU3RyaW5nU3luYyhjb250ZW50KTsKICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGVkIGZpbGU6ICRmaWxlUGF0aCcpOwp9CgovLy8gVXBkYXRlcyBwdWJzcGVjLnlhbWwgdG8gYWRkIEZpcmViYXNlIGRlcGVuZGVuY2llcwp2b2lkIF9hZGRGaXJlYmFzZURlcGVuZGVuY2llcyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICBmaW5hbCBwdWJzcGVjRmlsZSA9IEZpbGUoJyRwcm9qZWN0TmFtZS9wdWJzcGVjLnlhbWwnKTsKICBpZiAoIXB1YnNwZWNGaWxlLmV4aXN0c1N5bmMoKSkgewogICAgY29udGV4dC5sb2dnZXIKICAgICAgICAud2FybigncHVic3BlYy55YW1sIG5vdCBmb3VuZCwgc2tpcHBpbmcgYWRkaW5nIEZpcmViYXNlIGRlcGVuZGVuY2llcycpOwogICAgcmV0dXJuOwogIH0KCiAgU3RyaW5nIGNvbnRlbnQgPSBwdWJzcGVjRmlsZS5yZWFkQXNTdHJpbmdTeW5jKCk7CiAgYm9vbCBtb2RpZmllZCA9IGZhbHNlOwoKICAvLyBBZGQgZGVwZW5kZW5jaWVzIHRoYXQgYXJlIG1pc3NpbmcKICBMaXN0PFN0cmluZz4gbWlzc2luZ0RlcGVuZGVuY2llcyA9IFtdOwogIGlmICghY29udGVudC5jb250YWlucygnZmlyZWJhc2VfY29yZTonKSkKICAgIG1pc3NpbmdEZXBlbmRlbmNpZXMuYWRkKCdmaXJlYmFzZV9jb3JlOiBeMy4xMC4wJyk7CiAgaWYgKCFjb250ZW50LmNvbnRhaW5zKCdmaXJlYmFzZV9tZXNzYWdpbmc6JykpCiAgICBtaXNzaW5nRGVwZW5kZW5jaWVzLmFkZCgnZmlyZWJhc2VfbWVzc2FnaW5nOiBeMTUuMS42Jyk7CiAgaWYgKCFjb250ZW50LmNvbnRhaW5zKCdmbHV0dGVyX2xvY2FsX25vdGlmaWNhdGlvbnM6JykpCiAgICBtaXNzaW5nRGVwZW5kZW5jaWVzLmFkZCgnZmx1dHRlcl9sb2NhbF9ub3RpZmljYXRpb25zOiBeMTguMC4wJyk7CgogIGlmIChtaXNzaW5nRGVwZW5kZW5jaWVzLmlzTm90RW1wdHkpIHsKICAgIC8vIEZpbmQgdGhlIHBvc2l0aW9uIHRvIGluc2VydCB0aGUgZGVwZW5kZW5jaWVzCiAgICBmaW5hbCBzZGtEZXBJbmRleCA9IGNvbnRlbnQuaW5kZXhPZignc2RrOiBmbHV0dGVyJyk7CiAgICBpZiAoc2RrRGVwSW5kZXggIT0gLTEpIHsKICAgICAgZmluYWwgaW5zZXJ0UG9pbnQgPSBjb250ZW50LmluZGV4T2YoJ1xuJywgc2RrRGVwSW5kZXgpICsgMTsKCiAgICAgIGZpbmFsIGZpcmViYXNlRGVwZW5kZW5jaWVzID0KICAgICAgICAgICdcbiAgIyBGaXJlYmFzZSBkZXBlbmRlbmNpZXMgZm9yIHB1c2ggbm90aWZpY2F0aW9uc1xuICAnICsKICAgICAgICAgICAgICBtaXNzaW5nRGVwZW5kZW5jaWVzLmpvaW4oJ1xuICAnKSArCiAgICAgICAgICAgICAgJ1xuJzsKCiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBpbnNlcnRQb2ludCkgKwogICAgICAgICAgZmlyZWJhc2VEZXBlbmRlbmNpZXMgKwogICAgICAgICAgY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9pbnQpOwoKICAgICAgbW9kaWZpZWQgPSB0cnVlOwogICAgfQogIH0KCiAgaWYgKG1vZGlmaWVkKSB7CiAgICBwdWJzcGVjRmlsZS53cml0ZUFzU3RyaW5nU3luYyhjb250ZW50KTsKICAgIGNvbnRleHQubG9nZ2VyCiAgICAgICAgLnN1Y2Nlc3MoJ0FkZGVkIG1pc3NpbmcgRmlyZWJhc2UgZGVwZW5kZW5jaWVzIHRvIHB1YnNwZWMueWFtbCcpOwogIH0gZWxzZSB7CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdGaXJlYmFzZSBkZXBlbmRlbmNpZXMgYWxyZWFkeSBleGlzdCBpbiBwdWJzcGVjLnlhbWwnKTsKICB9Cn0KCi8vLyBVcGRhdGVzIEFuZHJvaWQgYW5kIGlPUyBjb25maWd1cmF0aW9ucyBmb3IgcHVzaCBub3RpZmljYXRpb25zCnZvaWQgX2NvbmZpZ3VyZU5vdGlmaWNhdGlvbnNGb3JQbGF0Zm9ybXMoCiAgICBIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICAvLyBVcGRhdGUgaU9TIEluZm8ucGxpc3QKICBfdXBkYXRlSU9TSW5mb1BsaXN0KGNvbnRleHQsIHByb2plY3ROYW1lKTsKICAvLyBVcGRhdGUgQW5kcm9pZCBtYW5pZmVzdAogIF91cGRhdGVBbmRyb2lkTWFuaWZlc3QoY29udGV4dCwgcHJvamVjdE5hbWUpOwoKICAvLyBVcGRhdGUgaU9TIEFwcERlbGVnYXRlCiAgX3VwZGF0ZUlPU0FwcERlbGVnYXRlKGNvbnRleHQsIHByb2plY3ROYW1lKTsKCiAgLy8gQWRkIE5TVXNlclRyYWNraW5nVXNhZ2VEZXNjcmlwdGlvbiB0byBJbmZvLnBsaXN0IChhbHJlYWR5IGhhbmRsZWQgaW4gX2dlbmVyYXRlSW5mb1BsaXN0RmlsZSkKICBjb250ZXh0LmxvZ2dlci5zdWNjZXNzKCdDb25maWd1cmVkIHB1c2ggbm90aWZpY2F0aW9ucyBmb3IgYm90aCBwbGF0Zm9ybXMnKTsKfQoKdm9pZCBfdXBkYXRlSU9TSW5mb1BsaXN0KEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIGluZm9QbGlzdFBhdGggPSAnJHByb2plY3ROYW1lL2lvcy9SdW5uZXIvSW5mby5wbGlzdCc7CiAgZmluYWwgaW5mb1BsaXN0RmlsZSA9IEZpbGUoaW5mb1BsaXN0UGF0aCk7CgogIHRyeSB7CiAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0cwogICAgaWYgKCFpbmZvUGxpc3RGaWxlLmV4aXN0c1N5bmMoKSkgewogICAgICBjb250ZXh0LmxvZ2dlci53YXJuKCdJbmZvLnBsaXN0IG5vdCBmb3VuZCBhdCAkaW5mb1BsaXN0UGF0aCcpOwogICAgICByZXR1cm47CiAgICB9CgogICAgU3RyaW5nIGNvbnRlbnQgPSBpbmZvUGxpc3RGaWxlLnJlYWRBc1N0cmluZ1N5bmMoKTsKICAgIGJvb2wgbW9kaWZpZWQgPSBmYWxzZTsKCiAgICAvLyBBZGQgVUlCYWNrZ3JvdW5kTW9kZXMgaWYgbm90IGFscmVhZHkgcHJlc2VudAogICAgaWYgKCFjb250ZW50LmNvbnRhaW5zKCc8a2V5PlVJQmFja2dyb3VuZE1vZGVzPC9rZXk+JykpIHsKICAgICAgLy8gRmluZCB0aGUgcG9zaXRpb24gdG8gaW5zZXJ0IC0gYmVmb3JlIHRoZSBjbG9zaW5nIGRpY3QgdGFnCiAgICAgIGZpbmFsIGluc2VydFBvaW50ID0gY29udGVudC5sYXN0SW5kZXhPZignPC9kaWN0PicpOwogICAgICBpZiAoaW5zZXJ0UG9pbnQgIT0gLTEpIHsKICAgICAgICBmaW5hbCBiYWNrZ3JvdW5kTW9kZXMgPSAnJycKICA8a2V5PlVJQmFja2dyb3VuZE1vZGVzPC9rZXk+CiAgPGFycmF5PgogICAgPHN0cmluZz5mZXRjaDwvc3RyaW5nPgogICAgPHN0cmluZz5wcm9jZXNzaW5nPC9zdHJpbmc+CiAgICA8c3RyaW5nPnJlbW90ZS1ub3RpZmljYXRpb248L3N0cmluZz4KICA8L2FycmF5PgonJyc7CiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvaW50KSArCiAgICAgICAgICAgIGJhY2tncm91bmRNb2RlcyArCiAgICAgICAgICAgIGNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvaW50KTsKICAgICAgICBtb2RpZmllZCA9IHRydWU7CiAgICAgIH0KICAgIH0KCiAgICAvLyAgQWRkIEZpcmViYXNlQXBwRGVsZWdhdGVQcm94eUVuYWJsZWQgaWYgbm90IGFscmVhZHkgcHJlc2VudAogICAgaWYgKCFjb250ZW50LmNvbnRhaW5zKCc8a2V5PkZpcmViYXNlQXBwRGVsZWdhdGVQcm94eUVuYWJsZWQ8L2tleT4nKSkgewogICAgICAvLyBGaW5kIHRoZSBwb3NpdGlvbiB0byBpbnNlcnQgLSBiZWZvcmUgdGhlIGNsb3NpbmcgZGljdCB0YWcKICAgICAgZmluYWwgaW5zZXJ0UG9pbnQgPSBjb250ZW50Lmxhc3RJbmRleE9mKCc8L2RpY3Q+Jyk7CiAgICAgIGlmIChpbnNlcnRQb2ludCAhPSAtMSkgewogICAgICAgIGZpbmFsIGZpcmViYXNlUHJveHlTZXR0aW5nID0gJycnCiAgPGtleT5GaXJlYmFzZUFwcERlbGVnYXRlUHJveHlFbmFibGVkPC9rZXk+CiAgPGZhbHNlLz4KJycnOwogICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBpbnNlcnRQb2ludCkgKwogICAgICAgICAgICBmaXJlYmFzZVByb3h5U2V0dGluZyArCiAgICAgICAgICAgIGNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvaW50KTsKICAgICAgICBtb2RpZmllZCA9IHRydWU7CiAgICAgIH0KICAgIH0KCiAgICAvLyBBZGQgTlNVc2VyVHJhY2tpbmdVc2FnZURlc2NyaXB0aW9uIGlmIG5vdCBhbHJlYWR5IHByZXNlbnQKICAgIGlmICghY29udGVudC5jb250YWlucygnPGtleT5OU1VzZXJUcmFja2luZ1VzYWdlRGVzY3JpcHRpb248L2tleT4nKSkgewogICAgICAvLyBGaW5kIHRoZSBwb3NpdGlvbiB0byBpbnNlcnQgLSBiZWZvcmUgdGhlIGNsb3NpbmcgZGljdCB0YWcKICAgICAgZmluYWwgaW5zZXJ0UG9pbnQgPSBjb250ZW50Lmxhc3RJbmRleE9mKCc8L2RpY3Q+Jyk7CiAgICAgIGlmIChpbnNlcnRQb2ludCAhPSAtMSkgewogICAgICAgIGZpbmFsIHVzZXJUcmFja2luZ0Rlc2NyaXB0aW9uID0gJycnCiAgPGtleT5OU1VzZXJUcmFja2luZ1VzYWdlRGVzY3JpcHRpb248L2tleT4KICA8c3RyaW5nPlRoaXMgYXBwIHVzZXMgcHVzaCBub3RpZmljYXRpb25zIHRvIGVuaGFuY2UgdXNlciBleHBlcmllbmNlLjwvc3RyaW5nPgonJyc7CiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvaW50KSArCiAgICAgICAgICAgIHVzZXJUcmFja2luZ0Rlc2NyaXB0aW9uICsKICAgICAgICAgICAgY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9pbnQpOwogICAgICAgIG1vZGlmaWVkID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIC8vIEFkZCBGaXJlYmFzZU1lc3NhZ2luZ0F1dG9Jbml0RW5hYmxlZCBpZiBub3QgYWxyZWFkeSBwcmVzZW50CiAgICBpZiAoIWNvbnRlbnQuY29udGFpbnMoJzxrZXk+RmlyZWJhc2VNZXNzYWdpbmdBdXRvSW5pdEVuYWJsZWQ8L2tleT4nKSkgewogICAgICAvLyBGaW5kIHRoZSBwb3NpdGlvbiB0byBpbnNlcnQgLSBiZWZvcmUgdGhlIGNsb3NpbmcgZGljdCB0YWcKICAgICAgZmluYWwgaW5zZXJ0UG9pbnQgPSBjb250ZW50Lmxhc3RJbmRleE9mKCc8L2RpY3Q+Jyk7CiAgICAgIGlmIChpbnNlcnRQb2ludCAhPSAtMSkgewogICAgICAgIGZpbmFsIGZpcmViYXNlTWVzc2FnaW5nU2V0dGluZyA9ICcnJwogIDxrZXk+RmlyZWJhc2VNZXNzYWdpbmdBdXRvSW5pdEVuYWJsZWQ8L2tleT4KICA8ZmFsc2UvPgonJyc7CiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvaW50KSArCiAgICAgICAgICAgIGZpcmViYXNlTWVzc2FnaW5nU2V0dGluZyArCiAgICAgICAgICAgIGNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvaW50KTsKICAgICAgICBtb2RpZmllZCA9IHRydWU7CiAgICAgIH0KICAgIH0KCiAgICAvLyBXcml0ZSBiYWNrIG9ubHkgaWYgbW9kaWZpY2F0aW9ucyB3ZXJlIG1hZGUKICAgIGlmIChtb2RpZmllZCkgewogICAgICBpbmZvUGxpc3RGaWxlLndyaXRlQXNTdHJpbmdTeW5jKGNvbnRlbnQpOwogICAgICBjb250ZXh0LmxvZ2dlcgogICAgICAgICAgLnN1Y2Nlc3MoJ1VwZGF0ZWQgSW5mby5wbGlzdCB3aXRoIHJlcXVpcmVkIG5vdGlmaWNhdGlvbiBzZXR0aW5ncycpOwogICAgfSBlbHNlIHsKICAgICAgY29udGV4dC5sb2dnZXIKICAgICAgICAgIC5pbmZvKCdJbmZvLnBsaXN0IGFscmVhZHkgaGFzIHJlcXVpcmVkIG5vdGlmaWNhdGlvbiBzZXR0aW5ncycpOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgIGNvbnRleHQubG9nZ2VyLmVycignRmFpbGVkIHRvIHVwZGF0ZSBJbmZvLnBsaXN0OiAkZScpOwogIH0KfQoKdm9pZCBfdXBkYXRlQW5kcm9pZE1hbmlmZXN0KEhvb2tDb250ZXh0IGNvbnRleHQsIFN0cmluZyBwcm9qZWN0TmFtZSkgewogIGZpbmFsIG1hbmlmZXN0UGF0aCA9ICckcHJvamVjdE5hbWUvYW5kcm9pZC9hcHAvc3JjL21haW4vQW5kcm9pZE1hbmlmZXN0LnhtbCc7CiAgZmluYWwgbWFuaWZlc3RGaWxlID0gRmlsZShtYW5pZmVzdFBhdGgpOwoKICAvLyBDcmVhdGUgcGFyZW50IGRpcmVjdG9yaWVzIGlmIHRoZXkgZG9uJ3QgZXhpc3QKICBmaW5hbCBtYW5pZmVzdERpciA9IERpcmVjdG9yeSgnJHByb2plY3ROYW1lL2FuZHJvaWQvYXBwL3NyYy9tYWluJyk7CiAgaWYgKCFtYW5pZmVzdERpci5leGlzdHNTeW5jKCkpIHsKICAgIG1hbmlmZXN0RGlyLmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICB9CgogIGJvb2wgZmlsZUV4aXN0cyA9IG1hbmlmZXN0RmlsZS5leGlzdHNTeW5jKCk7CiAgU3RyaW5nIG1hbmlmZXN0Q29udGVudCA9IGZpbGVFeGlzdHMKICAgICAgPyBtYW5pZmVzdEZpbGUucmVhZEFzU3RyaW5nU3luYygpCiAgICAgIDogJycnPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG1hbmlmZXN0IHhtbG5zOmFuZHJvaWQ9Imh0dHA6Ly9zY2hlbWFzLmFuZHJvaWQuY29tL2Fway9yZXMvYW5kcm9pZCI+CiAgICA8YXBwbGljYXRpb24KICAgICAgICBhbmRyb2lkOmxhYmVsPSJAc3RyaW5nL2FwcF9uYW1lIgogICAgICAgIGFuZHJvaWQ6bmFtZT0iXCR7YXBwbGljYXRpb25OYW1lfSIKICAgICAgICBhbmRyb2lkOmljb249IkBtaXBtYXAvaWNfbGF1bmNoZXIiPgogICAgICAgIDwhLS0gQWN0aXZpdHkgYW5kIG90aGVyIGVsZW1lbnRzIHdpbGwgYmUgaGVyZSAtLT4KICAgICAgICA8bWV0YS1kYXRhCiAgICAgICAgICAgIGFuZHJvaWQ6bmFtZT0iZmx1dHRlckVtYmVkZGluZyIKICAgICAgICAgICAgYW5kcm9pZDp2YWx1ZT0iMiIgLz4KICAgIDwvYXBwbGljYXRpb24+CjwvbWFuaWZlc3Q+CicnJzsKCiAgYm9vbCBtb2RpZmllZCA9IGZhbHNlOwoKICAvLyBBZGQgbm90aWZpY2F0aW9uIHBlcm1pc3Npb24gaWYgbm90IGFscmVhZHkgcHJlc2VudAogIGlmICghbWFuaWZlc3RDb250ZW50LmNvbnRhaW5zKAogICAgICAnPHVzZXMtcGVybWlzc2lvbiBhbmRyb2lkOm5hbWU9ImFuZHJvaWQucGVybWlzc2lvbi5QT1NUX05PVElGSUNBVElPTlMiLz4nKSkgewogICAgLy8gQWRkIHBlcm1pc3Npb24KICAgIGlmIChtYW5pZmVzdENvbnRlbnQuY29udGFpbnMoJzxtYW5pZmVzdCcpKSB7CiAgICAgIGZpbmFsIGludCBtYW5pZmVzdFRhZ0VuZCA9CiAgICAgICAgICBtYW5pZmVzdENvbnRlbnQuaW5kZXhPZignPicsIG1hbmlmZXN0Q29udGVudC5pbmRleE9mKCc8bWFuaWZlc3QnKSk7CiAgICAgIG1hbmlmZXN0Q29udGVudCA9IG1hbmlmZXN0Q29udGVudC5zdWJzdHJpbmcoMCwgbWFuaWZlc3RUYWdFbmQgKyAxKSArCiAgICAgICAgICAnXG4gICAgPHVzZXMtcGVybWlzc2lvbiBhbmRyb2lkOm5hbWU9ImFuZHJvaWQucGVybWlzc2lvbi5QT1NUX05PVElGSUNBVElPTlMiLz4nICsKICAgICAgICAgIG1hbmlmZXN0Q29udGVudC5zdWJzdHJpbmcobWFuaWZlc3RUYWdFbmQgKyAxKTsKICAgICAgbW9kaWZpZWQgPSB0cnVlOwogICAgfQogIH0KCiAgLy8gQWRkIHJlY2VpdmVycyBpZiBuZWVkZWQKICBpZiAoIW1hbmlmZXN0Q29udGVudC5jb250YWlucygKICAgICAgJ2NvbS5kZXh0ZXJvdXMuZmx1dHRlcmxvY2Fsbm90aWZpY2F0aW9ucy5yZWNlaXZlcnMuTm90aWZpY2F0aW9uUmVjZWl2ZXInKSkgewogICAgZmluYWwgaW50IGFwcGxpY2F0aW9uRW5kSW5kZXggPQogICAgICAgIG1hbmlmZXN0Q29udGVudC5sYXN0SW5kZXhPZignPC9hcHBsaWNhdGlvbj4nKTsKICAgIGlmIChhcHBsaWNhdGlvbkVuZEluZGV4ICE9IC0xKSB7CiAgICAgIGZpbmFsIFN0cmluZyByZWNlaXZlcnNDb250ZW50ID0gJycnCiAgICAgICAgPHJlY2VpdmVyIGFuZHJvaWQ6bmFtZT0iY29tLmRleHRlcm91cy5mbHV0dGVybG9jYWxub3RpZmljYXRpb25zLnJlY2VpdmVycy5Ob3RpZmljYXRpb25SZWNlaXZlciIgYW5kcm9pZDpleHBvcnRlZD0idHJ1ZSIvPgogICAgICAgIDxyZWNlaXZlciBhbmRyb2lkOm5hbWU9ImNvbS5kZXh0ZXJvdXMuZmx1dHRlcmxvY2Fsbm90aWZpY2F0aW9ucy5yZWNlaXZlcnMuU2NoZWR1bGVkTm90aWZpY2F0aW9uUmVjZWl2ZXIiIGFuZHJvaWQ6ZXhwb3J0ZWQ9InRydWUiLz4KICAgICAgICA8cmVjZWl2ZXIgYW5kcm9pZDpuYW1lPSJjb20uZGV4dGVyb3VzLmZsdXR0ZXJsb2NhbG5vdGlmaWNhdGlvbnMucmVjZWl2ZXJzLkFjdGlvblJlY2VpdmVyIiBhbmRyb2lkOmV4cG9ydGVkPSJ0cnVlIi8+CicnJzsKICAgICAgbWFuaWZlc3RDb250ZW50ID0gbWFuaWZlc3RDb250ZW50LnN1YnN0cmluZygwLCBhcHBsaWNhdGlvbkVuZEluZGV4KSArCiAgICAgICAgICByZWNlaXZlcnNDb250ZW50ICsKICAgICAgICAgIG1hbmlmZXN0Q29udGVudC5zdWJzdHJpbmcoYXBwbGljYXRpb25FbmRJbmRleCk7CiAgICAgIG1vZGlmaWVkID0gdHJ1ZTsKICAgIH0KICB9CgogIC8vIE9ubHkgd3JpdGUgaWYgY29udGVudCB3YXMgbW9kaWZpZWQgb3IgZmlsZSBkaWRuJ3QgZXhpc3QKICBpZiAobW9kaWZpZWQgfHwgIWZpbGVFeGlzdHMpIHsKICAgIG1hbmlmZXN0RmlsZS53cml0ZUFzU3RyaW5nU3luYyhtYW5pZmVzdENvbnRlbnQpOwogICAgaWYgKCFmaWxlRXhpc3RzKSB7CiAgICAgIGNvbnRleHQubG9nZ2VyCiAgICAgICAgICAuaW5mbygnQ3JlYXRlZCBBbmRyb2lkTWFuaWZlc3QueG1sIHdpdGggbm90aWZpY2F0aW9uIHBlcm1pc3Npb25zJyk7CiAgICB9IGVsc2UgewogICAgICBjb250ZXh0LmxvZ2dlcgogICAgICAgICAgLmluZm8oJ1VwZGF0ZWQgQW5kcm9pZE1hbmlmZXN0LnhtbCB3aXRoIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9ucycpOwogICAgfQogIH0gZWxzZSB7CiAgICBjb250ZXh0LmxvZ2dlcgogICAgICAgIC5pbmZvKCdBbmRyb2lkTWFuaWZlc3QueG1sIGFscmVhZHkgaGFzIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9ucycpOwogIH0KfQoKLy8vIFVwZGF0ZXMgaU9TIEFwcERlbGVnYXRlLnN3aWZ0IHdpdGggcmVxdWlyZWQgY29kZSBmb3Igbm90aWZpY2F0aW9ucwp2b2lkIF91cGRhdGVJT1NBcHBEZWxlZ2F0ZShIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICBmaW5hbCBhcHBEZWxlZ2F0ZVBhdGggPSAnJHByb2plY3ROYW1lL2lvcy9SdW5uZXIvQXBwRGVsZWdhdGUuc3dpZnQnOwogIGZpbmFsIGFwcERlbGVnYXRlRmlsZSA9IEZpbGUoYXBwRGVsZWdhdGVQYXRoKTsKCiAgdHJ5IHsKICAgIC8vIENyZWF0ZSBwYXJlbnQgZGlyZWN0b3JpZXMgaWYgdGhleSBkb24ndCBleGlzdAogICAgZmluYWwgYXBwRGVsZWdhdGVEaXIgPSBEaXJlY3RvcnkoJyRwcm9qZWN0TmFtZS9pb3MvUnVubmVyJyk7CiAgICBpZiAoIWFwcERlbGVnYXRlRGlyLmV4aXN0c1N5bmMoKSkgewogICAgICBhcHBEZWxlZ2F0ZURpci5jcmVhdGVTeW5jKHJlY3Vyc2l2ZTogdHJ1ZSk7CiAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NyZWF0ZWQgZGlyZWN0b3J5OiBpb3MvUnVubmVyJyk7CiAgICB9CgogICAgLy8gRGVmaW5lIHRoZSBub3RpZmljYXRpb24tZW5hYmxlZCBBcHBEZWxlZ2F0ZSBjb250ZW50CiAgICBmaW5hbCBhcHBEZWxlZ2F0ZUNvbnRlbnQgPSAnJydpbXBvcnQgRmx1dHRlcgppbXBvcnQgVUlLaXQKaW1wb3J0IGZsdXR0ZXJfbG9jYWxfbm90aWZpY2F0aW9ucwoKQG1haW4KQG9iamMgY2xhc3MgQXBwRGVsZWdhdGU6IEZsdXR0ZXJBcHBEZWxlZ2F0ZSB7CiAgb3ZlcnJpZGUgZnVuYyBhcHBsaWNhdGlvbigKICAgIF8gYXBwbGljYXRpb246IFVJQXBwbGljYXRpb24sCiAgICBkaWRGaW5pc2hMYXVuY2hpbmdXaXRoT3B0aW9ucyBsYXVuY2hPcHRpb25zOiBbVUlBcHBsaWNhdGlvbi5MYXVuY2hPcHRpb25zS2V5OiBBbnldPwogICkgLT4gQm9vbCB7CiAgICBGbHV0dGVyTG9jYWxOb3RpZmljYXRpb25zUGx1Z2luLnNldFBsdWdpblJlZ2lzdHJhbnRDYWxsYmFjayB7IChyZWdpc3RyeSkgaW4KICAgICAgR2VuZXJhdGVkUGx1Z2luUmVnaXN0cmFudC5yZWdpc3Rlcih3aXRoOiByZWdpc3RyeSkKICAgIH0KICAgIAogICAgaWYgI2F2YWlsYWJsZShpT1MgMTAuMCwgKikgewogICAgICBVTlVzZXJOb3RpZmljYXRpb25DZW50ZXIuY3VycmVudCgpLmRlbGVnYXRlID0gc2VsZiBhcyBVTlVzZXJOb3RpZmljYXRpb25DZW50ZXJEZWxlZ2F0ZQogICAgfQogICAgCiAgICBHZW5lcmF0ZWRQbHVnaW5SZWdpc3RyYW50LnJlZ2lzdGVyKHdpdGg6IHNlbGYpCiAgICByZXR1cm4gc3VwZXIuYXBwbGljYXRpb24oYXBwbGljYXRpb24sIGRpZEZpbmlzaExhdW5jaGluZ1dpdGhPcHRpb25zOiBsYXVuY2hPcHRpb25zKQogIH0KfQonJyc7CgogICAgLy8gQ2hlY2sgaWYgZmlsZSBleGlzdHMgYW5kIGhhbmRsZSBhcHByb3ByaWF0ZWx5CiAgICBpZiAoYXBwRGVsZWdhdGVGaWxlLmV4aXN0c1N5bmMoKSkgewogICAgICBmaW5hbCBleGlzdGluZ0NvbnRlbnQgPSBhcHBEZWxlZ2F0ZUZpbGUucmVhZEFzU3RyaW5nU3luYygpOwoKICAgICAgLy8gT25seSBvdmVyd3JpdGUgaWYgaXQgZG9lc24ndCBhbHJlYWR5IGhhdmUgbm90aWZpY2F0aW9uIGNvZGUKICAgICAgaWYgKCFleGlzdGluZ0NvbnRlbnQuY29udGFpbnMoJ2ZsdXR0ZXJfbG9jYWxfbm90aWZpY2F0aW9ucycpKSB7CiAgICAgICAgYXBwRGVsZWdhdGVGaWxlLndyaXRlQXNTdHJpbmdTeW5jKGFwcERlbGVnYXRlQ29udGVudCk7CiAgICAgICAgY29udGV4dC5sb2dnZXIKICAgICAgICAgICAgLmluZm8oJ1VwZGF0ZWQgaU9TIEFwcERlbGVnYXRlLnN3aWZ0IHdpdGggbm90aWZpY2F0aW9uIHN1cHBvcnQnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb250ZXh0LmxvZ2dlcgogICAgICAgICAgICAuaW5mbygnaU9TIEFwcERlbGVnYXRlLnN3aWZ0IGFscmVhZHkgaGFzIG5vdGlmaWNhdGlvbiBzdXBwb3J0Jyk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGFwcERlbGVnYXRlRmlsZS53cml0ZUFzU3RyaW5nU3luYyhhcHBEZWxlZ2F0ZUNvbnRlbnQpOwogICAgICBjb250ZXh0LmxvZ2dlcgogICAgICAgICAgLmluZm8oJ0NyZWF0ZWQgaU9TIEFwcERlbGVnYXRlLnN3aWZ0IHdpdGggbm90aWZpY2F0aW9uIHN1cHBvcnQnKTsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBjb250ZXh0LmxvZ2dlci5lcnIoJ0ZhaWxlZCB0byB1cGRhdGUgaU9TIEFwcERlbGVnYXRlLnN3aWZ0OiAkZScpOwogIH0KfQoKLy8vIFVwZGF0ZXMgbWFpbi5kYXJ0IHRvIGluaXRpYWxpemUgRmlyZWJhc2UgYW5kIEZDTQp2b2lkIF91cGRhdGVNYWluRm9yTm90aWZpY2F0aW9ucyhIb29rQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcHJvamVjdE5hbWUpIHsKICBmaW5hbCBtYWluRGFydEZpbGUgPSBGaWxlKCckcHJvamVjdE5hbWUvbGliL21haW4uZGFydCcpOwogIGlmICghbWFpbkRhcnRGaWxlLmV4aXN0c1N5bmMoKSkgewogICAgY29udGV4dC5sb2dnZXIKICAgICAgICAud2FybignbWFpbi5kYXJ0IG5vdCBmb3VuZCwgc2tpcHBpbmcgRmlyZWJhc2UgaW5pdGlhbGl6YXRpb24nKTsKICAgIHJldHVybjsKICB9CgogIFN0cmluZyBjb250ZW50ID0gbWFpbkRhcnRGaWxlLnJlYWRBc1N0cmluZ1N5bmMoKTsKICBib29sIG1vZGlmaWVkID0gZmFsc2U7CgogIC8vIEFkZCBpbXBvcnRzIGlmIG5vdCBhbHJlYWR5IHByZXNlbnQKICBpZiAoIWNvbnRlbnQuY29udGFpbnMoJ2ZpcmViYXNlX2NvcmUuZGFydCcpKSB7CiAgICBmaW5hbCBpbXBvcnRQYXR0ZXJuID0gUmVnRXhwKHInaW1wb3J0IC4qO1xuJyk7CiAgICBmaW5hbCBsYXN0SW1wb3J0TWF0Y2ggPSBpbXBvcnRQYXR0ZXJuLmFsbE1hdGNoZXMoY29udGVudCkubGFzdE9yTnVsbDsKCiAgICBpZiAobGFzdEltcG9ydE1hdGNoICE9IG51bGwpIHsKICAgICAgZmluYWwgaW5zZXJ0UG9zaXRpb24gPSBsYXN0SW1wb3J0TWF0Y2guZW5kOwogICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgaW5zZXJ0UG9zaXRpb24pICsKICAgICAgICAgICJpbXBvcnQgJ3BhY2thZ2U6ZmlyZWJhc2VfY29yZS9maXJlYmFzZV9jb3JlLmRhcnQnO1xuIiArCiAgICAgICAgICAiaW1wb3J0ICdwYWNrYWdlOiRwcm9qZWN0TmFtZS9jb3JlL25vdGlmaWNhdGlvbnMvbm90aWZpY2F0aW9uX2hhbmRsZXIuZGFydCc7XG4iICsKICAgICAgICAgIGNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvc2l0aW9uKTsKICAgICAgbW9kaWZpZWQgPSB0cnVlOwogICAgfQogIH0KCiAgLy8gQWRkIEZpcmViYXNlIGluaXRpYWxpemF0aW9uIGlmIG5vdCBhbHJlYWR5IHByZXNlbnQKICBpZiAoIWNvbnRlbnQuY29udGFpbnMoJ0ZpcmViYXNlLmluaXRpYWxpemVBcHAnKSkgewogICAgZmluYWwgbWFpbkZ1bmN0aW9uID0gY29udGVudC5pbmRleE9mKCd2b2lkIG1haW4oKSBhc3luYyB7Jyk7CiAgICBpZiAobWFpbkZ1bmN0aW9uICE9IC0xKSB7CiAgICAgIGZpbmFsIGluc2VydFBvc2l0aW9uID0gY29udGVudC5pbmRleE9mKCd7JywgbWFpbkZ1bmN0aW9uKSArIDE7CiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBpbnNlcnRQb3NpdGlvbikgKwogICAgICAgICAgIlxuICAvLyBJbml0aWFsaXplIEZpcmViYXNlXG4iICsKICAgICAgICAgICIgIGF3YWl0IEZpcmViYXNlLmluaXRpYWxpemVBcHAoKTtcblxuIiArCiAgICAgICAgICAiICAvLyBJbml0aWFsaXplIG5vdGlmaWNhdGlvbiBzZXJ2aWNlc1xuIiArCiAgICAgICAgICAiICBhd2FpdCBub3RpZmljYXRpb25IYW5kbGVyLmluaXRpYWxpemUoKTtcbiIgKwogICAgICAgICAgY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pOwogICAgICBtb2RpZmllZCA9IHRydWU7CiAgICB9CiAgfQoKICAvLyBPbmx5IHdyaXRlIGlmIGNvbnRlbnQgd2FzIG1vZGlmaWVkCiAgaWYgKG1vZGlmaWVkKSB7CiAgICBtYWluRGFydEZpbGUud3JpdGVBc1N0cmluZ1N5bmMoY29udGVudCk7CiAgICBjb250ZXh0LmxvZ2dlci5zdWNjZXNzKCdVcGRhdGVkIG1haW4uZGFydCB3aXRoIEZpcmViYXNlIGluaXRpYWxpemF0aW9uJyk7CiAgfSBlbHNlIHsKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ21haW4uZGFydCBhbHJlYWR5IGNvbnRhaW5zIEZpcmViYXNlIGluaXRpYWxpemF0aW9uJyk7CiAgfQp9",
      "type": "text",
    },
    {
      "path": "lib/redux_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/state_management_handler.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/state_management_observablity.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/theme_manager_generator.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "lib/utils.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "pre_gen.dart",
      "data":
          "",
      "type": "text",
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZTogZmx1dHRlcl9idW5ueV9jbGkKCmVudmlyb25tZW50OgogIHNkazogIl4zLjYuMCIKCmRlcGVuZGVuY2llczoKICBtYXNvbjogXjAuMS4wCg==",
      "type": "text",
    },
  ],
  "name": "bunny_cli_template",
  "description": "A generator for flutter bunny cli.",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0"},
  "readme": {
    "path": "README.md",
    "data": "IyBGbHV0dGVyIEJ1bm55IENMSSBUZW1wbGF0ZQ==",
    "type": "text",
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMCsxCgotIFRPRE86IERlc2NyaWJlIGluaXRpYWwgcmVsZWFzZS4K",
    "type": "text",
  },
  "license": {
    "path": "LICENSE",
    "data":
        "TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyNSBGbHV0dGVyIEJ1bm55IENMSSBUZW1wbGF0ZQoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQpvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAppbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQpTT0ZUV0FSRS4=",
    "type": "text",
  },
  "vars": {
    "project_name": {
      "type": "string",
      "description": "The project or app name",
      "default": "flutter_bunny",
      "prompt": "What is the project name?",
    },
    "bundle_identifier": {
      "type": "string",
      "description": "The bundle identifier",
      "default": "com.example.app",
      "prompt": "What is the bundle identifier?",
    },
    "architecture": {
      "type": "enum",
      "description": "The architecture pattern to use",
      "default": "Clean Architecture",
      "values": ["Clean Architecture", "MVVM", "MVC"],
    },
    "state_management": {
      "type": "enum",
      "description": "The state management solution to use",
      "default": "Provider",
      "values": ["Provider", "Riverpod", "Bloc", "GetX", "MobX", "Redux"],
    },
    "features": {
      "type": "list",
      "description": "Features to include in the application",
      "defaults": ["Authentication"],
      "values": ["Authentication", "User Profile", "Settings", "Dashboard"],
    },
    "modules": {
      "type": "list",
      "description": "Additional modules to include",
      "defaults": ["Network Layer"],
      "values": [
        "Network Layer",
        "Local Storage",
        "Localization",
        "Push Notification",
        "Theme Manager",
      ],
    },
  },
});
