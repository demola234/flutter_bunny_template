import 'dart:io';

import 'package:mason/mason.dart';

import 'utils.dart';

void createArchitectureStructure(
    HookContext context, String projectName, String architecture) {
  List<String> directories = [];

  switch (architecture) {
    case 'Clean Architecture':
      directories = [
        'lib/core',
        'lib/core/error',
        'lib/core/utils',
        'lib/infrastructure/injector',
        'lib/infrastructure/navigation',
      ];
      break;
    case 'MVVM':
      directories = [
        'lib/core',
        'lib/core/services',
        'lib/core/utils',
        'lib/shared',
        'lib/shared/widgets',
        'lib/shared/utils',
      ];
      break;
    case 'MVC':
      directories = [
        'lib/core',
        'lib/core/services',
        'lib/core/utils',
        'lib/shared',
        'lib/shared/widgets',
        'lib/shared/utils',
      ];
      break;
    case 'Feature-Driven':
      directories = [
        'lib/core',
        'lib/core/utils',
        'lib/core/services',
        'lib/shared/widgets',
      ];
      break;
    default:
      context.logger.warn('Unknown architecture: $architecture');
      return;
  }

  for (final dir in directories) {
    final directory = Directory('$projectName/$dir');
    if (!directory.existsSync()) {
      directory.createSync(recursive: true);
      context.logger.info('Created architecture directory: $dir');
    }
  }

  // Create architecture-specific files
  createArchitectureFiles(context, projectName, architecture);
}

void createArchitectureFiles(
    HookContext context, String projectName, String architecture) {
  switch (architecture) {
    case 'Clean Architecture':
      createCleanArchitectureFiles(context, projectName);
      break;
    case 'MVVM':
      createMVVMArchitectureFiles(context, projectName);
      break;
    case 'MVC':
      createMVCArchitectureFiles(context, projectName);
      break;
    case 'Feature-Driven':
      createFeatureDrivenArchitectureFiles(context, projectName);
      break;
    default:
    // No specific files to create
  }
}

void createCleanArchitectureFiles(HookContext context, String projectName) {
  // Core error handling
  createFile(
      '$projectName/lib/core/error/failures.dart',
      '''
// Failure base class and implementations
// Generated by Flutter Bunny Cliüê∞

abstract class Failure {
  final String message;
  
  const Failure({required this.message});
}

class ServerFailure extends Failure {
  const ServerFailure({required String message}) : super(message: message);
}

class CacheFailure extends Failure {
  const CacheFailure({required String message}) : super(message: message);
}

class NetworkFailure extends Failure {
  const NetworkFailure({required String message}) : super(message: message);
}
''',
      context);

  // DI setup file
  createFile(
      '$projectName/lib/infrastructure/injector/injector.dart',
      '''
// Dependency injection setup
// Generated by Flutter Bunny Cliüê∞

// This file will be used to setup dependency injection
// with a package like get_it, injectable, etc.

void setupInjector() {
  // TODO: Register dependencies
}
''',
      context);
}

void createMVVMArchitectureFiles(HookContext context, String projectName) {
  // Base view model
  createFile(
      '$projectName/lib/core/base_view_model.dart',
      '''
// Base view model
// Generated by Flutter Bunny Cliüê∞

abstract class BaseViewModel {
  // Base view model functionality
  // This would typically include common properties and methods
  // for all view models in the application
  
  bool isLoading = false;
  String? errorMessage;
  
  void setLoading(bool loading) {
    isLoading = loading;
    // Notify listeners - implementation depends on state management
  }
  
  void setError(String? error) {
    errorMessage = error;
    // Notify listeners - implementation depends on state management
  }
}
''',
      context);
}

void createMVCArchitectureFiles(HookContext context, String projectName) {
  // Base controller
  createFile(
      '$projectName/lib/core/base_controller.dart',
      '''
// Base controller
// Generated by Flutter Bunny Cliüê∞

abstract class BaseController {
  // Base controller functionality
  // This would typically include common properties and methods
  // for all controllers in the application
  
  bool isLoading = false;
  String? errorMessage;
  
  void setLoading(bool loading) {
    isLoading = loading;
    // Notify listeners - implementation depends on state management
  }
  
  void setError(String? error) {
    errorMessage = error;
    // Notify listeners - implementation depends on state management
  }
}
''',
      context);
}

void createFeatureDrivenArchitectureFiles(
    HookContext context, String projectName) {
  // App navigation
  createFile(
      '$projectName/lib/core/navigation/app_router.dart',
      '''
// App router
// Generated by Flutter Bunny Cliüê∞

import 'package:flutter/material.dart';

class AppRouter {
  static Route<dynamic> generateRoute(RouteSettings settings) {
    // TODO: Implement route generation based on your features
    switch (settings.name) {
      default:
        return MaterialPageRoute(
          builder: (_) => Scaffold(
            body: Center(
              child: Text('No route defined for \${settings.name}'),
            ),
          ),
        );
    }
  }
}
''',
      context);
}
