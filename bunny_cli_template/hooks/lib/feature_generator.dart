import 'dart:io';

import 'package:mason/mason.dart';

import 'state_management_handler.dart';
import 'utils.dart';

void createFeatureStructures(HookContext context, String projectName,
    List<dynamic> features, String architecture, String stateManagement) {
  for (final feature in features) {
    final featureName = feature.toString().toLowerCase().replaceAll(' ', '_');

    switch (architecture) {
      case 'Clean Architecture':
        createCleanArchitectureFeature(
            context, projectName, featureName, stateManagement);
        break;
      case 'MVVM':
        createMVVMFeature(context, projectName, featureName, stateManagement);
        break;
      case 'MVC':
        createMVCFeature(context, projectName, featureName, stateManagement);
        break;
      case 'Feature-Driven':
        createFeatureDrivenFeature(
            context, projectName, featureName, stateManagement);
        break;
      default:
        context.logger.warn('Unknown architecture: $architecture');
        continue;
    }
  }
}

void createCleanArchitectureFeature(HookContext context, String projectName,
    String featureName, String stateManagement) {
  // Create Clean Architecture structure for the feature
  final baseDirectories = [
    'lib/features/$featureName/domain/entities',
    'lib/features/$featureName/domain/repositories',
    'lib/features/$featureName/domain/usecases',
    'lib/features/$featureName/data/models',
    'lib/features/$featureName/data/repositories',
    'lib/features/$featureName/data/datasources',
    'lib/features/$featureName/presentation/pages',
    'lib/features/$featureName/presentation/widgets',
  ];

  // Create all base directories
  for (final dir in baseDirectories) {
    final directory = Directory('$projectName/$dir');
    if (!directory.existsSync()) {
      directory.createSync(recursive: true);
      context.logger.info('Created feature directory: $dir');
    }
  }

  // Create sample entity
  createFile(
      '$projectName/lib/features/$featureName/domain/entities/${featureName}_entity.dart',
      generateEntityTemplate(featureName),
      context);

  // Create sample repository interface
  createFile(
      '$projectName/lib/features/$featureName/domain/repositories/${featureName}_repository.dart',
      generateRepositoryTemplate(featureName),
      context);

  // Create sample use case
  createFile(
      '$projectName/lib/features/$featureName/domain/usecases/${featureName}_usecase.dart',
      generateUseCaseTemplate(featureName),
      context);

  // Create sample model
  createFile(
      '$projectName/lib/features/$featureName/data/models/${featureName}_model.dart',
      generateModelTemplate(featureName),
      context);

  // Create sample repository implementation
  createFile(
      '$projectName/lib/features/$featureName/data/repositories/${featureName}_repository_impl.dart',
      generateRepositoryImplTemplate(featureName),
      context);

  // Create sample data source
  createFile(
      '$projectName/lib/features/$featureName/data/datasources/${featureName}_data_source.dart',
      generateDataSourceTemplate(featureName),
      context);

  // Create sample page
  createFile(
      '$projectName/lib/features/$featureName/presentation/pages/${featureName}_page.dart',
      generatePageTemplate(featureName),
      context);

  // Create sample widget
  createFile(
      '$projectName/lib/features/$featureName/presentation/widgets/${featureName}_widget.dart',
      generateWidgetTemplate(featureName),
      context);

  // Create state management files
  createStateManagementFiles(context, projectName,
      'lib/features/$featureName/presentation', featureName, stateManagement);
}

void createMVVMFeature(HookContext context, String projectName,
    String featureName, String stateManagement) {
  // Create MVVM structure for the feature
  final baseDirectories = [
    'lib/features/$featureName/models',
    'lib/features/$featureName/views',
    'lib/features/$featureName/viewmodels',
    'lib/features/$featureName/services',
  ];

  // Create all base directories
  for (final dir in baseDirectories) {
    final directory = Directory('$projectName/$dir');
    if (!directory.existsSync()) {
      directory.createSync(recursive: true);
      context.logger.info('Created feature directory: $dir');
    }
  }

  // Create sample model
  createFile(
      '$projectName/lib/features/$featureName/models/${featureName}_model.dart',
      '''
// ${toClassName(featureName)}Model
// Generated by Flutter Bunny Cliüê∞

class ${toClassName(featureName)}Model {
  final String id;
  final String name;
  // Add more fields as needed
  
  ${toClassName(featureName)}Model({
    required this.id,
    required this.name,
  });
  
  factory ${toClassName(featureName)}Model.fromJson(Map<String, dynamic> json) {
    return ${toClassName(featureName)}Model(
      id: json['id'],
      name: json['name'],
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
    };
  }
}
''',
      context);

  // Create sample view
  createFile(
      '$projectName/lib/features/$featureName/views/${featureName}_view.dart',
      '''
// ${toClassName(featureName)}View
// Generated by Flutter Bunny Cliüê∞
import 'package:flutter/material.dart';

class ${toClassName(featureName)}View extends StatelessWidget {
  const ${toClassName(featureName)}View({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Use state management here to connect with viewmodel
    return Scaffold(
      appBar: AppBar(
        title: Text('${toClassName(featureName)}'),
      ),
      body: Center(
        child: Text('${toClassName(featureName)} View'),
      ),
    );
  }
}
''',
      context);

  // Create sample service
//   createFile(
//       '$projectName/lib/features/$featureName/services/${featureName}_service.dart',
//       '''
// // ${toClassName(featureName)}Service
// // Generated by Flutter Bunny Cliüê∞

// class ${toClassName(featureName)}Service {
//   // TODO: Implement API calls, database operations, etc.
  
//   Future<void> fetchData() async {
//     // Sample implementation
//   }
  
//   Future<void> saveData() async {
//     // Sample implementation
//   }
// }
// ''',
//       context);

  // Create state management-specific viewmodel
  switch (stateManagement) {
    case 'Provider':
      createFile(
          '$projectName/lib/features/$featureName/viewmodels/${featureName}_viewmodel.dart',
          generateProviderViewModel(featureName),
          context);
      break;
    case 'Riverpod':
      createFile(
          '$projectName/lib/features/$featureName/viewmodels/${featureName}_viewmodel.dart',
          generateRiverpodViewModel(featureName),
          context);
      break;
    case 'BLoC':
      createBlocFiles(context, projectName,
          'lib/features/$featureName/viewmodels', featureName);
      break;
    case 'GetX':
      createFile(
          '$projectName/lib/features/$featureName/viewmodels/${featureName}_viewmodel.dart',
          generateGetXViewModel(featureName),
          context);
      break;
    case 'MobX':
      createFile(
          '$projectName/lib/features/$featureName/viewmodels/${featureName}_viewmodel.dart',
          generateMobXViewModel(featureName),
          context);
      break;
    case 'Redux':
      createReduxFiles(context, projectName,
          'lib/features/$featureName/viewmodels', featureName);
      break;
    default:
      createFile(
          '$projectName/lib/features/$featureName/viewmodels/${featureName}_viewmodel.dart',
          generateBasicViewModel(featureName),
          context);
  }
}

void createMVCFeature(HookContext context, String projectName,
    String featureName, String stateManagement) {
  // Create MVC structure for the feature
  final baseDirectories = [
    'lib/features/$featureName/models',
    'lib/features/$featureName/views',
    'lib/features/$featureName/controllers',
    'lib/features/$featureName/services',
  ];

  // Create all base directories
  for (final dir in baseDirectories) {
    final directory = Directory('$projectName/$dir');
    if (!directory.existsSync()) {
      directory.createSync(recursive: true);
      context.logger.info('Created feature directory: $dir');
    }
  }

  // Create sample model
  createFile(
      '$projectName/lib/features/$featureName/models/${featureName}_model.dart',
      '''
// ${toClassName(featureName)}Model
// Generated by Flutter Bunny Cliüê∞

class ${toClassName(featureName)}Model {
  final String id;
  final String name;
  // Add more fields as needed
  
  ${toClassName(featureName)}Model({
    required this.id,
    required this.name,
  });
  
  factory ${toClassName(featureName)}Model.fromJson(Map<String, dynamic> json) {
    return ${toClassName(featureName)}Model(
      id: json['id'],
      name: json['name'],
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
    };
  }
}
''',
      context);

  // Create sample view
  createFile(
      '$projectName/lib/features/$featureName/views/${featureName}_view.dart',
      '''
// ${toClassName(featureName)}View
// Generated by Flutter Bunny Cliüê∞
import 'package:flutter/material.dart';


class ${toClassName(featureName)}View extends StatelessWidget {
  const ${toClassName(featureName)}View({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Use state management here to connect with controller
    return Scaffold(
      appBar: AppBar(
        title: Text('${toClassName(featureName)}'),
      ),
      body: Center(
        child: Text('${toClassName(featureName)} View'),
      ),
    );
  }
}
''',
      context);

//   // Create sample service
//   createFile(
//       '$projectName/lib/features/$featureName/services/${featureName}_service.dart',
//       '''
// // ${toClassName(featureName)}Service
// // Generated by Flutter Bunny Cliüê∞

// class ${toClassName(featureName)}Service {
//   // TODO: Implement API calls, database operations, etc.
  
//   Future<void> fetchData() async {
//     // Sample implementation
//   }
  
//   Future<void> saveData() async {
//     // Sample implementation
//   }
// }
// ''',
//       context);

  // Create state management-specific controller
  switch (stateManagement) {
    case 'Provider':
      createFile(
          '$projectName/lib/features/$featureName/controllers/${featureName}_controller.dart',
          generateProviderController(featureName),
          context);
      break;
    case 'Riverpod':
      createFile(
          '$projectName/lib/features/$featureName/controllers/${featureName}_controller.dart',
          generateRiverpodController(featureName),
          context);
      break;
    case 'BLoC':
      createBlocFiles(context, projectName,
          'lib/features/$featureName/controllers', featureName);
      break;
    case 'GetX':
      createFile(
          '$projectName/lib/features/$featureName/controllers/${featureName}_controller.dart',
          generateGetXController(featureName),
          context);
      break;
    case 'MobX':
      createFile(
          '$projectName/lib/features/$featureName/controllers/${featureName}_controller.dart',
          generateMobXController(featureName),
          context);
      break;
    case 'Redux':
      createReduxFiles(context, projectName,
          'lib/features/$featureName/controllers', featureName);
      break;
    default:
      createFile(
          '$projectName/lib/features/$featureName/controllers/${featureName}_controller.dart',
          generateBasicController(featureName),
          context);
  }
}

void createFeatureDrivenFeature(HookContext context, String projectName,
    String featureName, String stateManagement) {
  // Create Feature-Driven structure for the feature
  final baseDirectories = [
    'lib/features/$featureName/domain/entities',
    'lib/features/$featureName/domain/repositories',
    'lib/features/$featureName/domain/usecases',
    'lib/features/$featureName/data/models',
    'lib/features/$featureName/data/repositories',
    'lib/features/$featureName/data/datasources',
    'lib/features/$featureName/presentation/pages',
    'lib/features/$featureName/presentation/widgets',
  ];

  // Create all base directories
  for (final dir in baseDirectories) {
    final directory = Directory('$projectName/$dir');
    if (!directory.existsSync()) {
      directory.createSync(recursive: true);
      context.logger.info('Created feature directory: $dir');
    }
  }

  // Create sample entity
  createFile(
      '$projectName/lib/features/$featureName/domain/entities/${featureName}_entity.dart',
      generateEntityTemplate(featureName),
      context);

  // Create sample repository interface
  createFile(
      '$projectName/lib/features/$featureName/domain/repositories/${featureName}_repository.dart',
      generateRepositoryTemplate(featureName),
      context);

  // Create sample use case
  createFile(
      '$projectName/lib/features/$featureName/domain/usecases/${featureName}_usecase.dart',
      generateUseCaseTemplate(featureName),
      context);

  // Create sample model
  createFile(
      '$projectName/lib/features/$featureName/data/models/${featureName}_model.dart',
      generateModelTemplate(featureName),
      context);

  // Create sample repository implementation
  createFile(
      '$projectName/lib/features/$featureName/data/repositories/${featureName}_repository_impl.dart',
      generateRepositoryImplTemplate(featureName),
      context);

  // Create sample data source
  createFile(
      '$projectName/lib/features/$featureName/data/datasources/${featureName}_data_source.dart',
      generateDataSourceTemplate(featureName),
      context);

  // Create sample page
  createFile(
      '$projectName/lib/features/$featureName/presentation/pages/${featureName}_page.dart',
      generatePageTemplate(featureName),
      context);

  // Create sample widget
  createFile(
      '$projectName/lib/features/$featureName/presentation/widgets/${featureName}_widget.dart',
      generateWidgetTemplate(featureName),
      context);

  // Create state management files
  createStateManagementFiles(context, projectName,
      'lib/features/$featureName/presentation', featureName, stateManagement);
}
